rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      // Check if the user has an admin role. Check for existence of role field first.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Global admin access
    match /{path=**} {
      allow read, write: if isAdmin();
    }

    // Allow anyone to count users for the bonus card, but not read the documents.
    match /users/{userId} {
       allow get: if isUserAuthenticated();
       allow list: if isUserAuthenticated();
       allow update: if isOwner(userId);
       allow create: if isUserAuthenticated();
       allow count: if true;
    }
    
    match /friend_requests/{requestId} {
        allow read, create, update, delete: if isUserAuthenticated();
    }
    
    match /notifications/{notificationId} {
        allow read, create, update, delete: if isUserAuthenticated() && isOwner(resource.data.userId);
    }
    
    match /transactions/{transactionId} {
      allow read: if isUserAuthenticated() && isOwner(resource.data.userId);
      allow create: if isUserAuthenticated();
    }
    
    match /marketing_applications/{appId} {
        allow read, create, update: if isUserAuthenticated();
    }
    
    match /chats/{chatId} {
      allow read, update, delete: if isUserAuthenticated() && request.auth.uid in resource.data.users;
      allow create: if isUserAuthenticated();
      
      match /messages/{messageId} {
        allow read, create: if isUserAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
      }
    }
    
    match /game_rooms/{roomId} {
        // Any authenticated user can create a game room
        allow create: if isUserAuthenticated();

        // Any authenticated user can read public waiting rooms (for the lobby)
        allow list: if isUserAuthenticated() && resource.data.isPrivate == false && resource.data.status == 'waiting';

        // Only players in the game can read the full game room data
        allow get: if isUserAuthenticated() && request.auth.uid in resource.data.players;

        // A second player can join a waiting room
        allow update: if isUserAuthenticated() && resource.data.status == 'waiting';
        
        // Only a player in the game can make updates (moves)
        allow update: if isUserAuthenticated() && request.auth.uid in resource.data.players && resource.data.status == 'in-progress';
        
        // Only the creator can delete a waiting room
        allow delete: if isUserAuthenticated() && request.auth.uid == resource.data.createdBy.uid && resource.data.status == 'waiting';
        
         match /messages/{messageId} {
            allow read, create: if isUserAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
        }
    }
  }
}
