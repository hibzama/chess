
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Users can only read/update their own profile. Anyone can create a user (for signup).
    match /users/{userId} {
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
      allow create: if true;
      
      // An admin can read/write any user document.
      allow read, write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Settings can only be read/written by admins.
    match /settings/{settingId} {
      allow read, write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Public game rooms can be read by anyone, but only modified by authenticated users.
    match /game_rooms/{roomId} {
      allow read: if true;
      allow create, update, delete: if request.auth != null;
    }
    
    // Messages can only be read/written by players in the game room.
    match /game_rooms/{roomId}/messages/{messageId} {
       allow read, create: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
    }

    // Transactions: users can create/read their own, admins can read/update any.
    match /transactions/{transactionId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read: if request.auth != null && (resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Marketing applications can be created by anyone, but only managed by admins.
    match /marketing_applications/{appId} {
        allow create: if true;
        allow read, update, delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Friend requests can be managed by the sender or receiver.
    match /friend_requests/{reqId} {
      allow read, write, delete: if request.auth != null && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      allow create: if request.auth != null && request.auth.uid == request.resource.data.fromId;
    }

    // Notifications are private to the user.
    match /notifications/{notifId} {
       allow read, write, delete: if request.auth != null && request.auth.uid == resource.data.userId;
       allow create: if true; // Allowed to be created by server-side logic (e.g., friend requests).
    }
    
    // Bonus Campaigns are public to read for authenticated users. Admins can write.
    match /referral_campaigns/{campaignId} {
        allow read: if request.auth != null;
        allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /daily_bonus_campaigns/{campaignId} {
        allow read: if request.auth != null;
        allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // User-specific claims can only be accessed by that user.
    match /users/{userId}/active_campaigns/{campaign} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    match /users/{userId}/bonus_claims/{claimId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
    }
     match /users/{userId}/daily_bonus_claims/{claimId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
    }
     match /daily_bonus_campaigns/{campaignId}/claims/{userId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
     }

     // Chat documents can be accessed by the players involved.
     match /chats/{chatId} {
        allow read, write: if request.auth != null && request.auth.uid in resource.data.userIds;
     }
     match /chats/{chatId}/messages/{messageId} {
        allow read, write: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.userIds;
     }
  }
}
