rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =================================
    // Helper Functions
    // =================================

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isPlayer(room) {
      return request.auth.uid in room.data.players;
    }

    // =================================
    // Collections
    // =================================

    match /users/{userId} {
      // Any signed-in user can read another user's profile (for leaderboards, friends, etc.).
      allow read: if isSignedIn();
    
      // A user can only create their own user document.
      allow create: if isOwner(userId) && !exists(/databases/$(database)/documents/users/$(userId));
    
      // A user can update their own profile, but cannot change their balance or role.
      // Admins can update any field.
      // Balance can be updated by the system during a transaction (e.g. joining a game).
      allow update: if 
        (isOwner(userId) && !(
            'balance' in request.resource.data && request.resource.data.balance != resource.data.balance
          ) && !(
            'marketingBalance' in request.resource.data && request.resource.data.marketingBalance != resource.data.marketingBalance
          ) && !(
            'role' in request.resource.data && request.resource.data.role != resource.data.role
          )
        ) || isAdmin();
    }

    match /friend_requests/{requestId} {
      allow read: if isSignedIn() && (isOwner(resource.data.fromId) || isOwner(resource.data.toId));
      allow create: if isSignedIn() && isOwner(request.resource.data.fromId);
      allow delete: if isSignedIn() && (isOwner(resource.data.fromId) || isOwner(resource.data.toId));
    }
    
    match /game_rooms/{roomId} {
      allow list, read: if isSignedIn();
      allow create: if isSignedIn() && isOwner(request.resource.data.createdBy.uid);
      allow delete: if isSignedIn() && isOwner(resource.data.createdBy.uid);

      allow update: if isSignedIn() && 
        (
          // Rule for a player joining a waiting room
          (
            resource.data.status == 'waiting' &&
            request.resource.data.status == 'in-progress' &&
            request.resource.data.player2.uid == request.auth.uid &&
            // Check that the user is not already in the room
            !(request.auth.uid in resource.data.players)
          ) ||
          // Rule for players making moves in an in-progress game
          (
            isPlayer(resource) &&
            resource.data.status == 'in-progress'
          )
        );
    }
    
    match /game_rooms/{roomId}/messages/{messageId} {
      allow read, create: if isSignedIn() && isPlayer(get(/databases/$(database)/documents/game_rooms/$(roomId)));
    }

    match /transactions/{transactionId} {
      allow read, list: if (isSignedIn() && isOwner(resource.data.userId)) || isAdmin();
      allow create: if isSignedIn();
      allow update: if isAdmin();
    }

    match /notifications/{notificationId} {
        allow read, list, update: if isSignedIn() && isOwner(resource.data.userId);
        allow create: if isSignedIn();
    }

    match /marketing_applications/{appId} {
        allow create; 
        allow read, update, delete: if isAdmin();
    }

    match /chats/{chatId} {
        allow read, write, list: if isSignedIn() && request.auth.uid in chatId.split('_');

        match /messages/{messageId} {
            allow read, create: if isSignedIn() && request.auth.uid in chatId.split('_');
        }
    }

    match /settings/{docId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    match /bonuses/{bonusId} {
        allow read, list: if isSignedIn();
        allow create, update, delete: if isAdmin();
    }

    match /dailyBonusClaims/{claimId} {
      allow read: if isSignedIn();
      allow create, update: if isSignedIn();
    }

    match /users/{userId}/daily_bonus_claims/{claimId} {
        allow read, write: if isOwner(userId);
    }
    
    match /events/{eventId} {
      allow read: if isSignedIn();
      allow list, create, update, delete: if isAdmin();

      match /users/{userId}/event_enrollments/{enrollmentId} {
        allow read, write, update: if isOwner(userId);

        match /progress_history/{progressId} {
          allow read: if isOwner(userId);
          // Only backend can write history
          allow write: if false;
        }
      }
    }
  }
}
