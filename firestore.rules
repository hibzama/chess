
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }
    
    // Admins can do anything
    match /{path=**}/documents/{document} {
        allow read, write: if isAdmin();
    }

    // Users collection
    match /users/{userId} {
      allow read: if isUserAuthenticated();
      allow write: if isOwner(userId);
    }
    
    // Marketing Applications can be created by anyone, but only read/updated by admin
    match /marketing_applications/{appId} {
        allow create: if true;
        allow read, update, delete: if isAdmin();
    }

    // Game rooms can be read by anyone, but only modified by players in the game
    match /game_rooms/{roomId} {
        allow read: if isUserAuthenticated();
        allow create: if isUserAuthenticated();
        allow update, delete: if isUserAuthenticated() && (resource.data.createdBy.uid == request.auth.uid || request.auth.uid in resource.data.players);
    }
    
    match /game_rooms/{roomId}/messages/{messageId} {
        allow read, create: if isUserAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
    }

    // Transactions can only be read/created by the owner. Updates by admin.
    match /transactions/{transactionId} {
        allow create: if isOwner(request.resource.data.userId);
        allow read: if isOwner(resource.data.userId);
        allow update: if isAdmin();
    }

    // Chat rooms can only be accessed by participants
    match /chats/{chatId} {
        allow read, update: if isUserAuthenticated() && request.auth.uid in resource.data.users;
    }
    
    match /chats/{chatId}/messages/{messageId} {
        allow read, create: if isUserAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
    }
    
    // Friend requests are specific to sender/receiver
    match /friend_requests/{requestId} {
        allow create: if isOwner(request.resource.data.fromId);
        allow read, delete: if isOwner(resource.data.fromId) || isOwner(resource.data.toId);
    }
    
    // Notifications are user-specific
    match /notifications/{notificationId} {
        allow read, update: if isOwner(resource.data.userId);
        allow create: if true; // Can be created by server functions
    }
    
    // Settings can be read by any authenticated user, but only written by admin
    match /settings/{settingId} {
        allow read: if isUserAuthenticated();
        allow write: if isAdmin();
    }
    
    // Event System Rules
    // Any authenticated user can read the list of available events
    match /events/{eventId} {
      allow read: if isUserAuthenticated();
      allow write: if isAdmin();
    }
    
    // Users can read/write their own enrollment status and progress
    match /users/{userId}/event_enrollments/{enrollmentId} {
        allow read, write: if isOwner(userId);
    }
    
    // Admins can read the master list of enrollments for management purposes
    match /event_enrollments/{eventId}/{docType}/{userId} {
        allow read, write: if isAdmin();
    }

    // Bonus System Rules
    match /bonuses/{bonusId} {
        allow read: if isUserAuthenticated();
        allow write: if isAdmin();
    }

    match /dailyBonusClaims/{bonusId} {
        allow read, write: if true; // Open for transactions to work
    }

    match /users/{userId}/daily_bonus_claims/{claimId} {
        allow read, write: if isOwner(userId);
    }
  }
}
