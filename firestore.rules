rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    // Collection: users
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isOwner(userId);
      // Allow updates to own document
      // Allow specific updates by others (accepting friend request, joining game)
      allow update: if isOwner(userId) || 
                   (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['friends', 'balance', 'marketingBalance', 'l1Count', 'wins', 'lastSeen', 'status']));
      allow delete: if false; // Users should not be deleted
    }

    // Collection: game_rooms
    match /game_rooms/{roomId} {
      allow read: if isSignedIn();
      allow create: if isOwner(request.resource.data.createdBy.uid);
      allow update: if isSignedIn();
      allow delete: if isSignedIn() && isOwner(resource.data.createdBy.uid); // Only creator can delete a waiting room
      
      // Subcollection: messages
      match /messages/{messageId} {
        allow read, write: if isSignedIn() && request.auth.uid in resource.data.players;
      }
    }
    
    // Collection: transactions
    match /transactions/{transactionId} {
      allow read: if isSignedIn() && isOwner(resource.data.userId);
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    // Collection: friend_requests
    match /friend_requests/{requestId} {
        allow read: if isSignedIn();
        allow create: if isOwner(request.resource.data.fromId);
        allow delete: if isSignedIn() && (isOwner(resource.data.fromId) || isOwner(resource.data.toId));
    }
    
    // Collection: chats
    match /chats/{chatId} {
        allow read, update: if isSignedIn() && request.auth.uid in resource.data.users;
        
        match /messages/{messageId} {
            allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
        }
    }
    
     // Collection: notifications
    match /notifications/{notificationId} {
        allow read, update: if isSignedIn() && isOwner(resource.data.userId);
        allow create: if isSignedIn();
    }

    // Collection: marketing_applications
    match /marketing_applications/{appId} {
        allow create;
        allow read, update: if isSignedIn() && getUserData(request.auth.uid).role == 'admin';
    }
  }
}
