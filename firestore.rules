
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the user is an admin
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Users can read their own data, admins can read/write any user data.
    match /users/{userId} {
      allow read, update: if isSignedIn() && request.auth.uid == userId;
      allow list, write: if isAdmin();
    }
    
    match /users/{userId}/{subcollection}/{docId} {
        allow read, write: if isSignedIn() && request.auth.uid == userId;
    }

    // Admins can read/write marketing applications
    match /marketing_applications/{appId} {
      allow read, write: if isAdmin();
      allow create: if isSignedIn();
    }

    // Public game rooms can be read by anyone, but only modified under specific conditions
    match /game_rooms/{roomId} {
      allow read;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (
                      // Player 2 joining
                      (request.resource.data.status == 'in-progress' && resource.data.status == 'waiting' && request.resource.data.player2.uid == request.auth.uid) ||
                      // A player making a move
                      (request.resource.data.status == 'in-progress' && resource.data.status == 'in-progress' && request.auth.uid in resource.data.players) ||
                      // Game completion/payout
                      (request.resource.data.status == 'completed' && resource.data.status == 'in-progress')
                    );
      allow delete: if isSignedIn() && request.auth.uid == resource.data.createdBy.uid;

      match /messages/{messageId} {
        allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
      }
    }
    
    // Admins can manage all transactions, users can only see their own.
    match /transactions/{transactionId} {
        allow read: if isSignedIn() && request.auth.uid == resource.data.userId;
        allow create: if isSignedIn();
        allow update, delete: if isAdmin();
    }
    
    match /chats/{chatId} {
        allow read, update: if isSignedIn() && request.auth.uid in resource.data.userIds;
        match /messages/{messageId} {
            allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.userIds;
        }
    }

    // Notifications: users can read their own
    match /notifications/{notificationId} {
        allow read, update: if isSignedIn() && request.auth.uid == resource.data.userId;
        allow create: if isSignedIn(); // Allow friend requests etc. to create notifications
    }

    // Friend Requests: users can manage their own
    match /friend_requests/{requestId} {
        allow read, delete: if isSignedIn() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
        allow create: if isSignedIn() && request.auth.uid == request.resource.data.fromId;
    }
    
    // Admins can manage all settings
    match /settings/{settingId} {
        allow read, write: if isAdmin();
    }

    // Bonus Campaigns can only be read by signed in users, written by admins.
    match /signup_bonus_campaigns/{campaignId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }
    match /daily_bonus_campaigns/{campaignId} {
        allow read, write: if isAdmin();
    }
    match /referral_campaigns/{campaignId} {
        allow read, write: if isAdmin();
    }
     match /deposit_bonus_campaigns/{campaignId} {
        allow read, write: if isAdmin();
    }
    
    match /bonus_claims/{claimId} {
        // Allow a user to create a claim for themselves.
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        // Admins can read/update all claims (for approval).
        allow read, update: if isAdmin();
    }

  }
}
