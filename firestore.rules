
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to check if the user has an 'admin' role
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Users collection rules
    match /users/{userId} {
      // Any authenticated user can read public user data
      allow read: if isAuthenticated();
      // Only the owner can create their own user document
      allow create: if isOwner(userId);
      // Only the owner or an admin can update a user document
      allow update, delete: if isOwner(userId) || isAdmin();
      
      // Subcollections for users
      match /{subcollection}/{docId} {
        allow read, write: if isOwner(userId);
      }
    }

    // Game Rooms collection rules
    match /game_rooms/{roomId} {
      // Any authenticated user can read public game rooms
      allow read: if isAuthenticated();
      // Any authenticated user can create a game room
      allow create: if isAuthenticated();
      // Only players in the game or admins can update/delete
      allow update, delete: if isAuthenticated() && (resource.data.createdBy.uid == request.auth.uid || request.auth.uid in resource.data.players || isAdmin());
      
      // Messages subcollection
      match /messages/{messageId} {
        allow read, write: if isAuthenticated() && (request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players);
      }
    }
    
    // Friend Requests collection rules
    match /friend_requests/{requestId} {
      allow read, write, delete: if isAuthenticated();
    }
    
    // Notifications collection rules
    match /notifications/{notificationId} {
      allow read, write, delete: if isAuthenticated() && isOwner(resource.data.userId);
    }
    
    // Transactions collection rules
    match /transactions/{transactionId} {
       allow read, write: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
    }
    
    // Bonus Campaigns & Settings
    match /settings/{settingId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    match /signup_bonus_campaigns/{campaignId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
      match /claims/{claimId} {
        allow read, write: if isAuthenticated();
      }
    }

    match /daily_bonus_campaigns/{campaignId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
      match /claims/{claimId} {
        allow read, write: if isAuthenticated();
      }
    }
    
    match /deposit_bonus_campaigns/{campaignId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
       match /claims/{claimId} {
        allow read, write: if isAuthenticated();
      }
    }

    match /referral_campaigns/{campaignId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Bonus claims collection group for admins to review
    match /{path=**}/bonus_claims/{claimId} {
      allow read, write: if isAuthenticated();
    }
    
    // Marketing collections
    match /marketing_applications/{appId} {
      allow read: if isAdmin();
      allow create: if !isAuthenticated(); // Allow public application
      allow update: if isAdmin();
    }

    match /chats/{chatId} {
      allow read, update: if isAuthenticated() && request.auth.uid in resource.data.userIds;
      allow create: if isAuthenticated();
      
      match /messages/{messageId} {
        allow read, create: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.userIds;
      }
    }
  }
}
