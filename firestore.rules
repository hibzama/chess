rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to improve readability
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isAuth() {
      return request.auth != null;
    }

    function isUser(userId) {
      return request.auth.uid == userId;
    }
    
    // Admins can do anything
    match /{path=**} {
      allow read, write: if isAdmin();
    }
    
    match /users/{userId} {
      // Anyone can count users for the bonus card
      allow list: if true; 
      
      // A user can read their own document fully.
      // Any authenticated user can read the public profile of another user.
      allow read: if isUser(userId) || isAuth();

      // Only a user can update their own document. They cannot change their role or balance.
      allow update: if isUser(userId) 
                    && !('role' in request.resource.data)
                    && !('balance' in request.resource.data)
                    && !('marketingBalance' in request.resource.data)
                    && !('commissionBalance' in request.resource.data);

      // Deny creation/deletion of user docs from client
      allow create, delete: if false;
    }

    match /game_rooms/{roomId} {
      // Anyone can read public game rooms for the lobby list
      allow list: if true;
      allow read: if resource.data.isPrivate == false || request.auth.uid in resource.data.players;

      // Allow authenticated user to create a room if they are in the players list
      allow create: if isAuth() && request.auth.uid in request.resource.data.players;

      // Allow joining (update from waiting to in-progress)
      allow update: if isAuth()
                    && resource.data.status == 'waiting'
                    && request.resource.data.status == 'in-progress'
                    && !(request.auth.uid in resource.data.players);

      // Allow game moves and completion updates by players in the game
      allow update: if isAuth()
                    && request.auth.uid in resource.data.players
                    && resource.data.status == 'in-progress';
                    
      // Only the creator can delete a waiting room
      allow delete: if isAuth() 
                    && resource.data.status == 'waiting'
                    && request.auth.uid == resource.data.createdBy.uid;
    }
    
    match /game_rooms/{roomId}/messages/{messageId} {
        // Only players in the game can read/write chat messages
        allow read, create: if isAuth() && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
    }

    match /transactions/{transactionId} {
      // A user can create a transaction for themselves
      allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
      // A user can only read their own transactions
      allow read: if isAuth() && resource.data.userId == request.auth.uid;
    }
    
    match /marketing_applications/{appId} {
        // Anyone can create a marketing application
        allow create: if true;
    }
    
    match /friend_requests/{reqId} {
      // Users can create requests for themselves
      allow create: if isAuth() && request.resource.data.fromId == request.auth.uid;
      // Users can read/update requests sent to or from them
      allow read, update, delete: if isAuth() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
    }
    
    match /notifications/{notifId} {
        // A user can only read their own notifications
        allow read, update: if isAuth() && resource.data.userId == request.auth.uid;
        // Deny creation/deletion from client - must be done via backend/functions
        allow create, delete: if false;
    }
    
    // Default deny all other access
    match /{path=**} {
      allow read, write: if false;
    }
  }
}
