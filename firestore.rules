rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /users/{userId} {
      // Allow users to read their own data and admins to read any user's data.
      allow read: if request.auth.uid == userId || isAdmin();
      
      // Allow users to update their own data, but not their balance, role, or other sensitive fields.
      allow update: if request.auth.uid == userId &&
                       !('balance' in request.resource.data) &&
                       !('bonusBalance' in request.resource.data) &&
                       !('marketingBalance' in request.resource.data) &&
                       !('role' in request.resource.data);

      // Allow users to enroll in an event, which deducts from their balance
      allow update: if request.auth.uid == userId &&
                      request.resource.data.balance == request.auth.token.balance - get(/databases/$(database)/documents/events/$(request.resource.data.enrollingEventId)).data.enrollmentFee &&
                      exists(/databases/$(database)/documents/users/$(userId)/event_enrollments/$(request.resource.data.enrollingEventId));

      // Allow new users to create their own account.
      allow create: if request.auth.uid == userId;
      
      match /event_enrollments/{enrollmentId} {
        allow read, write: if request.auth.uid == userId;

        match /progress_history/{progressId} {
            allow read: if request.auth.uid == userId;
        }
      }

      match /daily_bonus_claims/{claimId} {
        allow read, write: if request.auth.uid == userId;
      }
    }
    
    match /events/{eventId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /event_enrollments/{eventId}/users/{userId} {
        allow read: if request.auth.uid == userId;
        allow list: if isAdmin();
    }

    match /game_rooms/{roomId} {
      allow read: if true;
      allow write: if request.auth.uid in resource.data.players || isAdmin();
      
      match /messages/{messageId} {
        allow read, write: if get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players.hasAny([request.auth.uid]);
      }
    }
    
    match /chats/{chatId} {
      allow read, write: if request.auth.uid in resource.data.users;
      
      match /messages/{messageId} {
         allow read, write: if get(/databases/$(database)/documents/chats/$(chatId)).data.users.hasAny([request.auth.uid]);
      }
    }

    match /transactions/{transactionId} {
      allow read: if request.auth.uid == resource.data.userId || isAdmin();
      allow create: if request.auth.uid == request.resource.data.userId;
      allow update, delete: if isAdmin();
    }
    
    match /marketing_applications/{applicationId} {
      allow create: if true;
      allow read, update, delete: if isAdmin();
    }

    match /settings/{settingId} {
      allow read: if true;
      allow write: if isAdmin();
    }

     match /bonuses/{bonusId} {
        allow read: if true;
        allow write: if isAdmin();
     }

     match /dailyBonusClaims/{bonusId} {
        allow read: if true;
        allow update: if request.auth.uid != null;
     }

  }
}
