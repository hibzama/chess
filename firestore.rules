rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users: Public read for profiles, but only the user can write to their own document.
    match /users/{userId} {
      allow read;
      allow update, delete: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
      
      // User subcollections are private to the user.
      match /event_enrollments/{enrollmentId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      match /daily_bonus_claims/{claimId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Game Rooms: Can be read by anyone in the lobby (for public games), but only players can update.
    match /game_rooms/{roomId} {
        allow read;
        allow create: if request.auth != null;
        // Only players in the game can update it.
        allow update: if request.auth != null && request.auth.uid in resource.data.players;
        // Only the creator can delete a waiting room.
        allow delete: if request.auth != null && request.auth.uid == resource.data.createdBy.uid;

        // Messages within a game room are private to the players.
        match /messages/{messageId} {
            allow read, write: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
        }
    }

    // Chat: Only participants of a chat can read or write to it.
    match /chats/{chatId} {
        allow read, update: if request.auth != null && request.auth.uid in resource.data.users;
        match /messages/{messageId} {
             allow read, write: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
        }
    }
    
    // Events: Publicly readable, but only writable by admins.
    match /events/{eventId} {
      allow read;
      allow create, update, delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Transactions: Private to the user or an admin.
    match /transactions/{transactionId} {
        allow read: if request.auth != null && (request.auth.uid == resource.data.userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
        allow create: if request.auth != null;
        allow update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Notifications: Private to the user they are for.
    match /notifications/{notificationId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Friend Requests: Can be created by any authenticated user. Can only be read by sender/receiver.
    match /friend_requests/{requestId} {
      allow read, delete: if request.auth != null && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      allow create: if request.auth != null;
    }
    
    // Settings & Admin collections
    match /settings/{settingId} {
        allow read;
        allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    match /marketing_applications/{appId} {
        allow read, update, delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        // Anyone can apply.
        allow create;
    }

    match /bonuses/{bonusId} {
        allow read;
        allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /dailyBonusClaims/{claimId} {
        allow read;
        // Users can claim via transaction, admins can edit.
        allow write: if request.auth != null;
    }

  }
}
