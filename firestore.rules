
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function getRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    function isAdmin() {
      return isSignedIn() && getRole() == 'admin';
    }

    function isJoiningGame(userId) {
      let gameRoomCreate = existsAfter(/databases/$(database)/documents/game_rooms/$(request.resource.data.gameRoomId));
      let gameRoomData = getAfter(/databases/$(database)/documents/game_rooms/$(request.resource.data.gameRoomId)).data;
      return gameRoomCreate && userId in gameRoomData.players;
    }

    // Users Collection
    match /users/{userId} {
      allow read: if isSignedIn() || isAdmin();
      allow create: if !isSignedIn(); // Allow user creation during sign-up
      allow update: if (isOwner(userId) || isAdmin()) || 
                      (isSignedIn() && isJoiningGame(userId)); // Allow balance updates during game join transaction
      allow delete: if isAdmin();
    }
    
    // Game Rooms Collection
    match /game_rooms/{roomId} {
      allow read: if isSignedIn() || isAdmin();
      allow list: if isSignedIn() || isAdmin();
      allow create: if isSignedIn();
      allow update: if (isSignedIn() && resource.data.players.hasAny([request.auth.uid])) || isAdmin();
      allow delete: if (isSignedIn() && resource.data.createdBy.uid == request.auth.uid) || isAdmin();

      // Messages Subcollection
      match /messages/{messageId} {
        allow read, write: if (isSignedIn() && get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players.hasAny([request.auth.uid])) || isAdmin();
      }
    }

    // Transactions Collection
    match /transactions/{transactionId} {
        allow read, list: if (isSignedIn() && resource.data.userId == request.auth.uid) || isAdmin();
        allow create: if isSignedIn() || isAdmin();
        allow update, delete: if isAdmin();
    }
    
    // Friend Requests Collection
    match /friend_requests/{requestId} {
      allow read, list: if (isSignedIn() && (resource.data.fromId == request.auth.uid || resource.data.toId == request.auth.uid)) || isAdmin();
      allow create: if isSignedIn() && request.resource.data.fromId == request.auth.uid;
      allow update, delete: if (isSignedIn() && (resource.data.fromId == request.auth.uid || resource.data.toId == request.auth.uid)) || isAdmin();
    }

    // Notifications Collection
    match /notifications/{notificationId} {
        allow read, list: if (isSignedIn() && resource.data.userId == request.auth.uid) || isAdmin();
        allow create: if isSignedIn(); // Can be created by functions or other users (friend requests)
        allow update: if (isSignedIn() && resource.data.userId == request.auth.uid) || isAdmin();
        allow delete: if isAdmin();
    }
    
    // Chats Collection
    match /chats/{chatId} {
        allow read, update: if (isSignedIn() && request.auth.uid in resource.data.users) || isAdmin();
        allow create: if isSignedIn(); // Anyone can start a chat
        allow delete: if isAdmin();

        match /messages/{messageId} {
            allow read, write: if (isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users) || isAdmin();
        }
    }

    // Marketing Applications Collection
    match /marketing_applications/{appId} {
        allow read: if isAdmin();
        allow create: true; // Public can apply
        allow update, delete: if isAdmin();
    }
  }
}
