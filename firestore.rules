
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =================================
    // Helper Functions
    // =================================
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function getDoc(path) {
      return get(/databases/$(database)/documents/$(path));
    }

    function incomingData() {
      return request.resource.data;
    }
    
    function existingData() {
      return resource.data;
    }
    
    function isAdmin() {
      return isSignedIn() && getDoc('users/' + request.auth.uid).data.role == 'admin';
    }

    function isChatParticipant(chatId) {
      return request.auth.uid in getDoc('chats/' + chatId).data.users;
    }
    
    function isJoiningGame(roomId) {
      let room = getDoc('game_rooms/' + roomId).data;
      return room.status == 'waiting' &&
             incomingData().status == 'in-progress' &&
             incomingData().player2.uid == request.auth.uid &&
             !(request.auth.uid in room.players) &&
             (request.auth.uid in incomingData().players);
    }
    
    function isPlayingMove(roomId) {
        let room = getDoc('game_rooms/' + roomId).data;
        let isPlayer = request.auth.uid == room.createdBy.uid || request.auth.uid == room.player2.uid;
        return isPlayer &&
               room.status == 'in-progress' &&
               incomingData().status == 'in-progress';
    }

    function isCompletingGame(roomId) {
        let room = getDoc('game_rooms/' + roomId).data;
        let isPlayer = request.auth.uid == room.createdBy.uid || request.auth.uid == room.player2.uid;
        return isPlayer &&
               room.status == 'in-progress' &&
               incomingData().status == 'completed';
    }


    // =================================
    // Collections
    // =================================

    match /users/{userId} {
      allow read: if isSignedIn() || isAdmin();
      allow create: if isOwner(userId);
      allow update: if 
        // Allow user to update their own document, but not critical fields.
        (isOwner(userId) && 
          !('balance' in incomingData()) && 
          !('marketingBalance' in incomingData()) && 
          !('role' in incomingData())
        ) ||
        // Allow friend request acceptance/removal.
        (isSignedIn() && ('friends' in incomingData())) ||
        // Allow admin to update roles.
        isAdmin();
    }
    
    match /friend_requests/{requestId} {
      allow read, delete: if isSignedIn() && (isOwner(resource.data.fromId) || isOwner(resource.data.toId));
      allow create: if isSignedIn() && isOwner(request.resource.data.fromId);
    }

    match /game_rooms/{roomId} {
      allow list, get: if isSignedIn();
      
      allow create: if isSignedIn() && isOwner(request.resource.data.createdBy.uid);
      allow delete: if isSignedIn() && isOwner(resource.data.createdBy.uid);
      
      allow update: if isSignedIn() && (isJoiningGame(roomId) || isPlayingMove(roomId) || isCompletingGame(roomId));
    }
    
    match /transactions/{transactionId} {
      allow create: if isSignedIn();
      allow read, list: if (isSignedIn() && isOwner(resource.data.userId)) || isAdmin();
      allow update: if isAdmin();
    }
    
    match /notifications/{notificationId} {
      allow read, list, update: if isSignedIn() && isOwner(resource.data.userId);
      allow create: if isSignedIn();
    }

    match /marketing_applications/{appId} {
      allow create;
      allow read, update, delete: if isAdmin();
    }

    match /chats/{chatId} {
      allow list: if isSignedIn();
      allow read, update, create: if isChatParticipant(chatId);

      match /messages/{messageId} {
        allow read, create: if isChatParticipant(chatId);
      }
    }
    
    match /game_rooms/{roomId}/messages/{messageId} {
       allow read, create: if isSignedIn() && request.auth.uid in getDoc('game_rooms/' + roomId).data.players;
    }
  }
}
