rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }
    
    // =====================================================================
    //  Users Collection
    // =====================================================================
    match /users/{userId} {
      // READ: Any signed-in user can read any user's profile.
      allow read: if isSignedIn();

      // CREATE: A user can only create their own user document.
      allow create: if isOwner(userId);

      // UPDATE: A user can update their own document.
      // Or, another user can update their 'friends' list ONLY when accepting a friend request.
      allow update: if isOwner(userId) || 
                       (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['friends']));
    }

    // =====================================================================
    //  Game Rooms Collection
    // =====================================================================
    match /game_rooms/{roomId} {
      // READ: Any signed-in user can read a game room to see lobby details.
      allow read: if isSignedIn();

      // CREATE: Any signed-in user can create a game room.
      allow create: if isSignedIn();
      
      // UPDATE: 
      // 1. The creator can update it while it's 'waiting' (e.g., this rule is open but not used in app).
      // 2. A player can join if it's 'waiting'.
      // 3. A player in the game can make a move if it's 'in-progress'.
      allow update: if isSignedIn() && (
        (resource.data.status == 'waiting' && request.auth.uid == resource.data.createdBy.uid) ||
        (resource.data.status == 'waiting' && !request.resource.data.players.hasAny(resource.data.players)) ||
        (resource.data.status == 'in-progress' && request.auth.uid in resource.data.players)
      );

      // DELETE: The creator can delete a room only if it's still 'waiting'.
      allow delete: if isSignedIn() && resource.data.status == 'waiting' && request.auth.uid == resource.data.createdBy.uid;

      // Messages subcollection
      match /messages/{messageId} {
        allow read, write: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
      }
    }

    // =====================================================================
    //  Transactions Collection
    // =====================================================================
    match /transactions/{transactionId} {
      // READ: A user can only read their own transactions.
      allow get: if isSignedIn() && isOwner(get(/databases/$(database)/documents/transactions/$(transactionId)).data.userId);
      // LIST: A user can list their own transactions for history pages.
      allow list: if isSignedIn() && request.query.get('where[0].value') == request.auth.uid;

      // CREATE: A user can create their own transaction document.
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
    }
    
    // =====================================================================
    //  Friend Requests Collection
    // =====================================================================
    match /friend_requests/{requestId} {
        // READ: You can read a request if you sent it or received it.
        allow read: if isSignedIn() && (isOwner(resource.data.fromId) || isOwner(resource.data.toId));
        // CREATE: You can only create a request coming from you.
        allow create: if isSignedIn() && isOwner(request.resource.data.fromId);
        // UPDATE: You can only accept/decline a request sent TO you.
        allow update: if isSignedIn() && isOwner(request.resource.data.toId);
        // DELETE: You can only cancel a request you sent.
        allow delete: if isSignedIn() && isOwner(resource.data.fromId);
    }

    // =====================================================================
    //  Notifications, Marketing Applications, etc.
    // =====================================================================
    match /notifications/{notificationId} {
        allow read, list: if isSignedIn() && request.query.get('where[0].value') == request.auth.uid;
        allow create: if isSignedIn();
        allow update: if isSignedIn() && isOwner(resource.data.userId);
    }
    
    match /marketing_applications/{appId} {
      // Let anyone create an application
      allow create: if true;
      // Only signed-in users (admins) can read/update them.
      allow read, update: if isSignedIn();
    }
    
    match /chats/{chatId} {
      // You can read/write to a chat if your UID is in the `players` map.
      allow read, write: if isSignedIn() && request.auth.uid in resource.data.users;
      
      match /messages/{messageId} {
         allow read, write: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
      }
    }
  }
}