rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /users/{userId} {
      allow read: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow write: if isSignedIn() && (isOwner(userId) || isAdmin());
      
      // Allow an admin to list users
      allow list: if isAdmin();
      
      // Allow a user to list other users only when querying for their own referrals
      allow list: if isSignedIn() && request.query.keys.hasOnly(['campaignInfo.referrerId', 'campaignInfo.campaignId']) && request.query.filters[0][2] == request.auth.uid;
      
      match /active_campaigns/{docId} {
        allow read, write, delete: if isOwner(userId);
      }
      
      match /bonus_claims/{claimId} {
          allow read, write, delete: if isOwner(userId);
      }
    }
    
    match /game_rooms/{roomId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (resource.data.players.hasAny([request.auth.uid]) || isAdmin());
      allow delete: if isSignedIn() && (request.auth.uid == resource.data.createdBy.uid || isAdmin());
    }
    
    match /transactions/{transactionId} {
      allow read: if isSignedIn() && (isOwner(resource.data.userId) || isAdmin());
      // A user can create a transaction for themselves. An admin can create one for anyone.
      allow create: if isSignedIn() && (isOwner(request.resource.data.userId) || isAdmin());
      allow update: if isAdmin();
    }
    
    match /marketing_applications/{appId} {
        allow create: if true; // Anyone can apply
        allow read, write: if isAdmin();
    }
    
    match /referral_campaigns/{campaignId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }
    
    match /daily_bonus_campaigns/{campaignId} {
       allow read: if isSignedIn();
       allow create, update, delete: if isAdmin();
       
       match /claims/{claimId} {
         allow read, write: if isOwner(claimId);
       }
    }
    
     match /deposit_bonus_campaigns/{campaignId} {
       allow read: if isSignedIn();
       allow create, update, delete: if isAdmin();
       
       match /claims/{claimId} {
         allow read, write: if isOwner(claimId);
       }
    }

    match /signup_bonus_campaigns/{campaignId} {
      allow read, write, delete: if isAdmin();
    }
    
    match /bonus_claims/{claimId} {
      // User can create a claim for themselves
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
      // Admin can manage any claim
      allow read, update, delete: if isAdmin();
      // A user can list their own claims
      allow list: if isSignedIn() && request.query.filters[0][2] == request.auth.uid;
    }
    
    match /notifications/{notificationId} {
      allow read, update: if isSignedIn() && isOwner(resource.data.userId);
    }
    
     match /settings/{settingId} {
        allow read, write: if isAdmin();
    }

    match /chats/{chatId} {
        allow read, update: if isSignedIn() && request.auth.uid in resource.data.userIds;
        
        match /messages/{messageId} {
            allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.userIds;
        }
    }
    
    match /friend_requests/{requestId} {
        allow read: if isSignedIn() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
        allow create: if isSignedIn() && isOwner(request.resource.data.fromId);
        allow delete: if isSignedIn() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
    }
  }
}