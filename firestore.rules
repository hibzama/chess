rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to check if the user is an admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // =================================
    // Users Collection
    // =================================
    match /users/{userId} {
      // Anyone can read a user's profile data
      allow read: if isAuthenticated();
      // Only the user themselves or an admin can write to their document
      allow write: if isOwner(userId) || isAdmin();

      // Rules for user subcollections
      match /daily_bonus_claims/{campaignId} {
        allow read, write: if isOwner(userId);
      }
      match /bonus_claims/{claimId} {
        allow read, write: if isOwner(userId);
      }
      match /active_campaigns/{campaignId} {
         allow read, write: if isOwner(userId);
      }
    }

    // =================================
    // Game Rooms Collection
    // =================================
    match /game_rooms/{roomId} {
      // Any authenticated user can see the list of public games
      allow list, get: if isAuthenticated();
      
      // A user can create a game room
      allow create: if isAuthenticated();
      
      // A user can update a game room IF:
      // 1. They are not the creator.
      // 2. They are adding themselves as player2.
      // 3. The room is currently 'waiting'.
      // This rule is crucial for the join-game transaction to succeed.
      allow update: if isAuthenticated() 
                    && request.resource.data.player2.uid == request.auth.uid
                    && resource.data.status == 'waiting'
                    && request.resource.data.status == 'in-progress';
      
      // Only a player in the game can update its state while in-progress
      allow update: if isAuthenticated()
                    && request.auth.uid in resource.data.players
                    && resource.data.status == 'in-progress';

      // The creator can delete a room only if it's still 'waiting'
      allow delete: if isAuthenticated() 
                    && resource.data.createdBy.uid == request.auth.uid
                    && resource.data.status == 'waiting';

      // Chat messages within a game room
      match /messages/{messageId} {
        allow read, create: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
      }
    }

    // =================================
    // Transactions Collection
    // =================================
    match /transactions/{transactionId} {
      allow read: if isAdmin() || isOwner(resource.data.userId);
      allow create: if isAuthenticated();
      allow update, delete: if isAdmin();
    }
    
    // =================================
    // Chat Collection
    // =================================
    match /chats/{chatId} {
      allow read, update: if isAuthenticated() && request.auth.uid in resource.data.userIds;
      match /messages/{messageId} {
        allow read, create: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.userIds;
      }
    }

    // =================================
    // Notifications Collection
    // =================================
    match /notifications/{notificationId} {
        allow read, update: if isOwner(resource.data.userId);
        allow create: if isAuthenticated();
    }
    
    // =================================
    // Bonus & Campaign Collections
    // =================================
    function canReadCampaigns() {
      return isAuthenticated() || isAdmin();
    }

    match /signup_bonus_campaigns/{campaignId} {
      allow read: if canReadCampaigns();
      allow write: if isAdmin();
      match /claims/{claimId} {
        allow read, write: if canReadCampaigns();
      }
    }

    match /daily_bonus_campaigns/{campaignId} {
      allow read: if canReadCampaigns();
      allow write: if isAdmin();
      match /claims/{claimId} {
        allow read, write: if canReadCampaigns();
      }
    }
    
    match /deposit_bonus_campaigns/{campaignId} {
        allow read: if canReadCampaigns();
        allow write: if isAdmin();
        match /claims/{claimId} {
            allow read, write: if canReadCampaigns();
        }
    }

    match /referral_campaigns/{campaignId} {
      allow read: if canReadCampaigns();
      allow write: if isAdmin();
    }

    // This rule allows an admin to read any bonus claim, and a user to read their own.
     match /bonus_claims/{claimId} {
        allow read: if isAdmin() || isOwner(resource.data.userId);
        allow write: if canReadCampaigns(); // Allows creation by user, update by admin
     }

    // =================================
    // Marketing Collections
    // =================================
    match /marketing_applications/{appId} {
        allow create: if true; // Anyone can apply
        allow read, update, delete: if isAdmin();
    }
    
    // =================================
    // Settings Collection (Admin only)
    // =================================
    match /settings/{settingId} {
      allow read, write: if isAdmin();
    }
    
    // =================================
    // Friend Requests Collection
    // =================================
    match /friend_requests/{requestId} {
        allow read: if isAuthenticated() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
        allow create: if isAuthenticated() && request.auth.uid == request.resource.data.fromId;
        allow delete: if isAuthenticated() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
    }
  }
}
