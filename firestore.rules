rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // USER DATA
    match /users/{userId} {
      // Anyone authenticated can read basic profile data
      allow read: if isUserAuthenticated();
      // Only the owner or an admin can write to their own document
      allow write: if isOwner(userId) || isAdmin();
    }
    
    match /users/{userId}/{subcollection}/{docId} {
       allow read, write: if isOwner(userId) || isAdmin();
    }

    // GAME ROOMS
    match /game_rooms/{roomId} {
       // Allow any authenticated user to read rooms (for lobbies)
       allow read: if isUserAuthenticated();
       // Allow authenticated users to create rooms
       allow create: if isUserAuthenticated();
       // Allow a user to update a room IF they are joining it (adding themselves to players array)
       // OR if they are one of the players already in the game (for game moves)
       allow update: if isUserAuthenticated() && (request.auth.uid in resource.data.players || request.auth.uid in request.resource.data.players);
       // Allow creator to delete a waiting room
       allow delete: if isUserAuthenticated() && resource.data.createdBy.uid == request.auth.uid;
    }
    
     match /game_rooms/{roomId}/{subcollection}/{docId} {
       allow read, write: if isUserAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
    }

    // TRANSACTIONS
    match /transactions/{transactionId} {
        // Admins can read/write any transaction
        // Users can create their own transactions
        // Users can read their own transactions
        allow read, write: if isAdmin();
        allow create: if isUserAuthenticated() && request.resource.data.userId == request.auth.uid;
        allow read: if isUserAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // MARKETING & ADMIN
    match /marketing_applications/{appId} {
        allow create: if true; // Anyone can apply
        allow read, write: if isAdmin();
    }
    
    // NOTIFICATIONS
    match /notifications/{notifId} {
       allow read, write: if isOwner(request.resource.data.userId) || isOwner(resource.data.userId);
       allow create: if isUserAuthenticated();
    }
    
    // CHATS
    match /chats/{chatId} {
        allow read, update: if isUserAuthenticated() && request.auth.uid in resource.data.userIds;
        allow create: if isUserAuthenticated();
    }
    
    match /chats/{chatId}/messages/{messageId} {
        allow read, create: if isUserAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.userIds;
    }

    // SETTINGS (e.g., mailer, bonus configs)
    match /settings/{settingId} {
        allow read: if isUserAuthenticated(); // Allow clients to read configs
        allow write: if isAdmin(); // Only admins can change settings
    }
    
    // BONUS CAMPAIGNS
    match /{campaignCollection}/{campaignId} {
      allow read: if isUserAuthenticated();
      allow write: if isAdmin();
    }
    
    match /{campaignCollection}/{campaignId}/claims/{claimId} {
       allow read, write: if isUserAuthenticated() || isAdmin();
    }
    
     match /bonus_claims/{claimId} {
        allow read, write: if isUserAuthenticated() || isAdmin();
     }
  }
}
