rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if !isSignedIn(); // Allow user creation during registration
      allow update: if isOwner(userId); // Allow users to update their own profile
    }

    match /friend_requests/{requestId} {
      allow read: if isSignedIn();
      allow create: if isOwner(request.resource.data.fromId);
      // Allow the recipient to delete (accept/decline) or the sender to delete (cancel)
      allow delete: if isOwner(get(/databases/$(database)/documents/friend_requests/$(requestId)).data.toId) || 
                       isOwner(get(/databases/$(database)/documents/friend_requests/$(requestId)).data.fromId);
    }

    match /game_rooms/{roomId} {
      allow read: if isSignedIn();
      allow create: if isOwner(request.resource.data.createdBy.uid);
      
      // Allow a player to join (updates status, player2, etc.)
      allow update: if isSignedIn() && request.resource.data.players[1] == request.auth.uid;

      // Allow the creator to cancel a waiting room
      allow delete: if isOwner(get(/databases/$(database)/documents/game_rooms/$(roomId)).data.createdBy.uid);
    }

    match /transactions/{transactionId} {
      // Users can only read their own transactions
      allow read: if isSignedIn() && isOwner(get(/databases/$(database)/documents/transactions/$(transactionId)).data.userId);
      // Allow creation of transactions if the user is the one the transaction is for
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
    }

    match /marketing_applications/{appId} {
        allow create: if !isSignedIn(); // Public application form
        // Admins can read/write
        allow read, write: if isSignedIn() && getUserData(request.auth.uid).role == 'admin';
    }

    match /notifications/{notificationId} {
        // Users can only read their own notifications
        allow read, update: if isSignedIn() && isOwner(get(/databases/$(database)/documents/notifications/$(notificationId)).data.userId);
        allow create: if isSignedIn();
    }
    
    // Default deny all other collections
    match /{path=**} {
      allow read, write: if false;
    }
  }
}
