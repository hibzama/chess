rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Admin panel and general settings can be read by anyone, but only written to by admins.
    match /settings/{settingId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /marketing_applications/{appId} {
      allow create: if true;
      allow read, write: if isAdmin();
    }
    
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
      allow delete: if isAdmin();
    }

    match /game_rooms/{roomId} {
        // Anyone can read a game room to see its status in the lobby.
        allow read: if true;
        // Only authenticated users can create a game room.
        allow create: if request.auth != null;
        // Only players in the game can update it.
        allow update: if request.auth != null && resource.data.players.hasAny([request.auth.uid]);
        // Only the creator can delete a waiting room.
        allow delete: if request.auth.uid == resource.data.createdBy.uid;
    }
    
    match /game_rooms/{roomId}/messages/{messageId} {
        // Only players in the game can read/write chat messages.
        allow read, write: if request.auth != null && get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players.hasAny([request.auth.uid]);
    }

    match /transactions/{transactionId} {
      allow read, write: if isAdmin() || (request.auth.uid == resource.data.userId);
      allow create: if request.auth != null;
    }

    match /friend_requests/{requestId} {
      // You can read/delete a request if you sent it or received it.
      allow read, delete: if request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId;
      // Anyone can create a friend request.
      allow create: if request.auth != null;
    }
    
    match /notifications/{notificationId} {
        allow read, update: if request.auth.uid == resource.data.userId;
        allow create: if request.auth != null;
    }
    
    match /referral_campaigns/{campaignId} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
    }
    
    match /signup_bonus_campaigns/{campaignId} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
    }
    
    match /daily_bonus_campaigns/{campaignId} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
    }
    
    match /deposit_bonus_campaigns/{campaignId} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
    }

    match /bonus_claims/{claimId} {
      allow read, create: if request.auth.uid == resource.data.userId;
      allow list: if request.auth != null && request.query.where[0][2] == request.auth.uid;
      allow update, delete: if isAdmin();
    }
    
    // This allows an admin to perform any action on any document.
    match /{document=**} {
      allow read, write: if isAdmin();
    }
  }
}

function isAdmin() {
    return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
}
