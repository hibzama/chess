rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isNewUser() {
      return !exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }
    
    function isL1CountIncrement(userId) {
      let
      isIncrement = request.resource.data.l1Count == resource.data.l1Count + 1;
      let
      unchangedFields = request.resource.data.diff(resource.data).affectedKeys().removeAll(['l1Count']);
      return isIncrement && unchangedFields.size() == 0;
    }


    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isL1CountIncrement(userId);
      allow delete: if isAdmin();
    }

    match /game_rooms/{roomId} {
      allow read: if request.auth != null;
      allow create: if isOwner(request.resource.data.createdBy.uid);
      allow update: if request.auth.uid in resource.data.players && !resource.data.payoutTransactionId;
      allow delete: if request.auth.uid == resource.data.createdBy.uid;
    }
    
    match /game_rooms/{roomId}/messages/{messageId} {
        allow read: if request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
        allow create: if request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
    }

    match /transactions/{transactionId} {
      allow read: if isAdmin() || isOwner(resource.data.userId);
      allow list: if isAdmin();
      allow create: if isAdmin() || isOwner(request.resource.data.userId);
    }
    
    match /settings/{settingId} {
        allow read, write: if isAdmin();
    }
    
    match /marketing_applications/{appId} {
        allow read, list: if isAdmin();
        allow create: if request.auth == null; // Public can apply
        allow update: if isAdmin();
    }
    
    match /bonus_claims/{claimId} {
      allow read: if isAdmin();
      allow list: if isAdmin() || request.query.where.to_list()[0].value == request.auth.uid;
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isAdmin();
    }

    match /daily_bonus_campaigns/{campaignId} {
        allow read: if request.auth != null;
        allow list, create, update, delete: if isAdmin();
    }
    
    match /daily_bonus_campaigns/{campaignId}/claims/{userId} {
        allow read, create: if isOwner(userId);
    }
    
    match /signup_bonus_campaigns/{campaignId} {
        allow read: if request.auth != null;
        allow list, create, update, delete: if isAdmin();
    }
    
    match /deposit_bonus_campaigns/{campaignId} {
        allow read: if request.auth != null;
        allow list, create, update, delete: if isAdmin();
    }
    
    match /deposit_bonus_campaigns/{campaignId}/claims/{userId} {
        allow read, create: if isOwner(userId);
    }
    
    match /referral_campaigns/{campaignId} {
        allow read: if request.auth != null;
        allow list, create, update, delete: if isAdmin();
    }

    match /users/{userId}/active_campaigns/{campaignDoc} {
        allow read, create, update, delete: if isOwner(userId);
    }

    match /notifications/{notificationId} {
        allow read, list, update: if isOwner(resource.data.userId);
    }
    
    match /chats/{chatId} {
      allow read, update: if request.auth.uid in resource.data.userIds;
    }
    
    match /chats/{chatId}/messages/{messageId} {
      allow read, create: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.userIds;
    }
    
    match /{path=**}/friends/{friendId} {
      allow read, write: if request.auth != null;
    }

    match /friend_requests/{requestId} {
      allow read, create, delete: if request.auth.uid == request.resource.data.fromId || request.auth.uid == resource.data.toId;
    }

  }
}