
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check for admin role
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if the user is enrolling in an event
    function isEnrollingInEvent(userId, eventId) {
      return exists(/databases/$(database)/documents/users/$(userId)/event_enrollments/$(eventId));
    }

    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }

    // Users collection rules
    match /users/{userId} {
      allow read: if true; 
      allow create: if request.auth.uid == userId;
      allow update: if 
          (request.auth.uid == userId &&
          // Allow self-updates except for sensitive fields
          !('balance' in request.resource.data && request.resource.data.balance != resource.data.balance) &&
          !('bonusBalance' in request.resource.data && request.resource.data.bonusBalance != resource.data.bonusBalance) &&
          !('marketingBalance' in request.resource.data && request.resource.data.marketingBalance != resource.data.marketingBalance) &&
          !('role' in request.resource.data)
          ) ||
          // OR, allow a user to update their own balance ONLY if they are also creating an event enrollment
          (request.auth.uid == userId && 
            'balance' in request.resource.data &&
            request.resource.data.keys().hasOnly(['balance', 'bonusBalance', 'marketingBalance', 'role', 'firstName', 'lastName', 'phone', 'photoURL', 'friends', 'wins', 'createdAt', 'address', 'city', 'country', 'gender', 'referredBy', 'referralChain', 'l1Count', 'ipAddress', 'emailVerified', 'equipment', 'status', 'lastSeen', 'uid', 'email', 'binancePayId']) &&
            isEnrollingInEvent(userId, get(/databases/$(database)/documents/events/$(request.resource.data.enrollingEventId)).id)
          );
                       
      allow write: if isAdmin();
    }
    
    // Friend requests
    match /friend_requests/{requestId} {
        allow read, create: if request.auth.uid != null;
        allow delete: if request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId;
    }
    
    // Notifications
    match /notifications/{notificationId} {
        allow read, update: if request.auth.uid == resource.data.userId;
        allow create: if request.auth.uid != null;
    }

    // Game Rooms
    match /game_rooms/{roomId} {
        allow read: if true;
        allow create: if request.auth.uid != null;
        allow update: if request.auth.uid != null && 
                        (request.resource.data.status == 'in-progress' || 
                         request.resource.data.status == 'completed' || 
                         request.resource.data.status == 'waiting');
        allow delete: if request.auth.uid == resource.data.createdBy.uid;
    }
    
    match /game_rooms/{roomId}/messages/{messageId} {
        allow read, write: if request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
    }
    
    // Chats
    match /chats/{chatId} {
        allow read, update: if request.auth.uid in resource.data.users;
        allow create: if request.auth.uid != null;
    }
    match /chats/{chatId}/messages/{messageId} {
        allow read, write: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
    }

    // Transactions - only backend functions should write complex transactions.
    // Users can create pending deposits/withdrawals.
    match /transactions/{transactionId} {
        allow read: if request.auth.uid == resource.data.userId || isAdmin();
        allow create: if request.auth.uid == request.resource.data.userId;
        allow update, delete: if isAdmin();
    }
    
    // Marketing applications can be read by admins and created by anyone
    match /marketing_applications/{appId} {
        allow create: if true;
        allow read, write: if isAdmin();
    }
    
    // Settings can be read by anyone, but only written by admins
    match /settings/{settingId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    // Events can be read by anyone, write by admin
    match /events/{eventId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    // Event enrollments
    match /users/{userId}/event_enrollments/{enrollmentId} {
        allow get, list: if request.auth.uid == userId || isAdmin();
        allow create: if request.auth.uid == userId;
        allow update: if isAdmin();
    }
    
    match /event_enrollments/{eventId}/users/{userId} {
        allow read, write: if request.auth.uid == userId || isAdmin();
    }

    match /users/{userId}/event_enrollments/{enrollmentId}/progress_history/{progressId} {
        allow list: if request.auth.uid == userId || isAdmin();
    }
    
    // Bonuses can be read by anyone, write by admin
    match /bonuses/{bonusId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    match /dailyBonusClaims/{bonusId} {
      allow read: if true;
      allow write: if request.auth.uid != null || isAdmin();
    }
    
     match /users/{userId}/daily_bonus_claims/{bonusId} {
        allow read, write: if request.auth.uid == userId;
    }

  }
}
