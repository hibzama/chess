
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuth() {
      return request.auth != null;
    }
    function isUser(userId) {
      return isAuth() && request.auth.uid == userId;
    }
    function isAdmin() {
      // Check for the existence of the admin field on the user's document
      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /users/{userId} {
      // ANY authenticated user can read ANY user's profile.
      // This is necessary for features like friends lists, leaderboards,
      // and for backend functions to perform transactions.
      allow read: if isAuth();

      // Users can only create their OWN user document.
      allow create: if isUser(userId);
      
      // Users can only update specific, non-critical fields on their own profile.
      // Admins have full write access.
      allow write: if isAdmin() || (isUser(userId) && request.resource.data.keys().hasOnly(['firstName', 'lastName', 'photoURL', 'equipment', 'phone', 'address', 'city', 'country', 'gender']));
      
      // Subcollections
      match /active_campaigns/{docId} {
        allow read, write: if isUser(userId) || isAdmin();
      }
    }

    match /game_rooms/{roomId} {
      allow read: if isAuth();
      allow create: if isAuth() && request.resource.data.createdBy.uid == request.auth.uid;
      allow update: if isAuth(); // Simplified for game state changes by participants
      allow delete: if isAuth() && (resource.data.createdBy.uid == request.auth.uid || isAdmin());
      
      match /messages/{messageId} {
        allow read, create: if isAuth() && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
      }
    }

    match /transactions/{transactionId} {
      allow get: if isAuth() && (resource.data.userId == request.auth.uid || isAdmin());
      allow list: if isAdmin() || (isAuth() && request.query.where.userId == request.auth.uid);
      allow create: if isAuth();
      allow update, delete: if isAdmin();
    }
    
    match /signup_bonus_campaigns/{campaignId} {
      allow read: if isAuth();
      allow write: if isAdmin();
    }
    match /deposit_bonus_campaigns/{campaignId} {
        allow read: if isAuth();
        allow write: if isAdmin();
        match /claims/{claimId} {
            allow read, create: if isUser(claimId) || isAdmin();
        }
    }
    match /referral_campaigns/{campaignId} {
      allow read: if isAuth();
      allow write: if isAdmin();
    }
    match /tasks/{taskId} {
      allow read: if isAuth();
      allow write: if isAdmin();
    }
    match /bonus_claims/{claimId} {
      allow read: if isAuth() && (resource.data.userId == request.auth.uid || isAdmin());
      allow list: if isAuth() && (request.query.where.userId == request.auth.uid || isAdmin());
      allow create: if isAuth();
      allow update: if isAdmin();
    }

    match /marketing_applications/{appId} {
      allow read: if isAdmin();
      allow create: if isAuth();
      allow update: if isAdmin();
    }

    match /notifications/{notificationId} {
      allow read, update: if isAuth() && resource.data.userId == request.auth.uid;
      allow create: if isAuth();
    }

    match /friend_requests/{requestId} {
      allow read, create: if isAuth();
      allow delete: if isAuth() && (isUser(resource.data.fromId) || isUser(resource.data.toId));
    }
    
    match /chats/{chatId} {
      allow read, update, create: if isAuth() && request.auth.uid in resource.data.userIds;
      
      match /messages/{messageId} {
        allow read, create: if isAuth() && get(/databases/$(database)/documents/chats/$(chatId)).data.userIds.hasAny([request.auth.uid]);
      }
    }

    match /settings/{settingId} {
      allow read: if isAuth();
      allow write: if isAdmin();
    }
  }
}
