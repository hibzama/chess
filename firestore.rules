rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Rules for the users collection
    match /users/{userId} {
      // Admins can read/write any user document.
      // Any authenticated user can read another user's document (needed for game functions).
      // Users can only write to their own document.
      allow read: if request.auth != null || isAdmin();
      allow write: if request.auth.uid == userId || isAdmin();
      
      // Subcollections for users
      match /active_campaigns/{campaignId} {
      	allow read, write: if request.auth.uid == userId;
      }
      match /daily_bonus_claims/{claimId} {
      	allow read, write: if request.auth.uid == userId;
      }
      match /bonus_claims/{claimId} {
         allow read, write: if request.auth.uid == userId;
      }
    }
    
    // Rules for game rooms
    match /game_rooms/{roomId} {
      allow read: if true;
      // Any authenticated user can create a room.
      // Only the creator or an admin can update/delete a waiting room.
      // The game logic itself (Cloud Functions) handles updates for 'in-progress' games.
      allow create: if request.auth != null;
      allow update, delete: if (resource.data.createdBy.uid == request.auth.uid && resource.data.status == 'waiting') || isAdmin();
      
      match /messages/{messageId} {
        allow read, write: if request.auth != null && request.auth.uid in resource.data.players;
      }
    }
    
    // --- TOP-LEVEL COLLECTIONS ---

    match /settings/{settingId} {
      allow read: if true; // Public settings
      allow write: if isAdmin(); // Only admins can change settings
    }
    
    match /marketing_applications/{appId} {
      allow read: if isAdmin();
      allow create: if true; // Anyone can apply
      allow update, delete: if isAdmin();
    }
    
    // --- BONUS & CAMPAIGN COLLECTIONS ---
    
    // Sign-up Bonus Campaigns
    match /signup_bonus_campaigns/{campaignId} {
        allow read: if true;
        allow write: if isAdmin();
        
        match /claims/{userId} {
           // Users can claim for themselves, admins can manage
           allow read, write: if request.auth.uid == userId || isAdmin();
        }
    }
    
    // Daily Bonus Campaigns
    match /daily_bonus_campaigns/{campaignId} {
        allow read: if request.auth != null;
        allow write: if isAdmin();

        match /claims/{userId} {
           allow read, write: if request.auth.uid == userId || isAdmin();
        }
    }
    
    // Deposit Bonus Campaigns
    match /deposit_bonus_campaigns/{campaignId} {
        allow read: if request.auth != null;
        allow write: if isAdmin();
        
         match /claims/{userId} {
           allow read, write: if request.auth.uid == userId || isAdmin();
        }
    }
    
    // Referral Bonus Campaigns (distinct from referral bonus settings)
    match /referral_campaigns/{campaignId} {
        allow read: if request.auth != null;
        allow write: if isAdmin();
    }

    match /transactions/{transactionId} {
      // Users can read their own transactions. Admins can read all.
      allow read: if get(/databases/$(database)/documents/transactions/$(transactionId)).data.userId == request.auth.uid || isAdmin();
      // Only admins should create/update/delete transactions directly. Client creates them via functions.
      allow write: if isAdmin();
    }
    
     // Catch-all for any other top-level collections (deny by default)
    match /{document=**} {
      allow read, write: if false;
    }
  }
}