
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions to make rules more readable
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isJoiningGame(gameRoom) {
      return gameRoom.status == 'waiting' && !isOwner(gameRoom.createdBy.uid);
    }
    
    function isPlayer(gameRoom) {
      return request.auth.uid in gameRoom.players;
    }
    
    function isAcceptingFriendRequest(currentData, newData) {
       return newData.friends == currentData.friends + [request.auth.uid];
    }

    // Default deny all reads/writes unless explicitly allowed
    match /{document=**} {
      allow read, write: if false;
    }
    
    // User collection rules
    match /users/{userId} {
      allow read: if isAuthenticated() || isAdmin();
      allow create: if !isAuthenticated(); // For registration
      allow update: if isOwner(userId) || (isAdmin() && request.resource.data.role != null) || isAcceptingFriendRequest(resource.data, request.resource.data);
      allow delete: if isAdmin();
      
      // Allow counting users for the bonus card feature
      allow list: if true;
    }
    
    // Game room collection rules
    match /game_rooms/{roomId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(request.resource.data.createdBy.uid);
      allow update: if (isPlayer(resource.data) && request.resource.data.status != 'waiting') || isJoiningGame(resource.data);
      allow delete: if isOwner(resource.data.createdBy.uid);
    }
    
    // Sub-collection for chat messages within a game room
    match /game_rooms/{roomId}/messages/{messageId} {
      allow read, create: if isPlayer(get(/databases/$(database)/documents/game_rooms/$(roomId)).data);
    }
    
    // Transaction collection rules
    match /transactions/{transactionId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isOwner(request.resource.data.userId);
    }
    
    // Friend request collection rules
    match /friend_requests/{requestId} {
      allow read: if isOwner(resource.data.fromId) || isOwner(resource.data.toId);
      allow create: if isOwner(request.resource.data.fromId);
      allow update, delete: if isOwner(resource.data.fromId) || isOwner(resource.data.toId);
    }

    // Direct chat collection rules
    match /chats/{chatId} {
      allow read, update: if request.auth.uid in resource.data.users;
      allow create: if isOwner(request.resource.data.users[request.auth.uid]);
    }
    
    match /chats/{chatId}/messages/{messageId} {
      allow read, create: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
    }
    
    // Notification collection rules
    match /notifications/{notificationId} {
      allow read, update: if isOwner(resource.data.userId);
    }

    // Marketing applications collection
    match /marketing_applications/{appId} {
        allow read: if isAdmin();
        allow create: if true; // Anyone can apply
        allow update: if isAdmin();
    }
  }
}
