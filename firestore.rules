rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check for admin role
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // User Profile Rules
    match /users/{userId} {
      allow read;
      allow create: if request.auth != null && request.auth.uid == userId;

      // Allow users to update their own document, with specific protections.
      // This is the corrected rule.
      allow update: if request.auth != null && request.auth.uid == userId &&
                       // Prevent users from changing their own role or marketing balances directly.
                       request.resource.data.role == resource.data.role &&
                       request.resource.data.marketingBalance == resource.data.marketingBalance &&
                       (
                         // Case 1: Standard profile update (cannot change balance).
                         request.resource.data.balance == resource.data.balance ||
                         // Case 2: Event enrollment (CAN change balance IF creating an enrollment doc).
                         request.resource.data.balance < resource.data.balance &&
                         existsAfter(/databases/$(database)/documents/users/$(userId)/event_enrollments/$(request.resource.data.enrollingEventId))
                       );
    }

    // Friend Request Rules
    match /friend_requests/{requestId} {
      // Users can send requests (create) and cancel their own requests (delete).
      allow create: if request.auth != null && request.resource.data.fromId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.fromId == request.auth.uid;
      // Users can see requests sent to them.
      allow get: if request.auth != null && request.auth.uid == resource.data.toId;
    }

    // Marketing Application Rules
    match /marketing_applications/{appId} {
      // Anyone can submit an application.
      allow create;
      // Only admins can read or update (approve/reject) applications.
      allow read, update: if isAdmin();
    }
    
    // Notification Rules
    match /notifications/{notificationId} {
        // Users can only update their own notifications (to mark as read).
        allow update: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Transaction Rules (Read-only for users for their own history)
    match /transactions/{transactionId} {
        allow get: if request.auth != null && resource.data.userId == request.auth.uid;
        allow list: if request.auth != null && request.auth.uid == request.query.where[0][2];
    }
    
    // Game Room Rules
    match /game_rooms/{roomId} {
        // Anyone can read game rooms (for lobbies).
        allow read;
        // Only authenticated users can create rooms.
        allow create: if request.auth != null;
        // Only players in the game can update it.
        allow update: if request.auth != null && request.auth.uid in resource.data.players;
        // Only the creator can delete a waiting room.
        allow delete: if request.auth != null && request.auth.uid == resource.data.createdBy.uid && resource.data.status == 'waiting';
    }
    
    // Game Chat Rules
    match /game_rooms/{roomId}/messages/{messageId} {
        // Players in the game can read/write chat messages.
        allow read, write: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
    }

    // General Chat Rules
    match /chats/{chatId} {
        // Users can only access chats they are a part of.
        allow read, update: if request.auth != null && request.auth.uid in resource.data.users;
    }
    match /chats/{chatId}/messages/{messageId} {
        // Users can only read/write messages in chats they are a part of.
        allow read, write: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
    }
    
    // Public/Settings Rules
    match /settings/{settingId} {
        allow read;
        allow write: if isAdmin();
    }
    
    // Event Rules
    match /events/{eventId} {
      allow read;
      allow write: if isAdmin();
    }

    // Event Enrollment Rules
    match /users/{userId}/event_enrollments/{enrollmentId} {
        // A user can create their own enrollment document.
        allow create: if request.auth != null && request.auth.uid == userId;
        // A user can read their own enrollment documents.
        allow get, list: if request.auth != null && request.auth.uid == userId;
        // Admin can read any enrollment for management purposes.
        allow get, list: if request.auth != null && isAdmin();
    }

    match /users/{userId}/event_enrollments/{enrollmentId}/progress_history/{historyId} {
      // Only backend functions should write to history.
      allow write: if false;
      // Users can read their own progress history.
      allow read: if request.auth != null && request.auth.uid == userId;
    }
    
    // Daily Bonus Claim Rules
    match /dailyBonusClaims/{bonusId} {
        // Anyone can read claim counts.
        allow read;
        // Only backend can update counts.
        allow write: if false; 
    }
    
    match /users/{userId}/daily_bonus_claims/{claimId} {
        // Users can create and read their own claims.
        allow read, create: if request.auth != null && request.auth.uid == userId;
    }

  }
}
