rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Allow public read of events, but secure enrollments
    match /events/{eventId} {
      allow read;
      allow write: if request.auth.uid != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /users/{userId} {
      allow read;
      allow create: if request.auth.uid == userId;
      // Allow a user to update their own profile, but with restrictions on sensitive fields.
      allow update: if request.auth.uid == userId
                    // Allow balance to DECREASE only.
                    && (!('balance' in request.resource.data) || request.resource.data.balance <= resource.data.balance)
                    // Disallow changing other sensitive fields directly.
                    && !('role' in request.resource.data)
                    && !('marketingBalance' in request.resource.data)
                    && !('commissionBalance' in request.resource.data)
                    && !('wins' in request.resource.data);
    }
    
    // Admins can update any user field.
    match /users/{userId} {
      allow write: if request.auth.uid != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Rules for event enrollments
    match /users/{userId}/event_enrollments/{eventId} {
       // A user can create their own enrollment document.
       allow create: if request.auth.uid == userId;
       // A user can read their own enrollments. Admins can read anyone's.
       allow get: if request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
       // Cloud functions update progress, not users. Admins can modify.
       allow update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';

       // Progress history is written by functions, readable by the user.
        match /progress_history/{historyId} {
            allow read: if request.auth.uid == userId;
            allow write: if false; // Only backend can write
        }
    }
     match /event_enrollments/{eventId}/users/{userId} {
      allow list: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /transactions/{transactionId} {
      // User can create their own transactions, but cannot approve them or set the amount maliciously.
      allow create: if request.auth.uid == request.resource.data.userId
                     && !('status' in request.resource.data && request.resource.data.status != 'pending')
                     && request.resource.data.amount > 0;
      // User can read their own transactions.
      allow read: if request.auth.uid == resource.data.userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      // Only admins can update transaction status.
      allow update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /game_rooms/{roomId} {
        allow read;
        // CREATE: Anyone logged in can create a room.
        allow create: if request.auth.uid != null && request.resource.data.createdBy.uid == request.auth.uid;
        // UPDATE: Only players in the game can make updates.
        allow update: if request.auth.uid in resource.data.players;
        // DELETE: Only the creator can delete a waiting room.
        allow delete: if resource.data.status == 'waiting' && request.auth.uid == resource.data.createdBy.uid;

        match /messages/{messageId} {
            allow read;
            allow create: if request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
        }
    }
    
    match /chats/{chatId} {
        allow read, write: if request.auth.uid in resource.data.users;
        match /messages/{messageId} {
            allow read, write: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
        }
    }

    match /friend_requests/{requestId} {
        allow read, create: if request.auth.uid == request.resource.data.fromId || request.auth.uid == request.resource.data.toId;
        allow delete: if request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId;
    }
    
    match /notifications/{notificationId} {
        allow read, update: if request.auth.uid == resource.data.userId;
    }

    match /marketing_applications/{appId} {
        allow create;
        allow read, update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    match /settings/{settingId} {
        allow read;
        allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /bonuses/{bonusId} {
        allow read;
        allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

     match /dailyBonusClaims/{bonusId} {
      allow read;
      // Allow backend/transactions to update counts
      allow write: if true; 
    }
     match /users/{userId}/daily_bonus_claims/{bonusId} {
       allow read, create: if request.auth.uid == userId;
     }

  }
}
