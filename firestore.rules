rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper Functions
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isPlayer(gameRoom) {
      return request.auth.uid in gameRoom.data.players;
    }
    
    function isPlayerInRequest(gameRoom) {
    	return request.auth.uid in gameRoom.players;
    }

    // USER-RELATED RULES
    match /users/{userId} {
      // Anyone can count users for the bonus card, but not read data
      allow list: if true; 

      // Admins can read/write any user. Users can read/update their own data.
      allow read, update: if isOwner(userId) || isAdmin();
      
      // Any authenticated user can read a user's profile (for friends list, profile pages, etc.)
      allow get: if request.auth != null;
    }

    // GAME ROOMS
    match /game_rooms/{roomId} {
      // Allow read access if the user is a player in the game or an admin.
      allow read: if isPlayer(resource) || isAdmin();
      
      // Allow creation if the user is the one creating it.
      allow create: if isOwner(request.resource.data.createdBy.uid);
      
      // Allow updates by players in the game (joining, making moves, resigning).
      allow update: if isPlayer(resource) || isAdmin();
      
      // Allow deletion only by the creator if the game is still waiting.
      allow delete: if isOwner(resource.data.createdBy.uid) && resource.data.status == 'waiting';

      // Messages within a game room
      match /messages/{messageId} {
        allow read, create: if isPlayerInRequest(get(/databases/$(database)/documents/game_rooms/$(roomId)).data);
      }
    }
    
    // TRANSACTIONS
    match /transactions/{transactionId} {
      // Allow a user to query for their own transactions. This is the key fix.
      allow list: if request.query.get("where")[0][2] == request.auth.uid;
      
      // Allow users to read their own transactions and admins to read any.
      allow get: if isOwner(resource.data.userId) || isAdmin();
      
      // Allow users to create their own transactions (deposits, withdrawals, etc.).
      allow create: if isOwner(request.resource.data.userId);
      
      // Only admins can update or delete transaction records.
      allow update, delete: if isAdmin();
    }
    
    // CHATS
    match /chats/{chatId} {
        allow read, update: if request.auth.uid in resource.data.users;
        
        match /messages/{messageId} {
            allow read, create: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
        }
    }
    
    // FRIEND REQUESTS & NOTIFICATIONS
    match /friend_requests/{requestId} {
        allow read, create, update, delete: if request.auth != null;
    }

    match /notifications/{notificationId} {
      allow read, create, update: if isOwner(get(/databases/$(database)/documents/notifications/$(notificationId)).data.userId);
    }
    
    // MARKETING APPLICATIONS
    match /marketing_applications/{appId} {
      allow create: if request.auth == null; // Allow unauthenticated users to apply
      allow read, update, delete: if isAdmin();
    }
  }
}
