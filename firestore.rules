rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }
    function isUser(userId) {
      return request.auth.uid == userId;
    }
    function getDoc(path) {
      return get(/databases/$(database)/documents/$(path));
    }
    function existsDoc(path) {
      return exists(/databases/$(database)/documents/$(path));
    }
    function getUserData(userId) {
      return getDoc('users/' + userId).data;
    }

    // ========== USERS ==========
    match /users/{userId} {
      allow read;
      allow create: isUser(userId) && request.resource.data.uid == userId;
      allow update: isUser(userId) || isAcceptingFriendRequest(userId) || isRemovingFriend(userId) || isJoiningGame(userId);
    }
    
    // ========== GAME ROOMS ==========
    match /game_rooms/{roomId} {
      allow read;
      allow create: isSignedIn() && request.resource.data.createdBy.uid == request.auth.uid;
      allow update: (
        isJoiningGame(roomId) || 
        (isUser(resource.data.createdBy.uid) || isUser(resource.data.player2.uid))
      );
      allow delete: isUser(resource.data.createdBy.uid) && resource.data.status == 'waiting';
      
      match /messages/{messageId} {
        allow read, write: isUser(getDoc('game_rooms/' + roomId).data.players[0]) || isUser(getDoc('game_rooms/' + roomId).data.players[1]);
      }
    }
    
    // ========== TRANSACTIONS ==========
    match /transactions/{transactionId} {
        allow read, write: isSignedIn(); // Simplified for now, complex transactions handled by functions
    }
    
    // ========== FRIEND REQUESTS ==========
    match /friend_requests/{requestId} {
        allow read, create: isSignedIn();
        allow delete: isUser(resource.data.fromId) || isUser(resource.data.toId);
    }
    
    // ========== MARKETING APPLICATIONS ==========
    match /marketing_applications/{appId} {
        allow read, create, update: isSignedIn();
    }
    
    // ========== NOTIFICATIONS ==========
    match /notifications/{notificationId} {
        allow read, write: isSignedIn();
    }

    // ========== CHATS ==========
    match /chats/{chatId} {
      allow get: isSignedIn() && request.auth.uid in resource.data.users;
      allow list: isSignedIn() && request.auth.uid in resource.data.users;
      allow create: isSignedIn();
      allow update: isSignedIn() && request.auth.uid in resource.data.users;

      match /messages/{messageId} {
        allow read, write: isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
      }
    }
    
    // ===================================
    //  TRANSACTIONAL SECURITY FUNCTIONS
    // ===================================

    function isAcceptingFriendRequest(userId) {
      let requestDoc = request.resource.data;
      let fromUserId = get(/databases/$(database)/documents/friend_requests/$(request.resource.id)).data.fromId;
      return request.auth.uid == userId && existsDoc('friend_requests/' + request.resource.id) && requestDoc.friends[requestDoc.friends.size() - 1] == fromUserId;
    }

    function isRemovingFriend(userId) {
       let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
       let otherUserDoc = get(/databases/$(database)/documents/users/$(userId));
       return userDoc.data.friends.size() == resource.data.friends.size() - 1 && otherUserDoc.data.friends.size() == request.resource.data.friends.size() - 1;
    }

    function isJoiningGame(contextId) {
      let room = getDoc('game_rooms/' + contextId).data;
      let joinerId = request.auth.uid;
      let creatorId = room.createdBy.uid;

      // Check room status
      if (room.status != 'waiting' || request.resource.data.status != 'in-progress') {
        return false;
      }
      
      // Check if the authenticated user is the one trying to join
      if (request.resource.data.player2.uid != joinerId) {
        return false;
      }
      
      // Check that balance changes are correct
      let creatorBalanceChange = getAfter(/databases/$(database)/documents/users/$(creatorId)).data.balance - get(/databases/$(database)/documents/users/$(creatorId)).data.balance;
      let joinerBalanceChange = getAfter(/databases/$(database)/documents/users/$(joinerId)).data.balance - get(/databases/$(database)/documents/users/$(joinerId)).data.balance;
      
      if (creatorBalanceChange != -room.wager || joinerBalanceChange != -room.wager) {
        return false;
      }
      
      return true;
    }
  }
}
