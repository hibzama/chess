
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // HELPER FUNCTIONS
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isGettingSelf(userId) {
        return isOwner(userId);
    }
    
    function isUpdatingSelf() {
        return request.auth.uid == request.resource.data.uid;
    }

    function isAcceptingFriendRequest(userId) {
      // The user accepting the request is the one whose document is being updated
      // We check that the request they are accepting is valid and from the user being added.
      // Note: This logic is complex. A simpler approach might be needed if issues persist.
      let requestDoc = get(/databases/$(database)/documents/friend_requests/$(request.resource.id));
      return requestDoc.data.toId == request.auth.uid &&
             request.resource.data.friends[request.resource.data.friends.size() - 1] == requestDoc.data.fromId;
    }

    // RULES
    match /users/{userId} {
      allow read: if true; // Public profiles are readable by anyone
      allow create: if !isSignedIn(); // Allow user creation during sign-up
      
      // Allow update on a user's doc IF:
      // 1. The user is updating their own document.
      allow update: if isOwner(userId);
      
      allow delete: if false; // Nobody can delete user documents
    }

    match /game_rooms/{roomId} {
        allow read: if true; // All rooms are readable
        allow list: if true; // Anyone can list rooms for the lobby
        
        function isCreator() {
            return request.auth.uid == resource.data.createdBy.uid;
        }

        function isPlayer() {
          return request.auth.uid in resource.data.players;
        }

        function isJoiner() {
            return request.auth.uid != resource.data.createdBy.uid 
                   && resource.data.player2 == null 
                   && resource.data.status == 'waiting';
        }

        // Allow creating a room if signed in
        allow create: if isSignedIn();

        // Allow updates if you are a player in the game OR if you are joining the game.
        allow update: if isSignedIn() && (isPlayer() || isJoiner());
        
        // Allow delete only if the user is the creator and the game is still waiting for an opponent.
        allow delete: if isSignedIn() && isCreator() && resource.data.status == 'waiting';
    }

    match /transactions/{transactionId} {
        // A user can read or list their own transactions.
        allow read, list: if isSignedIn() && isOwner(resource.data.userId);

        // A user can create a transaction for themselves (deposit, withdrawal)
        // OR a wager transaction as part of joining a game.
        allow create: if isSignedIn();
    }

    match /friend_requests/{requestId} {
        // Allow read if user is the sender or the receiver
        allow read, list: if isSignedIn() && (resource.data.fromId == request.auth.uid || resource.data.toId == request.auth.uid);
        
        // Allow create if user is the sender
        allow create: if isSignedIn() && request.resource.data.fromId == request.auth.uid;
        
        // Allow update if user is the receiver (for accepting/declining)
        allow update: if isSignedIn() && resource.data.toId == request.auth.uid;
        
        // Allow delete if user is the sender (for cancelling)
        allow delete: if isSignedIn() && resource.data.fromId == request.auth.uid;
    }
    
    match /notifications/{notificationId} {
        allow read, list: if isSignedIn() && isOwner(resource.data.userId);
        allow create: if isSignedIn();
        allow update: if isSignedIn() && isOwner(resource.data.userId);
    }
    
    match /chats/{chatId} {
        function isChatMember() {
            return request.auth.uid in resource.data.users;
        }
        
        allow read, write: if isSignedIn() && isChatMember();
        
        match /messages/{messageId} {
            allow read, write: if isSignedIn() && isChatMember();
        }
    }
    
    match /marketing_applications/{applicationId} {
        // Anyone can create an application
        allow create: if true; 
        
        // Only admins can read or write to applications
        allow read, write: if isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
     }
  }
}
