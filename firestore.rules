rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check for admin role
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Users can only read their own data, but any authenticated user can read public profiles
    match /users/{userId} {
      allow read: if request.auth != null; // Anyone can read public user profiles
      allow write: if request.auth.uid == userId; // Only user can write to their own doc
      allow list: if isAdmin(); // Only admins can list all users
      allow get: if isAdmin() || request.auth.uid == userId; // Admins can get any user
    }

    match /users/{userId} {
      // Allow counting users for the bonus card, for unauthenticated users as well
      allow get, list: if true;
    }

    // Game Rooms
    match /game_rooms/{roomId} {
      allow read: if resource.data.isPrivate == false || request.auth.uid in resource.data.players;
      allow create: if request.auth.uid != null && request.auth.uid == request.resource.data.createdBy.uid && request.auth.uid in request.resource.data.players;
      allow update: if request.auth.uid in resource.data.players;
      allow delete: if request.auth.uid == resource.data.createdBy.uid;

      // Chat within a game room
      match /messages/{messageId} {
        allow read, write: if request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
      }
    }
    
    // Transactions
    match /transactions/{transactionId} {
      allow create: if request.auth.uid != null && request.auth.uid == request.resource.data.userId;
      allow read: if isAdmin() || request.auth.uid == resource.data.userId;
      allow update, delete: if isAdmin();
    }
    
    // Marketing Applications: Anyone can apply, only admin can manage
    match /marketing_applications/{appId} {
      allow create: if request.auth.uid == null || request.auth.uid != null;
      allow read, write, delete: if isAdmin();
    }
    
    // Friend Requests
    match /friend_requests/{requestId} {
        allow read, write: if request.auth.uid != null && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
        allow create: if request.auth.uid != null && request.auth.uid == request.resource.data.fromId;
        allow delete: if request.auth.uid != null && request.auth.uid == resource.data.fromId;
    }

    // Chats
    match /chats/{chatId} {
        allow read, write: if request.auth.uid in resource.data.users;
        match /messages/{messageId} {
            allow read, write: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
        }
    }

    // Notifications: User-specific
    match /notifications/{notifId} {
        allow read, write, create: if request.auth.uid != null && request.resource.data.userId == request.auth.uid;
    }
  }
}
