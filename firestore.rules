
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions to make rules cleaner and more reusable
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isGettingUser(userId) {
      return isUser(userId);
    }

    function isListingUsers() {
      // Allow authenticated users to list users for features like leaderboards, friends, etc.
      return isSignedIn();
    }
    
    function isCreatingOwnUser(userId) {
      return isUser(userId) && 
             'firstName' in request.resource.data &&
             'lastName' in request.resource.data &&
             'email' in request.resource.data &&
             request.resource.data.email == request.auth.token.email &&
             request.resource.data.uid == request.auth.uid &&
             request.resource.data.balance == 100 || request.resource.data.balance == 0;
    }
    
    // --- Transactions --- //
    // Determines if the incoming request is a valid wager transaction.
    function isValidWager(transactionData) {
      return transactionData.type == 'wager' &&
             transactionData.status == 'completed' &&
             transactionData.userId == request.auth.uid &&
             'gameRoomId' in transactionData &&
             'description' in transactionData;
    }

    // Determines if the incoming request is a valid commission transaction.
    function isValidCommission(transactionData) {
      return transactionData.type == 'commission' &&
             transactionData.status == 'completed' &&
             'fromUserId' in transactionData &&
             'gameRoomId' in transactionData &&
             'level' in transactionData &&
             transactionData.amount > 0;
    }
    
    // --- Game Joining Logic --- //
    function isJoiningGame(requestData, existingData) {
      let isStatusUpdate = requestData.status == 'in-progress' && existingData.status == 'waiting';
      let isPlayerUpdate = requestData.players[1] == request.auth.uid && existingData.players.size() == 1;
      let hasPlayer2 = 'player2' in requestData && requestData.player2.uid == request.auth.uid;
      let keepsWager = requestData.wager == existingData.wager;

      return isStatusUpdate && isPlayerUpdate && hasPlayer2 && keepsWager;
    }

    // --- Friend Request Logic --- //
    function isAcceptingFriendRequest(requestData, existingData) {
      let friendId = request.resource.data.friends[-1];
      return requestData.friends.size() == existingData.friends.size() + 1 &&
             !isUser(friendId); 
    }
    
    // Rules for the 'users' collection
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isCreatingOwnUser(userId);
      allow update: if isUser(userId) || 
                      (isAcceptingFriendRequest(request.resource.data, resource.data)) ||
                      (request.auth.uid == get(/databases/$(database)/documents/game_rooms/$(request.resource.data.gameRoomId)).data.player2.uid);
    }
    
    // Rules for the 'game_rooms' collection
    match /game_rooms/{roomId} {
      allow read: if isSignedIn();
      allow create: if isUser(request.resource.data.createdBy.uid);
      allow update: if (isUser(request.resource.data.player2.uid) && isJoiningGame(request.resource.data, resource.data)) ||
                       (isUser(resource.data.players[0]) || isUser(resource.data.players[1]));
      allow delete: if isUser(resource.data.createdBy.uid) && resource.data.status == 'waiting';
    }

    // Rules for the 'transactions' collection
    match /transactions/{transactionId} {
      allow read: if isSignedIn();
      allow create: if isValidWager(request.resource.data) || 
                      isValidCommission(request.resource.data) ||
                      (request.resource.data.type == 'deposit' && isUser(request.resource.data.userId)) ||
                      (request.resource.data.type == 'withdrawal' && isUser(request.resource.data.userId));
    }

    // Rules for the 'friend_requests' collection
    match /friend_requests/{requestId} {
        allow read: if isSignedIn();
        allow create: if isUser(request.resource.data.fromId);
        allow delete: if isUser(resource.data.fromId) || isUser(resource.data.toId);
    }
    
    // Rules for the 'chats' collection and its 'messages' subcollection
    match /chats/{chatId} {
        allow read, update: if isSignedIn() && request.auth.uid in resource.data.users;

        match /messages/{messageId} {
            allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
        }
    }

    // Rules for other collections
    match /marketing_applications/{appId} {
      allow read: if isSignedIn();
      allow create: true; 
    }
    
    match /notifications/{notificationId} {
        allow read, update: if isUser(resource.data.userId);
        allow list: if isSignedIn();
    }
  }
}
