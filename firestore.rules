rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    // ========== USERS ==========
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if request.resource.data.uid == userId;
      
      // Allow updates only by the owner, or under specific conditions
      allow update: if isOwner(userId) || isAcceptingFriendRequest(userId) || isRemovingFriend(userId) || isJoiningGame();
      
      function isAcceptingFriendRequest(friendId) {
        let requestDoc = get(/databases/$(database)/documents/friend_requests/$(request.auth.uid)_$(friendId));
        return requestDoc.data.toId == request.auth.uid && requestDoc.data.fromId == friendId;
      }
      
      function isRemovingFriend(friendId) {
          // Check if the update is only removing the friend from the list
          let areFriends = userId in getUserData(request.auth.uid).friends && request.auth.uid in getUserData(userId).friends;
          let isRemovingArrayItem = request.resource.data.friends == getUserData(userId).friends.remove(request.auth.uid);
          return areFriends && isRemovingArrayItem;
      }

      function isJoiningGame() {
        // This is complex and primarily handled by the game_rooms and transactions rules.
        // We allow the update here if the request comes from a valid transaction.
        return isSignedIn();
      }
    }

    // ========== FRIEND REQUESTS ==========
    match /friend_requests/{requestId} {
      allow read: if isSignedIn();
      allow create: if isOwner(request.resource.data.fromId);
      allow delete: if isOwner(request.resource.data.fromId) || isOwner(request.resource.data.toId);
    }
    
    // ========== TRANSACTIONS ==========
    match /transactions/{transactionId} {
        allow read: if isSignedIn() && isOwner(request.resource.data.userId);
        allow create: if isSignedIn() && isOwner(request.resource.data.userId);
        allow update: if isOwner(request.resource.data.userId); // For admin actions
    }

    // ========== GAME ROOMS ==========
    match /game_rooms/{roomId} {
      allow read, create: if isSignedIn();
      
      // Allow updates if joining, playing, or completing a game
      allow update: if isSignedIn() && (isJoiningGame(roomId) || isPlayingGame(roomId) || isCompletingGame(roomId));
      
      // Allow creator to delete a waiting room
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/game_rooms/$(roomId)).data.createdBy.uid == request.auth.uid;
      
      function isJoiningGame(roomId) {
        let roomBefore = get(/databases/$(database)/documents/game_rooms/$(roomId)).data;
        let roomAfter = request.resource.data;
        
        // Ensure status change is correct
        let isStatusChangeValid = roomBefore.status == 'waiting' && roomAfter.status == 'in-progress';
        
        // Ensure the requester is the one joining
        let isPlayer2Joining = roomAfter.player2.uid == request.auth.uid;
        
        return isStatusChangeValid && isPlayer2Joining;
      }
      
      function isPlayingGame(roomId) {
         let room = get(/databases/$(database)/documents/game_rooms/$(roomId)).data;
         return request.auth.uid in room.players && room.status == 'in-progress';
      }
      
      function isCompletingGame(roomId) {
        let roomBefore = get(/databases/$(database)/documents/game_rooms/$(roomId)).data;
        let roomAfter = request.resource.data;

        let isStatusChangeValid = roomBefore.status == 'in-progress' && roomAfter.status == 'completed';
        let isPlayerInRoom = request.auth.uid in roomBefore.players;

        return isPlayerInRoom && isStatusChangeValid;
      }
      
       match /messages/{messageId} {
        allow read: if isSignedIn() && get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players.hasAny([request.auth.uid]);
        allow create: if isSignedIn() && get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players.hasAny([request.auth.uid]);
      }
    }
    
    // ========== CHATS ==========
    match /chats/{chatId} {
       allow read, create, update: if isSignedIn() && request.auth.uid in resource.data.users;
       
       match /messages/{messageId} {
         allow read, create: if isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.users[request.auth.uid] != null;
       }
    }
    
    // ========== NOTIFICATIONS ==========
    match /notifications/{notificationId} {
        allow read: if isSignedIn() && isOwner(resource.data.userId);
        allow create: if isSignedIn(); // Allow any signed in user to create (e.g. friend requests)
        allow update: if isSignedIn() && isOwner(resource.data.userId);
    }
    
    // ========== MARKETING APPLICATIONS ==========
    match /marketing_applications/{appId} {
        allow read, create, update: if isSignedIn();
    }
  }
}