rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =================================
    // Helper Functions
    // =================================

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Check if the user is getting their OWN document
    function isGettingSelf(userId) {
      return request.auth.uid == userId;
    }
    
    // Check if the user is an admin
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // =================================
    // Collections
    // =================================

    match /users/{userId} {
      // Admins can read any user. Users can read their own data.
      allow get: if isAdmin() || isGettingSelf(userId);
      // Users can list other users (for friends/rankings) but not see sensitive data.
      allow list: if isSignedIn();

      allow create: if isOwner(userId);

      // Only an admin can change a user's role or balance directly.
      allow update: if isAdmin() || 
        // A user can update their own profile, but not critical fields.
        (isOwner(userId) && 
          !('balance' in request.resource.data) && 
          !('marketingBalance' in request.resource.data) && 
          !('role' in request.resource.data)
        );
    }
    
    match /friend_requests/{requestId} {
      allow read, delete: if isSignedIn() && (isOwner(resource.data.fromId) || isOwner(resource.data.toId));
      allow create: if isSignedIn() && isOwner(request.resource.data.fromId);
    }

    match /game_rooms/{roomId} {
      // Any authenticated user can list public games, admins can read any game.
      allow list: if isSignedIn();
      allow get: if isSignedIn();

      allow create: if isSignedIn() && isOwner(request.resource.data.createdBy.uid);
      allow delete: if isSignedIn() && isOwner(resource.data.createdBy.uid);
      allow update: if isSignedIn(); // Complex updates handled by transactions in app logic
    }
    
    match /chats/{chatId} {
        // A user can only access chats they are a part of.
        // The chat ID is a composite of two user IDs, sorted.
        allow read, write, list: if isSignedIn() && request.auth.uid in chatId.split('_');

        match /messages/{messageId} {
            // A user can only read/write messages in a chat they are a part of.
            allow read, create: if isSignedIn() && request.auth.uid in chatId.split('_');
        }
    }
    
    match /transactions/{transactionId} {
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
      // User can see their own transactions. Admins can see all.
      allow read, list: if isSignedIn() && (isOwner(resource.data.userId) || isAdmin());
      // Only admins can approve/reject transactions.
      allow update: if isAdmin();
    }
    
    match /notifications/{notificationId} {
      allow read, list, update: if isSignedIn() && isOwner(resource.data.userId);
      allow create: if isSignedIn();
    }

    match /marketing_applications/{appId} {
      allow create; // Anyone can apply
      allow read, update, delete: if isAdmin();
    }
  }
}
