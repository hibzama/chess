rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    // USER DATA
    match /users/{userId} {
      // Allow anyone to read user profiles (for seeing opponent names, rankings, etc.)
      allow read: if true;
      
      // Allow users to update their own document.
      // Allow other users to update this user's document ONLY IF they are accepting a friend request
      // or if it's a valid game-related balance update (handled implicitly by transaction rules).
      allow update: if isAuthenticated() && (
        request.auth.uid == userId
      );

      // A user can only be created via the registration process.
      allow create: if !isAuthenticated();
    }

    // FRIEND REQUESTS
    match /friend_requests/{requestId} {
      // Allow reading if the user is the sender or receiver of the request.
      allow read: if isAuthenticated() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);

      // Allow creating a request if the sender is the authenticated user.
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.fromId;
      
      // Allow deleting (accepting/declining/cancelling) a request if the user is the sender or receiver.
      allow delete: if isAuthenticated() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
    }

    // GAME ROOMS
    match /game_rooms/{roomId} {
      // Anyone can read game rooms to see them in the lobby.
      allow read: if true;
      
      // Allow creating a room if authenticated.
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.createdBy.uid;

      // Allow updating a room if the user is one of the players.
      // This covers all in-game moves and status changes.
      allow update: if isAuthenticated() && request.auth.uid in resource.data.players;
      
      // Allow a user to delete their own waiting room.
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.createdBy.uid && resource.data.status == 'waiting';
    }

    // TRANSACTIONS (Wagers, Payouts, Commissions, etc.)
    match /transactions/{transactionId} {
      // Only the user associated with the transaction can read it.
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      
      // Allow creating any transaction as long as the user is authenticated and the transaction belongs to them.
      // The validity of the transaction (e.g., sufficient funds for a wager) is handled by the client-side transaction logic
      // which is now implicitly allowed because all individual writes in the transaction will pass.
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      
      // Transactions should not be updatable or deletable by users.
      allow update, delete: if false;
    }

    // All other collections...
    match /{path=**} {
      allow read, write: if false;
    }
  }
}
