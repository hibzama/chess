rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user is authenticated
    function isAuth() {
      return request.auth != null;
    }
    
    // Helper function to check if a user is an admin
    function isAdmin() {
      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Admins can read and write anything
    match /{path=**} {
      allow read, write: if isAdmin();
    }
    
    // User collection rules
    match /users/{userId} {
      // Anyone can count the users for the bonus card
      allow count: if true;
      // Any authenticated user can read public user profiles
      allow read: if isAuth();
      // A user can only write to their own document
      allow write: if isAuth() && request.auth.uid == userId;
    }
    
    // Game room collection rules
    match /game_rooms/{roomId} {
      // Any authenticated user can read public rooms (for lobbies)
      allow read: if isAuth();
      // Allow creation if the creator is in the players list
      allow create: if isAuth() && request.auth.uid in request.resource.data.players;
      // Allow joining (update) if the room is waiting and the user is adding themselves
      allow update: if isAuth() && resource.data.status == 'waiting' && request.resource.data.player2.uid == request.auth.uid;
      // Allow playing (update) or deleting if the user is a player in the game
      allow update, delete: if isAuth() && request.auth.uid in resource.data.players;

      // Rules for chat messages within a game room
      match /messages/{messageId} {
        // Only players in the game can read or write messages
        allow read, write: if isAuth() && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
      }
    }
    
    // Friend request collection rules
    match /friend_requests/{requestId} {
      // A user can read a request if they sent it or received it
      allow read: if isAuth() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      // A user can create a request
      allow create: if isAuth();
      // A user can update (accept/decline) or delete a request if they are the recipient or sender
      allow update, delete: if isAuth() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
    }
    
    // Transaction collection rules
    match /transactions/{transactionId} {
        // A user can only read or create their own transactions
        allow read, create: if isAuth() && request.auth.uid == request.resource.data.userId;
    }

    // Rules for chats between two users
    match /chats/{chatId} {
      // A user can read/write to a chat if they are part of it
      allow read, write: if isAuth() && request.auth.uid in resource.data.users;
      
      match /messages/{messageId} {
        // A user can read/write messages in a chat they are part of
        allow read, write: if isAuth() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
      }
    }

    // Notifications collection rules
    match /notifications/{notificationId} {
      // A user can only access their own notifications
      allow read, write, delete: if isAuth() && request.auth.uid == resource.data.userId;
    }
  }
}