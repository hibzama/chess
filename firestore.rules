rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function getRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    function isAdmin() {
      return isSignedIn() && getRole() == 'admin';
    }

    // Default deny all access unless explicitly allowed
    match /{document=**} {
      allow read, write: if false;
    }
    
    // USERS
    match /users/{userId} {
      // Allow anyone to count users for the bonus card feature
      allow list: if true;
      // Admins can read/write any user document
      allow read, write: if isAdmin();
      // A user can read their own document fully
      allow get: if isUser(userId);
      // An authenticated user can read public info on other profiles
      allow get: if isSignedIn(); 
      // A user can only create their own document
      allow create: if isUser(userId);
      // A user can only update their own document
      allow update: if isUser(userId);
    }
    
    // GAME ROOMS
    match /game_rooms/{roomId} {
      // Admins can manage all rooms
      allow read, write: if isAdmin();
      // Any authenticated user can read public rooms from the lobby
      allow list: if isSignedIn();
      // Players in the game can read the room data
      allow get: if isSignedIn() && resource.data.players.hasAny([request.auth.uid]);
      
      // Creating a room
      allow create: if isSignedIn()
                    && request.resource.data.createdBy.uid == request.auth.uid
                    && request.auth.uid in request.resource.data.players;

      // Updating a room (joining, making a move, etc.)
      allow update: if isSignedIn()
                     // A player can join a waiting room
                     && (resource.data.status == 'waiting' && request.resource.data.status == 'in-progress' && request.auth.uid in request.resource.data.players)
                     // A player in the game can make updates (moves)
                     || (resource.data.status == 'in-progress' && request.auth.uid in resource.data.players);
                     
      // A player can delete a room they created if it's still waiting
      allow delete: if isSignedIn()
                    && resource.data.createdBy.uid == request.auth.uid
                    && resource.data.status == 'waiting';
      
      // Game Chat
      match /messages/{messageId} {
        // Admins can read/write all chat
        allow read, write: if isAdmin();
        // Players in the game can read/write chat
        allow read, write: if isSignedIn() && get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players.hasAny([request.auth.uid]);
      }
    }

    // TRANSACTIONS
    match /transactions/{transactionId} {
        // Admins can manage all transactions
        allow read, write: if isAdmin();
        // Users can read their own transactions
        allow list, get: if isSignedIn() && get(/databases/$(database)/documents/transactions/$(transactionId)).data.userId == request.auth.uid;
        // Users can create their own transactions (deposit/withdrawal requests)
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }

    // FRIEND REQUESTS
    match /friend_requests/{requestId} {
        // Admins can manage all requests
        allow read, write: if isAdmin();
        // Involved users can read/write their requests
        allow read, write: if isSignedIn() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
        // A user can create a request
        allow create: if isSignedIn() && request.resource.data.fromId == request.auth.uid;
    }

    // NOTIFICATIONS
    match /notifications/{notificationId} {
        // Admins can manage all notifications
        allow read, write: if isAdmin();
        // Users can read their own notifications
        allow list, get: if isSignedIn() && get(/databases/$(database)/documents/notifications/$(notificationId)).data.userId == request.auth.uid;
        // A user can create a notification for another user (e.g. friend request)
        allow create: if isSignedIn();
        // A user can update (e.g. mark as read) their own notifications
        allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
    }
    
    // MARKETING APPLICATIONS
    match /marketing_applications/{appId} {
      // Admins can manage all applications
      allow read, write: if isAdmin();
      // Anyone can create an application
      allow create: if true;
    }

    // CHATS (for direct messages)
    match /chats/{chatId} {
      // Admins can manage all chats
      allow read, write: if isAdmin();
      // Players in the chat can read/write
      allow read, write: if isSignedIn() && request.auth.uid in resource.data.users;
      
      // Messages within a chat
      match /messages/{messageId} {
         // Admins can manage all messages
        allow read, write: if isAdmin();
         // Players in the chat can read/write messages
        allow read, write: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
      }
    }
  }
}
