rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions to make rules more readable
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isPlayer(game) {
      return request.auth.uid in game.data.players;
    }

    // Default deny all access
    match /{document=**} {
      allow read, write: if false;
    }

    // Admins can read/write anything
    match /{document=**} {
        allow read, write: if isAdmin();
    }
    
    // USERS collection
    match /users/{userId} {
      // Anyone can count the number of users (for the bonus)
      allow list: if true; 

      // Any authenticated user can read public user data
      allow get: if isAuthenticated();

      // Users can only update their own profile
      allow update: if isOwner(userId);
      
      // Allow creating a user document
      allow create: if true; 
    }
    
    // GAME ROOMS collection
    match /game_rooms/{roomId} {
        // Anyone authenticated can view public rooms in the lobby
        allow list: if isAuthenticated();
        // Players can read the game room they are in. Anyone can read a waiting room.
        allow get: if isPlayer(resource) || resource.data.status == 'waiting';
        
        // Anyone can create a new game room
        allow create: if isAuthenticated();
        
        // Joining a game: any authenticated user can update a "waiting" room.
        // Playing a game: only a player in the game can update an "in-progress" room.
        allow update: if (resource.data.status == 'waiting' && isAuthenticated()) || (resource.data.status == 'in-progress' && isPlayer(resource));
        
        // Only the creator can delete their own "waiting" room.
        allow delete: if resource.data.createdBy.uid == request.auth.uid && resource.data.status == 'waiting';
    }
    
    // TRANSACTIONS collection
    match /transactions/{transactionId} {
        // A user can read their own transactions
        allow get, list: if isOwner(get(/databases/$(database)/documents/transactions/$(transactionId)).data.userId);
        
        // A user can create their own transactions (deposits, withdrawals, etc.)
        allow create: if isOwner(request.resource.data.userId);
    }
    
    // CHATS, FRIEND REQUESTS, NOTIFICATIONS
    match /chats/{chatId} {
        // Only players involved in the chat can read/write
        allow read, write, create: if request.auth.uid in resource.data.users;
    }
    match /chats/{chatId}/messages/{messageId} {
        // Only players involved in the chat can read/write messages
        allow read, write, create: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
    }
    
    match /friend_requests/{requestId} {
        // You can read requests sent to you or by you.
        allow get, list: if request.auth.uid == resource.data.toId || request.auth.uid == resource.data.fromId;
        // You can create a request
        allow create: if isOwner(request.resource.data.fromId);
        // You can update (accept/decline) a request sent to you, or delete one you sent.
        allow update, delete: if isOwner(resource.data.toId) || isOwner(resource.data.fromId);
    }
    
    match /notifications/{notificationId} {
        // Users can only read/update their own notifications
        allow get, list, update: if isOwner(get(/databases/$(database)/documents/notifications/$(notificationId)).data.userId);
        // A user can create their own notifications
        allow create: if isOwner(request.resource.data.userId);
    }

    match /marketing_applications/{appId} {
        allow create: if true; // Anyone can apply
        allow read, write: if isAdmin(); // Only admins can see/process applications
    }
  }
}
