rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the request is from the user themselves
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create;
      allow update, delete: if isOwner(userId);
    }

    match /game_rooms/{roomId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      // A user can update a room if they are one of the players in that room.
      // This allows the joiner to update the room status, and both players to update during the game.
      allow update: if isAuthenticated() && request.auth.uid in resource.data.players;
      allow delete: if isAuthenticated() && request.resource.data.createdBy.uid == request.auth.uid;
    }

    match /game_rooms/{roomId}/messages/{messageId} {
      allow read, create: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
    }

    match /transactions/{transactionId} {
      allow read, create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
    }

    match /notifications/{notificationId} {
      allow read, create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isOwner(get(/databases/$(database)/documents/notifications/$(notificationId)).data.userId);
    }

    match /friend_requests/{requestId} {
        allow read, create, delete: if isAuthenticated() && (request.resource.data.fromId == request.auth.uid || request.resource.data.toId == request.auth.uid);
    }

    match /chats/{chatId} {
      allow read, update, create: if isAuthenticated() && request.auth.uid in resource.data.userIds;
    }

    match /chats/{chatId}/messages/{messageId} {
       allow read, create: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.userIds;
    }

    match /settings/{docId} {
        allow read: if isAuthenticated();
        // Admin-only write access should be handled via Cloud Functions with admin SDK
        allow write: if false; 
    }

     match /bonuses/{bonusId} {
        allow read: if isAuthenticated();
        allow write: if false; // Admin only
    }

    match /dailyBonusClaims/{claimId} {
        allow read, create, update: if isOwner(claimId); // Simple rule for now
        allow write: if false; // Admin only from backend
    }
    
    match /referral_tasks/{taskId} {
        allow read: if isAuthenticated();
        allow write: if false; // Admin only
    }

    match /bonus_claims/{claimId} {
        allow create: if isAuthenticated();
        allow read: if isOwner(get(/databases/$(database)/documents/bonus_claims/$(claimId)).data.referrerId) || isOwner(get(/databases/$(database)/documents/bonus_claims/$(claimId)).data.newUserId);
        allow write: if false; // Admin only
    }
    
    match /marketing_applications/{appId} {
        allow create;
        allow read, write: if false; // Admin only
    }
  }
}
