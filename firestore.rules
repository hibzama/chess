
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to keep rules DRY
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function getRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    function isAdmin(userId) {
      return isSignedIn() && getRole(userId) == 'admin';
    }
    
    function isMarketer(userId) {
        return isSignedIn() && getRole(userId) == 'marketer';
    }

    // Admins can do anything
    match /{path=**} {
        allow read, write: if isAdmin(request.auth.uid);
    }

    match /users/{userId} {
      // Anyone can count users (for bonus card)
      allow list: if true;
      // Anyone can read public user data (for profiles, rankings)
      // but only the user or an admin can read everything.
      allow get: if isSignedIn();
      // Only the user can update their own profile
      allow create: if isUser(userId);
      allow update: if isUser(userId);
      allow delete: if isAdmin(request.auth.uid); // Only admins can delete users
    }
    
    match /marketing_applications/{appId} {
        allow read: if isAdmin(request.auth.uid);
        allow create: if true; // Anyone can apply
        allow update: if isAdmin(request.auth.uid);
    }

    match /friend_requests/{reqId} {
        // Allow reading if you are the sender or receiver
        allow read: if isSignedIn() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
        // Allow creating if you are the sender
        allow create: if isSignedIn() && request.auth.uid == request.resource.data.fromId;
        // Allow updating (accept/decline) if you are the receiver
        allow update, delete: if isSignedIn() && request.auth.uid == resource.data.toId;
    }

    match /transactions/{txId} {
      // User can only access their own transactions
      allow read, create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      // Admins can update status (approve/reject)
      allow update: if isAdmin(request.auth.uid);
    }
    
    match /game_rooms/{roomId} {
        allow get: if true; // Anyone can get a room to check its status
        allow list: if true; // Allow listing for the lobby
        
        // Only an authenticated user can create a room, and they must be the creator
        allow create: if isSignedIn() && request.auth.uid == request.resource.data.createdBy.uid;
        
        // Update is allowed if:
        // 1. You are joining a waiting room (and not the creator)
        // 2. You are one of the players in an in-progress game
        allow update: if isSignedIn() && (
            (resource.data.status == 'waiting' && request.auth.uid != resource.data.createdBy.uid) ||
            (resource.data.status == 'in-progress' && request.auth.uid in resource.data.players)
        );
        
        // Only the creator can delete a waiting room
        allow delete: if isSignedIn() && request.auth.uid == resource.data.createdBy.uid && resource.data.status == 'waiting';

        match /messages/{messageId} {
            // Only players in the game can read/write messages
            allow read, write: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
        }
    }
    
     match /chats/{chatId} {
        // Only participants can read/write to a chat
        allow read, update, delete: if isSignedIn() && request.auth.uid in resource.data.users;
        allow create: if isSignedIn() && request.auth.uid in request.resource.data.users;

        match /messages/{messageId} {
             allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
        }
    }
    
    match /notifications/{notifId} {
        // Only the user the notification is for can interact with it
        allow read, update: if isUser(get(/databases/$(database)/documents/notifications/$(notifId)).data.userId);
        // Only the system (or admin) should create notifications. 
        // We'll allow any signed-in user to create for now, assuming server-side logic handles validity.
        allow create: if isSignedIn();
    }

  }
}
