rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuth() {
      return request.auth != null;
    }
    function isUser(userId) {
      return isAuth() && request.auth.uid == userId;
    }
    function isAdmin() {
      // Check if the user document exists and has the admin role.
      // Use exists() for safe checking.
      return isAuth() && exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // USER rules
    match /users/{userId} {
      allow read: if isAuth();
      // Allow users to create their own document, and admins to create any
      allow create: if isUser(userId) || isAdmin();
      // Allow users to update their own non-critical fields.
      allow update: if (isUser(userId) && request.resource.data.keys().hasOnly(['firstName', 'lastName', 'photoURL', 'equipment', 'binancePayId', 'gender', 'address', 'city', 'country'])) || isAdmin();
      
      // Allow specific fields to be updated by backend logic (or admins) only.
      // This is crucial for security. l1Count, balance etc. should not be client-writable.
      // The isAdmin() check allows a trusted backend (like a Cloud Function running with admin privileges) to update these.
      allow update: if isAdmin() && request.resource.data.keys().hasAny(['balance', 'wins', 'l1Count', 'bonusReferralCount', 'referralChain', 'referredBy', 'campaignInfo', 'emailVerified', 'marketingBalance']);
      
      // Subcollections under users
      match /active_campaigns/{docId} {
        allow read, write: if isUser(userId) || isAdmin();
      }
      match /bonus_claims/{docId} {
        allow read, write: if isUser(userId) || isAdmin();
      }
      match /daily_bonus_claims/{docId} {
        allow read, write: if isUser(userId) || isAdmin();
      }
    }
    
    // GAME_ROOMS rules
    match /game_rooms/{roomId} {
      allow read: if isAuth();
      allow create: if isAuth() && request.resource.data.createdBy.uid == request.auth.uid;
      allow update: if isAuth(); // Broad permission for game state changes by participants
      allow delete: if isAuth() && (resource.data.createdBy.uid == request.auth.uid || isAdmin());
      
      match /messages/{messageId} {
        allow read, create: if isAuth() && request.auth.uid in resource.data.players;
      }
    }

    // TRANSACTIONS rules
    match /transactions/{transactionId} {
      allow read: if isAuth() && (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAuth();
      allow update, delete: if isAdmin();
    }
    
    // BONUS & CAMPAIGN rules (Root Level)
    match /signup_bonus_campaigns/{campaignId} {
      allow read: if isAuth();
      allow write: if isAdmin();
      match /claims/{claimId} {
        allow read: if isAuth();
        allow create: if isUser(claimId) || isAdmin();
      }
    }

    match /daily_bonus_campaigns/{campaignId} {
      allow read: if isAuth();
      allow write: if isAdmin();
       match /claims/{claimId} {
        allow create: if isUser(claimId) || isAdmin();
        allow read: if isAuth();
      }
    }

    match /deposit_bonus_campaigns/{campaignId} {
      allow read: if isAuth();
      allow write: if isAdmin();
       match /claims/{claimId} {
        allow create: if isUser(claimId) || isAdmin();
        allow read: if isAuth();
      }
    }

    match /referral_campaigns/{campaignId} {
        allow read: if isAuth();
        allow write: if isAdmin();
    }
    
    // Root level bonus_claims collection
    match /bonus_claims/{claimId} {
        allow read: if isAuth() && (resource.data.userId == request.auth.uid || isAdmin());
        allow create: if isAuth();
        allow update: if isAdmin();
    }

    // MARKETING rules
    match /marketing_applications/{appId} {
      allow read: if isAdmin();
      // Allow anyone to create an application, even unauthenticated users
      allow create: if true;
      allow update: if isAdmin();
    }
    
    // NOTIFICATIONS rules
    match /notifications/{notificationId} {
      allow read, update: if isAuth() && resource.data.userId == request.auth.uid;
      allow create: if isAuth();
    }

    // FRIEND REQUESTS rules
    match /friend_requests/{requestId} {
      allow read, create: if isAuth();
      allow delete: if isAuth() && (isUser(resource.data.fromId) || isUser(resource.data.toId));
    }
    
    // CHATS rules
    match /chats/{chatId} {
      allow read, update, create: if isAuth() && request.auth.uid in resource.data.userIds;
      match /messages/{messageId} {
        allow read, create: if isAuth() && get(/databases/$(database)/documents/chats/$(chatId)).data.userIds.hasAny([request.auth.uid]);
      }
    }

    // SETTINGS rules
    match /settings/{settingId} {
        allow read: if isAuth();
        allow write: if isAdmin();
    }

    // COLLECTION GROUP rules for admin queries
    match /{path=**}/bonus_claims/{claimId} {
      allow read: if isAdmin();
    }
  }
}
