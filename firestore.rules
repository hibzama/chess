
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    match /users/{userId} {
      allow read;
      allow create: if request.auth != null;
      allow update: if request.auth.uid == userId &&
                       (request.resource.data.diff(resource.data).affectedKeys()
                          .hasOnly(['firstName', 'lastName', 'phone', 'address', 'city', 'country', 'gender', 'photoURL', 'binancePayId', 'friends', 'equipment', 'emailVerified', 'status', 'lastSeen', 'wins']) ||
                        // Allow balance update only if an event enrollment is being created for this user in the same transaction.
                        (request.resource.data.balance < resource.data.balance &&
                         existsAfter(/databases/$(database)/documents/users/$(userId)/event_enrollments/$(request.resource.data.enrollingEventId)))
                       );
    }
    
    match /users/{userId}/{subcollection}/{docId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    match /users/{userId}/event_enrollments/{eventId} {
      allow get, list: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
    }
    
    match /event_enrollments/{eventId}/users/{userId} {
       allow read, list: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }

    match /game_rooms/{roomId} {
      allow read;
      allow create, update: if request.auth != null && request.auth.uid in resource.data.players;
      allow delete: if request.auth != null && request.auth.uid == resource.data.createdBy.uid;
      
      match /messages/{messageId} {
        allow read, create: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
      }
    }

    match /friend_requests/{requestId} {
        allow read, create: if request.auth != null;
        allow delete: if request.auth != null && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
    }
    
    match /notifications/{notificationId} {
        allow read, list: if request.auth != null && request.auth.uid == resource.data.userId;
        allow create: if request.auth != null;
        allow update: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    match /transactions/{transactionId} {
      allow read, list: if request.auth != null && (request.auth.uid == resource.data.userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow create: if request.auth != null && request.auth.uid == resource.data.userId;
      // Admin-only updates are handled by backend functions
    }
    
    match /marketing_applications/{appId} {
        allow create;
        // Read and update handled by admin
    }

    match /settings/{settingId} {
        allow read: if request.auth != null;
    }
    
    match /events/{eventId} {
        allow read;
    }
    
    match /bonuses/{bonusId} {
        allow read;
    }
    
    match /dailyBonusClaims/{bonusId} {
        allow read;
        allow create, update: if request.auth != null;
    }

    // Admin-specific rules
    match /{path=**}/documents {
      // This is a broad rule, refine if needed.
      // Allows admins to read/write anywhere.
      allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}
