rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function getRoom(roomId) {
        return get(/databases/$(database)/documents/game_rooms/$(roomId)).data;
    }
    
    function getChat(chatId) {
       return get(/databases/$(database)/documents/chats/$(chatId)).data;
    }

    // ========= USER Functions =========
    function isAcceptingFriendRequest(request, resource) {
      // This is a transaction where a user accepts a friend request.
      // 1. The user is adding a friend to their own 'friends' array.
      // 2. The other user is also adding this user to their 'friends' array.
      let isAddingToSelf = request.resource.data.friends == resource.data.friends.concat([request.write.get(0).path[3]]);
      let isAddingToFriend = request.write[0].data.friends == getUserData(request.write.get(0).path[3]).friends.concat([request.auth.uid]);
      
      return isAddingToSelf && isAddingToFriend;
    }

    function isRemovingFriend(request, resource) {
        // This is a transaction where a user removes a friend.
        // 1. The user is removing a friend from their own 'friends' array.
        // 2. The other user is also removing this user from their 'friends' array.
        let isRemovingFromSelf = resource.data.friends.hasAny(request.resource.data.friends) && request.resource.data.friends.size() == resource.data.friends.size() - 1;
        let isRemovingFromFriend = getUserData(request.write.get(0).path[3]).friends.hasAny(request.write[0].data.friends) && request.write[0].data.friends.size() == getUserData(request.write.get(0).path[3]).friends.size() - 1;

        return isRemovingFromSelf && isRemovingFromFriend;
    }


    // ========= COLLECTIONS =========

    match /users/{userId} {
      allow read, create: if isSignedIn();
      allow update: if isOwner(userId) || 
                       isAcceptingFriendRequest(request, resource) ||
                       isRemovingFriend(request, resource);
    }
    
    match /marketing_applications/{appId} {
        allow read, create: if true;
        allow update: if getUserData(request.auth.uid).role == 'admin';
    }

    match /friend_requests/{requestId} {
        allow read, create: if isSignedIn();
        allow delete: if isSignedIn() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
    }

    match /game_rooms/{roomId} {
      allow read, create, delete: if isSignedIn();
      // Allow update only if the user is a player in the game.
      allow update: if isSignedIn() && request.auth.uid in resource.data.players;
    }
    
    match /transactions/{transactionId} {
        allow read, create: if isSignedIn();
        allow update: if getUserData(request.auth.uid).role == 'admin';
    }
    
    match /notifications/{notificationId} {
        allow read, create, update: if isOwner(resource.data.userId);
    }
    
    match /chats/{chatId} {
      // Allow list/read access to chats where the user is a participant.
      allow read: if isSignedIn() && request.auth.uid in resource.data.users;
      // Allow creation of chats if the user is one of the participants.
      allow create: if isSignedIn() && request.auth.uid in request.resource.data.users;
      // Allow updates (like last message) if user is a participant.
      allow update: if isSignedIn() && request.auth.uid in resource.data.users;

      match /messages/{messageId} {
        // Only allow participants of the chat to read/write messages.
        allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
      }
    }
  }
}
