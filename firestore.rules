rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isUserAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    // marketing_applications: Anyone can create, only admin can manage.
    match /marketing_applications/{applicationId} {
      allow read: if request.auth.token.role == 'admin';
      allow create: if true;
      allow update, delete: if request.auth.token.role == 'admin';
    }

    // users: Manage user data and roles
    match /users/{userId} {
      allow get: if isUserAuthenticated();
      allow list: if isUserAuthenticated();
      
      // A user can create their own document
      allow create: if isOwner(userId);
      
      // A user can update their own non-critical data.
      // Balance and role changes are handled by transactions or admin actions.
      allow update: if isOwner(userId) && !(request.resource.data.keys().hasAny(['balance', 'commissionBalance', 'marketingBalance', 'role', 'wins']));
    }

    // friend_requests: Manage friend requests
    match /friend_requests/{requestId} {
      // Allow read/delete only by sender or receiver
      allow read, delete: if isUserAuthenticated() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      // Anyone can create a friend request (send)
      allow create: if isUserAuthenticated() && request.resource.data.fromId == request.auth.uid;
      // No direct updates allowed, handled by transactions via client logic
      allow update: if false; 
    }

    // game_rooms: Manage game rooms
    match /game_rooms/{roomId} {
      allow get: if isUserAuthenticated();
      allow list: if isUserAuthenticated();
      
      // Allow creation if the user is authenticated
      allow create: if isUserAuthenticated() && request.resource.data.createdBy.uid == request.auth.uid;
      
      // Allow players in the game to update it.
      // More specific logic is handled client-side (e.g., only current player can move).
      allow update: if isUserAuthenticated() && request.auth.uid in resource.data.players;

      // Allow the creator to delete a waiting room
      allow delete: if isUserAuthenticated() && resource.data.status == 'waiting' && request.auth.uid == resource.data.createdBy.uid;

      // Chat messages within a game
      match /messages/{messageId} {
        allow read, create: if isUserAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
      }
    }
    
    // chats: Manage private chat messages between users
    match /chats/{chatId} {
      // Allow read/write if the user is part of the chat
      allow read, update, create: if isUserAuthenticated() && request.auth.uid in resource.data.users;
      
      match /messages/{messageId} {
        allow read, create: if isUserAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
      }
    }

    // notifications: Users can only see their own notifications
    match /notifications/{notificationId} {
      allow read, update: if isOwner(resource.data.userId);
      allow create: if isUserAuthenticated(); // Allow creation for friend requests etc.
    }
    
    // transactions: Users can see their own, and creation is handled by client logic with security rules.
    match /transactions/{transactionId} {
      allow read, list: if isOwner(resource.data.userId);
      // Creation is allowed if it's a valid type and meets conditions.
      allow create: if isUserAuthenticated();
      // Admin can update status (e.g. approve/reject deposits/withdrawals)
      allow update: if request.auth.token.role == 'admin';
    }
  }
}
