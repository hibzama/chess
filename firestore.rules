rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =================================
    // Helper Functions
    // =================================
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function getDoc(path) {
      return get(/databases/$(database)/documents/$(path));
    }

    function incomingData() {
      return request.resource.data;
    }
    
    function existingData() {
      return resource.data;
    }
    
    function isAdmin() {
      return isSignedIn() && getDoc("users/" + request.auth.uid).data.role == 'admin';
    }

    // =================================
    // Collections
    // =================================

    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isOwner(userId);

      // Users can update their own non-critical data.
      // Admins can update anything.
      // Specific fields like 'balance' are protected from direct user modification.
      allow update: if (isOwner(userId) && 
                       !('balance' in incomingData()) && 
                       !('marketingBalance' in incomingData()) &&
                       !('bonusBalance' in incomingData()) &&
                       !('role' in incomingData())) || isAdmin();
    }
    
    match /friend_requests/{requestId} {
      allow read: if isSignedIn() && (isOwner(existingData().fromId) || isOwner(existingData().toId));
      allow create: if isSignedIn() && isOwner(incomingData().fromId);
      allow delete: if isSignedIn() && (isOwner(existingData().fromId) || isOwner(existingData().toId));
    }

    match /game_rooms/{roomId} {
      allow read, list: if isSignedIn();
      allow create: if isSignedIn() && isOwner(incomingData().createdBy.uid);
      allow delete: if isSignedIn() && isOwner(existingData().createdBy.uid);
      
      // Allow updates for different game states
      allow update: if isSignedIn() && (
        // Case 1: A second player is joining a waiting room.
        (
          existingData().status == 'waiting' &&
          incomingData().status == 'in-progress' &&
          incomingData().player2.uid == request.auth.uid && // The updater is player2
          request.auth.uid != existingData().createdBy.uid && // Can't join own game
          // The transaction needs to read both player docs.
          getDoc("users/" + existingData().createdBy.uid) != null && 
          getDoc("users/" + request.auth.uid) != null
        ) ||
        // Case 2: A move is made in an in-progress game by a valid player.
        (
          existingData().status == 'in-progress' &&
          incomingData().status == 'in-progress' &&
          (isOwner(existingData().createdBy.uid) || isOwner(existingData().player2.uid))
        ) ||
        // Case 3: An admin is updating the room.
        isAdmin()
      );
    }
    
    match /transactions/{transactionId} {
      allow read, list: if (isSignedIn() && isOwner(existingData().userId)) || isAdmin();
      allow create: if isSignedIn();
      allow update: if isAdmin();
    }
    
    match /notifications/{notificationId} {
      allow read, list, update: if isSignedIn() && isOwner(existingData().userId);
      allow create: if isSignedIn();
    }
    
    match /marketing_applications/{appId} {
      allow create; 
      allow read, update, delete: if isAdmin();
    }
    
    match /game_rooms/{roomId}/messages/{messageId} {
      allow read, create: if isSignedIn() && request.auth.uid in getDoc("game_rooms/" + roomId).data.players;
    }

    match /chats/{chatId} {
      allow read, write: if isSignedIn() && request.auth.uid in chatId.split('_');
      match /messages/{messageId} {
        allow read, create: if isSignedIn() && request.auth.uid in chatId.split('_');
      }
    }
    
    match /settings/{docId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    match /bonuses/{bonusId} {
      allow read, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }
    
    match /dailyBonusClaims/{claimId} {
      allow read, create, update: if isSignedIn();
    }
    
    match /users/{userId}/daily_bonus_claims/{claimId} {
      allow read, write: if isOwner(userId);
    }
    
    match /events/{eventId} {
        allow read, list: if isSignedIn();
        allow create, update, delete: if isAdmin();
    }

    match /users/{userId}/event_enrollments/{enrollmentId} {
        allow read, write: if isOwner(userId);
    }

    match /event_enrollments/{eventId}/users/{userId} {
        // Allow a user to create/update their own enrollment record in the master list.
        allow read, write: if isOwner(userId);
    }
  }
}
