rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // USER-SPECIFIC RULES
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId) || isAdmin();
      
      // Allow specific subcollections to be written to by their owner
      match /daily_bonus_claims/{claimId} {
         allow read, write: if isOwner(userId);
      }
      match /bonus_claims/{claimId} {
         allow read, write: if isOwner(userId);
      }
      match /active_campaigns/{campaignId} {
         allow read, write: if isOwner(userId);
      }
    }

    // GAME ROOMS
    match /game_rooms/{roomId} {
      allow read: if isAuthenticated();
      // Allow creation by any authenticated user
      allow create: if isAuthenticated();
      // Allow update only if user is joining the game, or if owner cancels a waiting game.
      allow update: if isAuthenticated() && (
                      // Joining a game
                      request.resource.data.status == 'in-progress' && resource.data.status == 'waiting' && request.auth.uid in request.resource.data.players && !(request.auth.uid in resource.data.players)
                      ||
                      // Resigning
                      request.resource.data.status == 'completed' && resource.data.status == 'in-progress' && request.auth.uid in resource.data.players
                    );
      // Allow deletion only by the user who created it, and only if it's still waiting for an opponent.
      allow delete: if isAuthenticated() && resource.data.createdBy.uid == request.auth.uid && resource.data.status == 'waiting';

      // Messages within a game room
      match /messages/{messageId} {
        allow read, write: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
      }
    }
    
    // CHATS
    match /chats/{chatId} {
      allow read, update: if isAuthenticated() && request.auth.uid in resource.data.userIds;
      match /messages/{messageId} {
        allow read, write: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.userIds;
      }
    }

    // TRANSACTIONS
    match /transactions/{transactionId} {
        // Allow users to create their own transactions (deposits, withdrawals, etc.)
        allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
        // Admins can read all transactions
        allow read, write, delete: if isAdmin();
    }
    
    // BONUS CAMPAIGNS (Signup, Daily, Deposit, Referral)
    match /signup_bonus_campaigns/{campaignId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
        match /claims/{claimId} {
            allow read, write: if isAuthenticated();
        }
    }
     match /daily_bonus_campaigns/{campaignId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
        match /claims/{claimId} {
            allow read, write: if isAuthenticated();
        }
    }
     match /deposit_bonus_campaigns/{campaignId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
        match /claims/{claimId} {
            allow read, write: if isAuthenticated();
        }
    }
    match /referral_campaigns/{campaignId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
    }
    match /bonus_claims/{claimId} {
      allow create: if isAuthenticated();
      allow read, write: if isAdmin();
    }


    // MARKETING-RELATED
    match /marketing_applications/{appId} {
        allow create; // Anyone can apply
        allow read, write, delete: if isAdmin();
    }

    // NOTIFICATIONS
    match /notifications/{notificationId} {
        allow read, write: if isAuthenticated() && isOwner(resource.data.userId);
        allow create: if isAuthenticated(); // Allow any authenticated user/server process to create notifications
    }
    
    // PUBLIC SETTINGS
    match /settings/{settingId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
  }
}