rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
    function isAuth() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    match /users/{userId} {
      allow read: if isAuth();
      allow create; // Allow user creation during signup
      allow update: if isOwner(userId); // Users can update their own data
    }
    
    match /settings/{docId} {
        allow read: if isAdmin();
        allow write: if isAdmin();
    }
    
    match /marketing_applications/{appId} {
        allow create; // Anyone can apply
        allow read, update: if isAdmin(); // Only admins manage applications
    }
    
    match /transactions/{txId} {
        allow read: if isAuth(); // Users can read their own, admins can read all (implicit for now)
        allow create: if isAuth(); // Users can create deposit/withdrawal requests
        allow update: if isAdmin(); // Only admins can approve/reject transactions
    }
    
    // --- EVENT RULES ---
    
    match /events/{eventId} {
        allow read: if isAuth(); // Any authenticated user can see available events
        allow update: if isAdmin(); // Only admins can update event details (like isActive)
        allow create, delete: if isAdmin(); // Only admins can create/delete events
    }
    
    // Rule for enrolling in an event
    match /users/{userId}/event_enrollments/{eventId} {
        allow read: if isOwner(userId) || isAdmin();
        allow create: if isOwner(userId) &&
                        // Verify user is only changing their own balance
                        request.resource.data.userId == userId &&
                        // Verify balance deduction is correct for the event fee
                        getAfter(/databases/$(database)/documents/users/$(userId)).data.balance == get(/databases/$(database)/documents/users/$(userId)).data.balance - get(/databases/$(database)/documents/events/$(eventId)).data.enrollmentFee &&
                        // Verify event enrolled count is being incremented correctly
                        getAfter(/databases/$(database)/documents/events/$(eventId)).data.enrolledCount == get(/databases/$(database)/documents/events/$(eventId)).data.enrolledCount + 1;
    }

    // Rule for Admin to read all enrollments for a specific event
    match /{path=**}/event_enrollments/{enrollmentId} {
       allow read, list: if isAdmin();
    }
    
    // --- GAME ROOM RULES ---
    
    match /game_rooms/{roomId} {
        allow read: if isAuth(); // Any authenticated user can read room details (e.g. from lobby)
        
        // Allow room creation if the user has enough balance
        allow create: if isAuth() &&
                       request.resource.data.createdBy.uid == request.auth.uid;
                       
        // Allow updates under specific conditions
        allow update: if isAuth() &&
                       // Condition 1: A player is joining the game
                       (
                          request.resource.data.status == 'in-progress' &&
                          resource.data.status == 'waiting' &&
                          request.resource.data.player2.uid == request.auth.uid &&
                          // Verify that the joiner's balance is being correctly deducted
                          getAfter(/databases/$(database)/documents/users/$(request.auth.uid)).data.balance + getAfter(/databases/$(database)/documents/users/$(request.auth.uid)).data.bonusBalance == 
                          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.balance + get(/databases/$(database)/documents/users/$(request.auth.uid)).data.bonusBalance - resource.data.wager
                       ) ||
                       // Condition 2: A player in the game is making a move or resigning
                       (
                          request.auth.uid in resource.data.players &&
                          (
                              // Allow game state updates (moves)
                              request.resource.data.boardState != resource.data.boardState ||
                              // Allow game completion updates (win/loss/draw/resign)
                              request.resource.data.status == 'completed'
                          )
                       );

        // A player can cancel their own waiting room
        allow delete: if isAuth() && resource.data.createdBy.uid == request.auth.uid && resource.data.status == 'waiting';

        match /messages/{messageId} {
            allow read, create: if isAuth() && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
        }
    }
    
    // --- CHAT RULES ---

    match /chats/{chatId} {
      // Users can only read/write to chats they are a part of.
      // The `list` permission is needed for the inbox page to query chats.
      allow list: if isAuth();
      allow read, update: if isAuth() && request.auth.uid in resource.data.users;

      match /messages/{messageId} {
        allow read, create: if isAuth() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
      }
    }
    
    // --- OTHER RULES ---
    
    match /notifications/{notificationId} {
        allow read, list, update: if isAuth() && request.auth.uid == resource.data.userId;
    }
    
    match /bonuses/{bonusId} {
      allow read: if isAuth();
      allow write: if isAdmin();
    }
    
    match /dailyBonusClaims/{bonusId} {
      allow read: if isAuth();
      // Allow update only within the transaction handled by the claim cloud function/transaction
      allow write: if isAuth(); 
    }
  }
}
