rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper Functions
    function isAuth() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }
    
    function isAdmin() {
        return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // USER-LEVEL RULES
    match /users/{userId} {
      allow read: if isAuth();
      allow write: if isOwner(userId) || isAdmin();
      
      // Subcollections for a user
      match /{subcollection}/{docId} {
        allow read, write: if isOwner(userId) || isAdmin();
      }
    }
    
    // GAME-LEVEL RULES
    match /game_rooms/{roomId} {
      allow read: if isAuth();
      // Allow create for any authenticated user
      allow create: if isAuth();
      
      // Allow updates only by a player joining the game or players in the game
      allow update: if isAuth() && (
        // Case 1: A new player is joining a 'waiting' room
        (request.resource.data.status == 'in-progress' && resource.data.status == 'waiting' && request.auth.uid == request.resource.data.player2.uid)
        ||
        // Case 2: An existing player is updating an 'in-progress' game
        (resource.data.status == 'in-progress' && request.auth.uid in resource.data.players)
      );
      
      allow delete: if isAuth() && (
        // Allow the creator to delete a waiting room
        (resource.data.status == 'waiting' && isOwner(resource.data.createdBy.uid)) ||
        // Allow admins to delete any room
        isAdmin()
      );
      
      match /messages/{messageId} {
        allow read, create: if isAuth() && request.auth.uid in resource.data.players;
      }
    }
    
    // TRANSACTION-LEVEL RULES
    match /transactions/{transactionId} {
      allow create: if isAuth();
      allow read, update, delete: if isAdmin();
    }
    
    // CHAT-LEVEL RULES
    match /chats/{chatId} {
        allow read, update: if isAuth() && request.auth.uid in resource.data.userIds;
        match /messages/{messageId} {
            allow read, create: if isAuth() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.userIds;
        }
    }

    // BONUS & CAMPAIGN RULES
    match /signup_bonus_campaigns/{campaignId} {
        allow read: if isAuth();
        allow write: if isAdmin();
        match /claims/{claimId} {
            allow read: if isOwner(claimId) || isAdmin();
            allow create: if isOwner(claimId);
        }
    }
    
    match /deposit_bonus_campaigns/{campaignId} {
        allow read: if isAuth();
        allow write: if isAdmin();
        match /claims/{claimId} {
            allow read: if isOwner(claimId) || isAdmin();
            allow create: if isOwner(claimId);
        }
    }

    match /daily_bonus_campaigns/{campaignId} {
        allow read: if isAuth();
        allow write: if isAdmin();
        match /claims/{claimId} {
            allow read: if isOwner(claimId) || isAdmin();
            allow create: if isOwner(claimId);
        }
    }
    
    match /referral_campaigns/{campaignId} {
        allow read: if isAuth();
        allow write: if isAdmin();
    }
    
    // Allow users to create bonus claims for themselves, and admins to manage them
    match /bonus_claims/{claimId} {
        allow create: if isAuth() && isOwner(request.resource.data.userId);
        allow read, update, delete: if isAdmin();
    }
    
    // MARKETING-SPECIFIC RULES
    match /marketing_applications/{appId} {
        allow create: if true;
        allow read, write: if isAdmin();
    }
    
    // SETTINGS RULES
    match /settings/{settingId} {
        allow read, write: if isAdmin();
    }

    // NOTIFICATIONS
    match /notifications/{notificationId} {
        allow read, update: if isAuth() && isOwner(resource.data.userId);
        allow create: if isAuth(); // Allow creation for friend requests etc.
    }
  }
}