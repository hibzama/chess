rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isPlayerInRoom(roomId) {
      return request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
    }

    // USER DATA:
    // - Allow read for any signed-in user (to see profiles)
    // - Allow create for anyone (new user registration)
    // - Allow owner to update their own data
    // - Allow another user to update balance ONLY if they are joining a game
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if true;
      allow update: if isOwner(userId) || 
                      (isSignedIn() && request.resource.data.balance == resource.data.balance - get(/databases/$(database)/documents/game_rooms/$(request.resource.id)).data.wager);
      
       match /{subcollection}/{docId} {
        allow read, write: if isOwner(userId);
      }
    }
    
    // GAME ROOMS:
    // - Allow read for any signed-in user (for lobbies)
    // - Allow create for any signed-in user
    // - Allow players in the room to update it (make moves)
    // - Allow owner to delete a "waiting" room
    match /game_rooms/{roomId} {
      allow read, create: if isSignedIn();
      allow update: if isPlayerInRoom(roomId);
      allow delete: if isSignedIn() && resource.data.createdBy.uid == request.auth.uid && resource.data.status == 'waiting';

      match /messages/{messageId} {
          allow read, create: if isPlayerInRoom(roomId);
      }
    }

    // TRANSACTIONS:
    // - Allow owner to create new transactions
    // - Allow owner to read their own transaction history
    match /transactions/{transactionId} {
        allow create, read: if isSignedIn() && isOwner(request.resource.data.userId);
    }
    
    // NOTIFICATIONS:
    // - Only owner can read/write their notifications
    match /notifications/{notificationId} {
        allow read, update, delete: if isOwner(get(path).data.userId);
        allow create: if isSignedIn();
    }
    
    // CHATS:
    // - Only players involved in the chat can read/update it
    match /chats/{chatId} {
        allow read, update: if request.auth.uid in resource.data.userIds;
        match /messages/{messageId} {
             allow read, create: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.userIds;
        }
    }
    
    // MARKETING & ADMIN SECTION
    function isAdmin() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    match /marketing_applications/{appId} {
        allow create: if true;
        allow read, update: if isAdmin();
    }
    
    match /settings/{settingId} {
        allow read, write: if isAdmin();
    }
    
    // BONUS CAMPAIGNS & CLAIMS
    match /signup_bonus_campaigns/{campaignId} {
      allow read: if true; // Publicly readable for bonus card display
      allow write: if isAdmin();
      match /claims/{claimId} {
        allow read, write: if isAdmin() || isOwner(claimId);
      }
    }
    
    match /daily_bonus_campaigns/{campaignId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
      match /claims/{claimId} {
        allow read, write: if isAdmin() || isOwner(claimId);
      }
    }
    
    match /deposit_bonus_campaigns/{campaignId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
       match /claims/{claimId} {
        allow read, write: if isAdmin() || isOwner(claimId);
      }
    }
    
    match /referral_campaigns/{campaignId} {
        allow read, create, update, delete: if isSignedIn();
    }
    
    match /bonus_claims/{claimId} {
        allow create: if isSignedIn();
        allow read, update: if isAdmin() || isOwner(get(path).data.userId);
    }
  }
}
