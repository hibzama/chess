rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =================================
    // Helper Functions
    // =================================

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function getDoc(path) {
      return get(/databases/$(database)/documents/$(path));
    }

    function incomingData() {
      return request.resource.data;
    }
    
    function existingData() {
        return resource.data;
    }

    function isAdmin() {
      return isSignedIn() && getDoc('users/' + request.auth.uid).data.role == 'admin';
    }

    function isPlayer(room) {
        return request.auth.uid in room.players;
    }

    // =================================
    // Collections
    // =================================

    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isOwner(userId);
      
      // Users can update their own non-critical fields.
      // Balance updates are only allowed if the user is an admin OR
      // if the write is part of a transaction involving a game room they are in.
      allow update: if
        (isOwner(userId) && !('balance' in incomingData()) && !('bonusBalance' in incomingData()) && !('marketingBalance' in incomingData()) && !('role' in incomingData())) ||
        isAdmin();
    }
    
    match /events/{eventId} {
        allow read: if isSignedIn();
        allow create, update, delete: if isAdmin();

        match /event_enrollments/{userId} {
            // A user can only manage their own enrollments
            allow read, create, update, delete: if isOwner(userId);

            match /progress_history/{progressId} {
                allow read, list: if isOwner(userId);
                // History is only created by the backend (Cloud Function).
                allow create: if false; 
                allow update, delete: if false;
            }
        }
    }

    match /friend_requests/{requestId} {
      allow read: if isSignedIn() && (isOwner(existingData().fromId) || isOwner(existingData().toId));
      allow create: if isSignedIn() && isOwner(incomingData().fromId);
      allow delete: if isSignedIn() && (isOwner(existingData().fromId) || isOwner(existingData().toId));
    }

    match /game_rooms/{roomId} {
      allow read, list: if isSignedIn();
      allow create: if isSignedIn() && isOwner(incomingData().createdBy.uid);
      allow delete: if isSignedIn() && isOwner(existingData().createdBy.uid);

      allow update: if isSignedIn() &&
        (
          // Rule for JOINING a game
          (
            existingData().status == 'waiting' &&
            incomingData().status == 'in-progress' &&
            incomingData().player2.uid == request.auth.uid &&
            // Verify the write is valid and comes from a legit transaction
            // This implicitly allows the transaction to read/write the necessary user docs
            incomingData().players[0] == existingData().createdBy.uid &&
            incomingData().players[1] == request.auth.uid
          ) ||
          // Rule for PLAYING a move or COMPLETING a game
          (
            isPlayer(existingData()) &&
            isPlayer(incomingData()) &&
            existingData().status == 'in-progress'
          )
        );
    }

    match /transactions/{transactionId} {
      allow read, list: if (isSignedIn() && isOwner(existingData().userId)) || isAdmin();
      allow create: if isSignedIn();
      allow update: if isAdmin();
    }

    match /notifications/{notificationId} {
        allow read, list, update: if isSignedIn() && isOwner(existingData().userId);
        allow create: if isSignedIn();
    }

    match /marketing_applications/{appId} {
        allow create;
        allow read, update, delete: if isAdmin();
    }

    match /game_rooms/{roomId}/messages/{messageId} {
      allow read, create: if isPlayer(getDoc('game_rooms/' + roomId).data);
    }

    match /chats/{chatId} {
        allow read, write, list: if isSignedIn() && request.auth.uid in chatId.split('_');
        match /messages/{messageId} {
            allow read, create: if isSignedIn() && request.auth.uid in chatId.split('_');
        }
    }

    match /settings/{docId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    match /bonuses/{bonusId} {
        allow read, list: if isSignedIn();
        allow create, update, delete: if isAdmin();
    }

    match /dailyBonusClaims/{claimId} {
      allow read: if isSignedIn();
      allow create, update: if isSignedIn();
    }

    match /users/{userId}/daily_bonus_claims/{claimId} {
        allow read, write: if isOwner(userId);
    }

  }
}