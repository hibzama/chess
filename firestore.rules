rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // HELPER FUNCTIONS
    function isUserAuthenticated() {
      return request.auth != null;
    }
    function isUser(userId) {
      return isUserAuthenticated() && request.auth.uid == userId;
    }
    function isAdmin() {
      return isUserAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // USER-SPECIFIC RULES
    match /users/{userId} {
      // Users can read their own data, admins can read any.
      allow read: if isUser(userId) || isAdmin();
      // Allow user creation, but only for their own user document
      allow create: if isUser(userId);
      // Users can update their own data, admins can update any.
      allow update: if isUser(userId) || isAdmin();

      // Subcollections under users
      match /active_campaigns/{docId} {
        allow read, write, delete: if isUser(userId);
      }
      match /bonus_claims/{docId} {
        allow read, write: if isUser(userId);
      }
      match /daily_bonus_claims/{docId} {
        allow read, write: if isUser(userId);
      }
    }

    // GAME ROOMS
    match /game_rooms/{roomId} {
      allow read: if isUserAuthenticated();
      allow create: if isUserAuthenticated();
      // Only the creator can delete a waiting room. Admins can delete any.
      allow delete: if (resource.data.status == 'waiting' && isUser(resource.data.createdBy.uid)) || isAdmin();
      // An authenticated user can update a room to join, play, or an admin can manage it.
      allow update: if isUserAuthenticated() || isAdmin();

      match /messages/{messageId} {
        allow read, create: if isUserAuthenticated() && request.auth.uid in resource.data.players;
      }
    }

    // FRIEND REQUESTS
    match /friend_requests/{requestId} {
      allow read, create: if isUserAuthenticated();
      allow delete: if isUser(resource.data.fromId) || isUser(resource.data.toId) || isAdmin();
    }

    // NOTIFICATIONS
    match /notifications/{notificationId} {
      allow read, create, update, delete: if isUser(resource.data.userId) || isAdmin();
    }
    
    // CHATS
    match /chats/{chatId} {
        allow read, create, update: if isUserAuthenticated() && request.auth.uid in resource.data.userIds;
        match /messages/{messageId} {
            allow read, create: if isUserAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.userIds;
        }
    }

    // TRANSACTIONS & MARKETING
    match /transactions/{transactionId} {
      allow read, create: if isUserAuthenticated();
      allow update: if isAdmin();
    }
     match /marketing_applications/{appId} {
      allow create;
      allow read, update: if isAdmin();
    }
    
    // SETTINGS
    match /settings/{settingId} {
        allow read;
        allow write: if isAdmin();
    }

    // CAMPAIGNS (PUBLIC READ, ADMIN WRITE)
    match /signup_bonus_campaigns/{campaignId} {
      allow read: if isUserAuthenticated();
      allow create, update, delete: if isAdmin();
      match /claims/{claimId} {
        allow read, create: if isUser(claimId) || isAdmin();
      }
    }
    match /daily_bonus_campaigns/{campaignId} {
      allow read: if isUserAuthenticated();
      allow create, update, delete: if isAdmin();
      match /claims/{claimId} {
        allow read, create: if isUser(claimId) || isAdmin();
      }
    }
    match /deposit_bonus_campaigns/{campaignId} {
      allow read: if isUserAuthenticated();
      allow create, update, delete: if isAdmin();
      match /claims/{claimId} {
        allow read, create: if isUser(claimId) || isAdmin();
      }
    }
    match /referral_campaigns/{campaignId} {
        allow read: if isUserAuthenticated();
        allow create, update, delete: if isAdmin();
    }
    
    // COLLECTION GROUP RULES (FOR ADMIN QUERIES)
    match /{path=**}/bonus_claims/{claimId} {
        allow read: if isAdmin();
        allow create: if isUserAuthenticated();
    }
  }
}
