
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to keep rules DRY
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isAdmin() {
      return isSignedIn() && getUserData(request.auth.uid).role == 'admin';
    }

    //---------------------------------------------------------------------
    // Users Collection
    //---------------------------------------------------------------------
    match /users/{userId} {
      // Anyone can count the total number of users for the bonus card
      allow list: if true; // Used for getCountFromServer
      
      // Admins can read/write any user document fully
      allow read, write: if isAdmin();

      // Any signed-in user can read public fields of any other user
      allow get: if isSignedIn();

      // A user can create their own document and update their own document
      allow create, update: if isOwner(userId);
    }
    
    //---------------------------------------------------------------------
    // Game Rooms Collection
    //---------------------------------------------------------------------
    match /game_rooms/{roomId} {
      // Any signed-in user can read public game rooms
      allow list, get: if isSignedIn();

      // Only the creator can create and delete their own waiting room
      allow create, delete: if isOwner(request.resource.data.createdBy.uid);
      
      // A user can update a room if:
      // 1. They are joining a 'waiting' room.
      // 2. They are one of the players in an 'in-progress' game.
      // 3. They are an admin.
      allow update: if (isAdmin()) ||
                     (isSignedIn() && resource.data.status == 'waiting') ||
                     (isSignedIn() && request.auth.uid in resource.data.players);
    }

    //---------------------------------------------------------------------
    // Transactions Collection
    //---------------------------------------------------------------------
    match /transactions/{transactionId} {
      // Users can see their own transactions
      allow read: if isSignedIn() && isOwner(resource.data.userId);
      // Users can create their own transactions (deposits, withdrawals, etc.)
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
      // Only admins can update or delete transaction records
      allow update, delete: if isAdmin();
    }
    
    //---------------------------------------------------------------------
    // Friend Requests Collection
    //---------------------------------------------------------------------
    match /friend_requests/{requestId} {
      // You can create a request if you are the sender
      allow create: if isSignedIn() && isOwner(request.resource.data.fromId);
      // You can read a request if you are the sender or receiver
      allow read: if isSignedIn() && (isOwner(resource.data.fromId) || isOwner(resource.data.toId));
      // You can update/delete a request if you are the sender (to cancel) or receiver (to accept/decline)
      allow update, delete: if isSignedIn() && (isOwner(resource.data.fromId) || isOwner(resource.data.toId));
    }

    //---------------------------------------------------------------------
    // Other Collections (Chats, Notifications, etc.)
    // Secure by default: only authorized users can access.
    //---------------------------------------------------------------------
    match /chats/{chatId} {
      allow read, write: if isSignedIn() && request.auth.uid in resource.data.users;
    }
    
    match /chats/{chatId}/messages/{messageId} {
       allow read, write: if isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.users[request.auth.uid] != null;
    }
    
    match /notifications/{notificationId} {
      allow read, create, update: if isSignedIn() && isOwner(resource.data.userId);
    }

    match /marketing_applications/{appId} {
      allow create: if true; // Anyone can apply
      allow read, update, delete: if isAdmin();
    }
  }
}
