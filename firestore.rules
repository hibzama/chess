rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to keep rules DRY
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function getRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    function isAdmin(userId) {
      return getRole(userId) == 'admin';
    }

    function isOwnerOrAdmin(userId) {
      return isUser(userId) || isAdmin(request.auth.uid);
    }
    
    // Global read for user count
    match /users/{userId} {
       allow list: if true; // Allows getCountFromServer
    }

    // Full access for admins on all documents
    match /{document=**} {
      allow read, write: if isAuthenticated() && isAdmin(request.auth.uid);
    }
    
    match /users/{userId} {
      // Allow user to read/update their own profile
      // Allow any authenticated user to read public profile data
      allow get: if isAuthenticated();
      allow update: if isUser(userId) && request.resource.data.keys().hasOnly(['firstName', 'lastName', 'phone', 'photoURL', 'equipment']);
      
      // Allow creating a user profile during registration
      allow create: if request.resource.data.uid == request.auth.uid;

      // Allow updating friends list (used in friend request acceptance)
      allow write: if isAuthenticated() && request.resource.data.friends.hasAny(request.auth.uid);
    }
    
    match /game_rooms/{roomId} {
        // Anyone can read public game rooms
        allow list: if isAuthenticated();
        // Only players in the game can read the full game state
        allow get: if isAuthenticated() && (resource.data.isPrivate == false || request.auth.uid in resource.data.players);

        // Allow authenticated users to create a room
        allow create: if isAuthenticated();
        
        // Allow a second player to join a waiting room
        // Allow players in the game to make moves (update)
        allow update: if isAuthenticated() && 
                        ( (resource.data.status == 'waiting' && !(request.auth.uid in resource.data.players)) || (request.auth.uid in resource.data.players) );
        
        // Allow the creator to delete a waiting room
        allow delete: if isAuthenticated() && request.auth.uid == resource.data.createdBy.uid && resource.data.status == 'waiting';

        match /messages/{messageId} {
            allow read, write: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
        }
    }
    
    match /transactions/{transactionId} {
        // A user can only access their own transactions
        allow list, get: if isAuthenticated() && get(/databases/$(database)/documents/transactions/$(transactionId)).data.userId == request.auth.uid;
        allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
    }

    match /friend_requests/{requestId} {
        allow read: if isAuthenticated() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
        allow create: if isAuthenticated() && request.resource.data.fromId == request.auth.uid;
        allow update, delete: if isAuthenticated() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
    }
    
     match /chats/{chatId} {
        allow read, write: if isAuthenticated() && request.auth.uid in resource.data.users;
        
        match /messages/{messageId} {
            allow read, write: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
        }
    }
    
    match /marketing_applications/{appId} {
        allow create: if true; // Anyone can apply
    }
    
    match /notifications/{notificationId} {
        allow read, write: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }
  }
}
