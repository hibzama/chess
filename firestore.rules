
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // UTILITY: Function to check if a user is an admin
    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // USERS
    match /users/{userId} {
      allow read: if request.auth != null; // Any authenticated user can read any profile
      allow create: if request.auth != null && request.auth.uid == userId; // User can create their own profile
      
      // Allow user to update their own profile, with specific field restrictions
      allow update: if request.auth != null && request.auth.uid == userId
                    && request.resource.data.diff(resource.data).affectedKeys().hasOnly([
                        'firstName', 'lastName', 'phone', 'address', 'city', 'country', 'gender', 'photoURL', 'binancePayId'
                    ]);
      
      // Allow balance updates only under specific, secure conditions
      allow update: if request.auth != null && (
        // Condition 1: Joining a game (balance is deducted)
        (request.auth.uid == userId &&
         request.resource.data.balance == resource.data.balance - request.resource.data.wager &&
         exists(/databases/$(database)/documents/game_rooms/$(request.resource.data.gameRoomId)) &&
         get(/databases/$(database)/documents/game_rooms/$(request.resource.data.gameRoomId)).data.status == 'waiting'
        ) ||
        // Condition 2: Enrolling in an event (balance is deducted for fee)
        (request.auth.uid == userId &&
         exists(/databases/$(database)/documents/users/$(userId)/event_enrollments/$(request.resource.data.eventId)) &&
         request.resource.data.balance == resource.data.balance - get(/databases/$(database)/documents/events/$(request.resource.data.eventId)).data.enrollmentFee
        ) ||
        // Condition 3: Requesting a withdrawal (balance is deducted)
        (request.auth.uid == userId &&
         exists(/databases/$(database)/documents/transactions/$(request.resource.data.transactionId))
        )
      );

      // Subcollection: Event Enrollments
      match /event_enrollments/{enrollmentId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Allow admins to list event enrollments across all users
    match /{path=**}/event_enrollments/{enrollmentId} {
       allow get, list: if isAdmin();
    }

    // SETTINGS
    match /settings/{settingId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    // TRANSACTIONS
    match /transactions/{transactionId} {
        allow read, list: if request.auth.uid == resource.data.userId || isAdmin();
        allow create: if request.auth.uid == request.resource.data.userId; // User can create their own transactions
        allow update, delete: if isAdmin(); // Only admins can manage transactions
    }

    // FRIEND REQUESTS
    match /friend_requests/{requestId} {
        allow read, write: if request.auth != null;
    }
    
    // NOTIFICATIONS
    match /notifications/{notificationId} {
        allow read, write: if request.auth.uid == resource.data.userId || isAdmin();
    }

    // MARKETING
    match /marketing_applications/{appId} {
        allow read, create: if request.auth != null;
        allow update, delete: if isAdmin();
    }

    // EVENTS
    match /events/{eventId} {
        allow read: if request.auth != null;
        allow create, update, delete: if isAdmin();
    }
    
    // BONUSES
    match /bonuses/{bonusId} {
        allow read: if request.auth != null;
        allow write: if isAdmin();
    }
    match /dailyBonusClaims/{claimId} {
        allow read: if request.auth != null;
        allow write: if isAdmin();
    }
    
    // CHATS
    match /chats/{chatId} {
        // Must be authenticated and a member of the chat
        allow read, write: if request.auth != null && request.auth.uid in resource.data.users;
        
        // Allow a user to query the chats collection to find their own chats
        allow list: if request.auth != null && request.auth.uid in request.query.where.users;
    }
    
    // GAME ROOMS
    match /game_rooms/{roomId} {
        allow read, create: if request.auth != null;

        function isPlayer(roomData) {
            return request.auth.uid in roomData.players;
        }

        function isJoining(roomData, nextRoomData) {
            let joiningPlayerId = request.auth.uid;
            let wager = nextRoomData.wager;
            let userBalanceAfter = getAfter(/databases/$(database)/documents/users/$(joiningPlayerId)).data.balance;
            let userBalanceBefore = resource.data.balance;

            // This rule is tricky because bonus balance can be used.
            // A simplified check ensures balance *or* bonus balance goes down by the wager amount.
            let balanceDeducted = userBalanceAfter <= userBalanceBefore - wager;
            let bonusBalanceDeducted = getAfter(/databases/$(database)/documents/users/$(joiningPlayerId)).data.bonusBalance < resource.data.bonusBalance;
            
            return roomData.status == 'waiting'
                && nextRoomData.status == 'in-progress'
                && nextRoomData.player2.uid == joiningPlayerId
                && (balanceDeducted || bonusBalanceDeducted);
        }
        
        function isEnding(roomData, nextRoomData) {
            return isPlayer(roomData)
                && roomData.status == 'in-progress'
                && nextRoomData.status == 'completed';
        }

        // Allow updates only for joining or game state changes by a player
        allow update: if request.auth != null && isPlayer(resource.data) && (isJoining(resource.data, request.resource.data) || isEnding(resource.data, request.resource.data));
        
        // Allow a player to delete their own waiting room
        allow delete: if request.auth != null && resource.data.status == 'waiting' && request.auth.uid == resource.data.createdBy.uid;
    }
  }
}
