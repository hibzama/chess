rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users: Allow any authenticated user to read profile data for friend lists/rankings.
    // Only allow a user to write to their own document.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;
    }

    // Game Rooms:
    match /game_rooms/{roomId} {
      // Allow authenticated users to see the list of public games.
      allow list: if request.auth != null;
      // Allow creation if the creator is in the initial players list.
      allow create: if request.auth != null && request.auth.uid in request.resource.data.players;
      // Allow players in the game to read or update it.
      allow read, update: if request.auth != null && request.auth.uid in resource.data.players;
      // Only the creator can delete a waiting room.
      allow delete: if request.auth != null && request.auth.uid == resource.data.createdBy.uid;

      // Game Chat Messages: Only players in the game can access chat.
      match /messages/{messageId} {
        allow read, create: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
      }
    }
    
    // Private user-to-user chats
    match /chats/{chatId} {
        allow read, write: if request.auth != null && request.auth.uid in resource.data.users;
        match /messages/{messageId} {
           allow read, create: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
        }
    }

    // Friend Requests:
    match /friend_requests/{requestId} {
        allow read, write: if request.auth != null && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
        allow create: if request.auth != null && request.resource.data.fromId == request.auth.uid;
        allow delete: if request.auth != null && request.auth.uid == resource.data.fromId;
    }

    // Notifications: A user can only access their own notifications.
    match /notifications/{notificationId} {
        allow read, write, create: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Marketing Applications: No direct client access. Handled by admin panel/backend.
    match /marketing_applications/{appId} {
        allow read, write: if false;
        allow create: if true; // Allow anyone to submit an application.
    }

    // Transactions: Users can read their own transactions. Creation is handled by secure backend logic (or transactions).
    match /transactions/{transactionId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
  }
}
