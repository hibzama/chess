rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper Functions
    function isUserAuthenticated() {
      return request.auth != null;
    }
    
    function isUser(userId) {
      return isUserAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isUserAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Checks if the incoming data only contains fields that are allowed to be updated by the user.
    function userCanUpdateFields() {
      let allowedFields = ['firstName', 'lastName', 'phone', 'photoURL', 'equipment'];
      return request.resource.data.keys().hasOnly(allowedFields);
    }
    
    // Validates a transaction for joining a game.
    function isJoiningGame(userId, wager) {
      let gameRoomId = request.resource.data.gameRoomId;
      // Ensure the write is part of a transaction that reads the specific game room.
      // This is a proxy to know we are in a game-joining context.
      // A more robust check would involve `get` which is not available in all write contexts.
      return exists(/databases/$(database)/documents/game_rooms/$(gameRoomId));
    }


    // USER PROFILES
    match /users/{userId} {
      allow read: if true; // Allow reading public profile data by anyone.
      
      // CREATE: User can create their own document.
      allow create: if isUser(userId);
      
      // UPDATE: User can update their own data, or an admin can.
      // A special case allows another authenticated user to update their balance ONLY
      // as part of a valid game-joining transaction.
      allow update: if isAdmin() || (isUser(userId) && userCanUpdateFields()) ||
                      (isUserAuthenticated() && isJoiningGame(userId, request.resource.data.balance));
                      
      allow delete: if isAdmin();
    }
    
    // GAME ROOMS
    match /game_rooms/{roomId} {
        // READ: Anyone can read public, waiting rooms (for the lobby).
        // Only players in the room can read it once it's private or in-progress.
        allow read: if resource.data.isPrivate == false && resource.data.status == 'waiting' ||
                     (isUserAuthenticated() && request.auth.uid in resource.data.players);
        
        // CREATE: Any authenticated user can create a room.
        // The creator's UID must match the user making the request.
        allow create: if isUserAuthenticated() && request.resource.data.createdBy.uid == request.auth.uid;
        
        // UPDATE: Allow joining, playing moves, and completing the game.
        allow update: if isUserAuthenticated() && (
                        // Case 1: A new player is joining a 'waiting' room.
                        (resource.data.status == 'waiting' &&
                         request.resource.data.status == 'in-progress' &&
                         request.auth.uid == request.resource.data.player2.uid &&
                         !(request.auth.uid in resource.data.players)) ||
                         
                        // Case 2: A player is making a move in an 'in-progress' game.
                        (resource.data.status == 'in-progress' &&
                         request.auth.uid in resource.data.players) ||
                         
                        // Case 3: Admin override
                        isAdmin()
                      );
                      
        // DELETE: Only the creator of a 'waiting' room or an admin can cancel/delete it.
        allow delete: if isAdmin() || (isUserAuthenticated() && resource.data.status == 'waiting' && request.auth.uid == resource.data.createdBy.uid);
        
        // MESSAGES: Only players in the room can chat.
        match /messages/{messageId} {
            allow read, create: if isUserAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
            allow update, delete: if false; // Messages are immutable
        }
    }

    // TRANSACTIONS (Deposits, Withdrawals, Wagers, Payouts, Commissions)
    match /transactions/{transactionId} {
      // READ: A user can only read their own transactions. An admin can read any.
      allow get: if isUser(resource.data.userId) || isAdmin();
      allow list: if (isUserAuthenticated() && request.query.where.size() > 0 && request.query.where[0].fieldPath == 'userId' && request.query.where[0].string_value == request.auth.uid) || isAdmin();

      // CREATE:
      // Deposits/Withdrawals: User creates for themselves.
      // Wagers/Payouts/Commissions: Handled by server logic/transactions, here we trust authenticated users
      // as the logic is complex for rules. Fine-grained control is in the transaction code.
      allow create: if isUser(request.resource.data.userId) || isAdmin();
      
      // UPDATE: Only admins can change a transaction's status (e.g., approve a deposit).
      allow update: if isAdmin();
      
      allow delete: if isAdmin();
    }
    
    // FRIEND REQUESTS
    match /friend_requests/{requestId} {
      // READ: User can read requests they sent or received.
      allow get, list: if isUser(resource.data.fromId) || isUser(resource.data.toId) || isAdmin();
      
      // CREATE: User can only create requests from their own ID.
      allow create: if isUser(request.resource.data.fromId);
      
      // UPDATE: User can update (accept/decline) a request sent TO them.
      allow update: if isUser(resource.data.toId);
      
      // DELETE: User can delete (cancel) a request they SENT.
      allow delete: if isUser(resource.data.fromId);
    }
    
    // CHATS (Private 1-on-1)
    match /chats/{chatId} {
      // READ/WRITE: A user can read/write to a chat if their UID is a key in the `users` map.
      allow read, write: if isUserAuthenticated() && request.auth.uid in resource.data.users;
      
      match /messages/{messageId} {
         allow read, create: if isUserAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
         allow update, delete: if false;
      }
    }
    
     // MARKETING APPLICATIONS
    match /marketing_applications/{appId} {
        allow create: if true; // Anyone can apply.
        allow read, update, delete: if isAdmin();
    }
    
    // NOTIFICATIONS
    match /notifications/{notifId} {
        allow read, list: if isUser(resource.data.userId) || isAdmin();
        allow create, update: if isUserAuthenticated() || isAdmin(); // Allow creation by backend functions/users
        allow delete: if isUser(resource.data.userId) || isAdmin();
    }
  }
}