rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // =============================================
    // Helper Functions
    // =============================================
    function isLoggedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isLoggedIn() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isLoggedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isMarketer() {
       return isLoggedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'marketer';
    }

    // =============================================
    // User Profiles
    // =============================================
    match /users/{userId} {
      // Anyone can count users (for the bonus card)
      allow get: if request.method == 'count';
      // Any logged-in user can read public profile data
      allow read: if isLoggedIn();
      // Only the user themselves or an admin can update their profile
      allow update: if isUser(userId) || isAdmin();
      // Only a user can create their own document
      allow create: if isUser(userId);
      // Users cannot be deleted
      allow delete: if false;
    }
    
    // =============================================
    // Game Rooms
    // =============================================
    match /game_rooms/{roomId} {
        // Any logged-in user can read public rooms from the lobby
        allow list: if isLoggedIn();
        // Only players in the game can read the full game room data
        allow get: if isLoggedIn() && (resource == null || request.auth.uid in resource.data.players);

        // Allow creation if the creator is in the players list
        allow create: if isLoggedIn() && request.auth.uid in request.resource.data.players;

        // Allow updates only by players in the game
        allow update: if isLoggedIn() && request.auth.uid in resource.data.players;

        // Only the creator can delete a waiting room
        allow delete: if isLoggedIn() && resource.data.status == 'waiting' && request.auth.uid == resource.data.createdBy.uid;

        // Chat subcollection rules
        match /messages/{messageId} {
            // Only players in the game can read/write chat messages
            allow read, write: if isLoggedIn() && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
        }
    }
    
    // =============================================
    // Chats
    // =============================================
    match /chats/{chatId} {
      // Only users who are part of the chat can access it
      allow read, write, update: if isLoggedIn() && request.auth.uid in resource.data.users;
      
       match /messages/{messageId} {
        // Only users who are part of the chat can read/write messages
        allow read, write: if isLoggedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
      }
    }
    
    // =============================================
    // Transactions, Notifications, Friend Requests
    // =============================================
    match /transactions/{transactionId} {
      // User can only access their own transactions
      allow read, list: if isLoggedIn() && (resource == null || resource.data.userId == request.auth.uid);
      // Users can create their own transactions
      allow create: if isLoggedIn() && request.resource.data.userId == request.auth.uid;
      // Admins can update any transaction
      allow update: if isAdmin();
      allow delete: if false;
    }
    
    match /notifications/{notificationId} {
        // A user can only access their own notifications
        allow read, list: if isLoggedIn() && resource.data.userId == request.auth.uid;
        // A user can create their own notifications (e.g. through a function)
        allow create: if isLoggedIn();
        // A user can update their own notifications (e.g. to mark as read)
        allow update: if isLoggedIn() && resource.data.userId == request.auth.uid;
    }

    match /friend_requests/{requestId} {
        // Only involved users can read a request
        allow read: if isLoggedIn() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
        // Only the sender can create a request
        allow create: if isLoggedIn() && request.resource.data.fromId == request.auth.uid;
        // Only the receiver can update (accept/decline)
        allow update: if isLoggedIn() && request.auth.uid == resource.data.toId;
        // Only the sender can delete a pending request
        allow delete: if isLoggedIn() && request.auth.uid == resource.data.fromId;
    }
    
    match /marketing_applications/{appId} {
        // Admins can read all applications
        allow list, read: if isAdmin();
        // Anyone can create an application
        allow create: if true;
        // Admins can update the status
        allow update: if isAdmin();
    }
    
     // =============================================
    // Global Admin Catch-all
    // =============================================
    match /{path=**} {
      // Admins can read/write anything if no more specific rule has matched
      allow read, write: if isAdmin();
    }
  }
}