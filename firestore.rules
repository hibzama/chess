
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }
    
    // Admins can do anything
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    match /{path=**} {
        allow read, write: if isAdmin();
    }

    // Users collection
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;
    }

    // Settings
    match /settings/{setting} {
        allow read: if true;
        allow write: if isAdmin();
    }

    // Game Rooms
    match /game_rooms/{roomId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow update, delete: if request.auth.uid == resource.data.createdBy.uid || request.auth.uid == resource.data.player2.uid;
    }
    
    match /game_rooms/{roomId}/messages/{messageId} {
        allow read, write: if request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
    }
    
    // Notifications
    match /notifications/{notificationId} {
        allow read, write: if request.auth.uid == resource.data.userId;
    }

    // Chats
    match /chats/{chatId} {
        allow read, update: if request.auth.uid in resource.data.users;
    }
     match /chats/{chatId}/messages/{messageId} {
        allow read, write: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
    }
    
    // Friend Requests
    match /friend_requests/{requestId} {
        allow create: if request.auth.uid == request.resource.data.fromId;
        allow read, delete: if request.auth.uid == resource.data.toId || request.auth.uid == resource.data.fromId;
    }

    // Marketing Applications
    match /marketing_applications/{appId} {
        allow create: if true;
        allow read, write: if isAdmin();
    }

    // Transactions - for viewing history and creating requests
    match /transactions/{transactionId} {
        allow read: if request.auth.uid == resource.data.userId;
        allow create: if request.auth.uid == request.resource.data.userId;
        allow update: if isAdmin(); // Only admins can approve/reject
    }
    
    // Events
    match /events/{eventId} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
    }
    
    match /event_enrollments/{eventId} {
      allow read, write: if false; // Disallow direct access
    }
    
    match /event_enrollments/{eventId}/users/{userId} {
        allow read: if isAdmin();
        // Allow a user to create and update their own enrollment document
        allow write: if request.auth.uid == userId;
    }
    
    // User specific event enrollments
     match /users/{userId}/event_enrollments/{enrollmentId} {
        allow read, write: if request.auth.uid == userId;
    }

    // Bonuses
    match /bonuses/{bonusId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /dailyBonusClaims/{bonusId} {
        // Users can't read the whole list of claimers
        allow read: if false;
        // The claim logic is handled by a transaction, which needs write access.
        // The transaction itself checks for limits and eligibility.
        allow write: if request.auth != null;
    }
  }
}
