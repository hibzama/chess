
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to make rules more readable
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Admins have full access to everything
    match /{path=**} {
      allow read, write: if isAdmin();
    }

    // USERS
    // Users can be read by anyone (for profiles, rankings), but only the user themselves can update their own document.
    // New users can be created by anyone (during registration).
    // Deletion of users is not allowed from the client.
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if !isSignedIn(); // Allow user creation during registration
      allow update: if isUser(userId);
      allow delete: if false; // Nobody can delete users from the client
    }
    
    // Allow anyone to get the count of users for the bonus card feature.
    match /users {
        allow list: if true;
    }

    // TRANSACTIONS
    // Users can only create transactions for themselves, and can only read their own transactions.
    match /transactions/{transactionId} {
        allow read: if isUser(get(/databases/$(database)/documents/transactions/$(transactionId)).data.userId);
        allow create: if isUser(request.resource.data.userId);
        allow update, delete: if false;
    }
    
    // MARKETING APPLICATIONS
    // Anyone can create a marketing application. No one but admins can read or modify them.
    match /marketing_applications/{appId} {
        allow create: if !isSignedIn();
        allow read, update, delete: if false;
    }
    
    // FRIEND REQUESTS
    // Users can read requests sent to them, and can create/delete requests from them.
    match /friend_requests/{requestId} {
        allow read: if isUser(resource.data.toId);
        allow create: if isUser(request.resource.data.fromId);
        allow delete: if isUser(resource.data.fromId); // Allow canceling sent requests
        allow update: if isUser(resource.data.toId); // Allow accepting/declining requests
    }

    // GAME ROOMS
    // Logged-in users can read public, waiting rooms (for the lobby).
    // Users can only create rooms for themselves.
    // Only players in a room can read its full data once it's in-progress.
    // Only players can update a room they are in.
    match /game_rooms/{roomId} {
        // Allow reading public, waiting rooms for the lobby view
        allow list: if isSignedIn();

        allow read: if (resource.data.players.hasAny([request.auth.uid])) || (resource.data.isPrivate == false && resource.data.status == 'waiting');

        allow create: if isUser(request.resource.data.createdBy.uid) && request.resource.data.createdBy.uid in request.resource.data.players;
        allow update: if isUser(resource.data.createdBy.uid) || isUser(resource.data.player2.uid);

        // Creator can delete a room only if it's still waiting for an opponent.
        allow delete: if resource.data.status == 'waiting' && isUser(resource.data.createdBy.uid);
        
        // CHAT MESSAGES within a game room
        // Only players in the game can read or write chat messages.
        match /messages/{messageId} {
            allow read, create: if get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players.hasAny([request.auth.uid]);
            allow update, delete: if false;
        }
    }
    
    // CHATS
    // Standalone chat documents can only be accessed by the users involved in the chat.
    match /chats/{chatId} {
        allow read, update: if isSignedIn() && request.auth.uid in resource.data.users;
        
        // Messages within a chat
        match /messages/{messageId} {
            allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
            allow update, delete: if false;
        }
    }
    
    // NOTIFICATIONS
    // Users can only access their own notifications.
    match /notifications/{notificationId} {
        allow read, create, update: if isUser(resource.data.userId);
        allow delete: if false;
    }
  }
}
