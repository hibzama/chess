rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isEnrollingInEvent(userId, eventId) {
      let enrollmentPath = /databases/$(database)/documents/users/$(userId)/event_enrollments/$(eventId);
      return exists(enrollmentPath);
    }

    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isAdmin();
    }
    
    match /users/{userId}/event_enrollments/{enrollmentId} {
        allow read: if isOwner(userId) || isAdmin();
        allow create: if isOwner(userId);
        match /progress_history/{progressId} {
          allow read: if isOwner(userId) || isAdmin();
        }
    }
    
    match /marketing_applications/{appId} {
        allow read, write: if isAdmin();
        allow create: if request.auth == null || request.auth.uid != null;
    }
    
    match /transactions/{transactionId} {
        allow read, write: if isOwner(get(/databases/$(database)/documents/transactions/$(transactionId)).data.userId) || isAdmin();
        allow create: if request.auth != null;
    }

    match /events/{eventId} {
      allow read: if request.auth != null;
      allow update: if isAdmin(); // Only admins can modify events directly
    }

    match /settings/{settingId} {
        allow read, write: if isAdmin();
    }

    match /chats/{chatId} {
      allow read, update: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
      match /messages/{messageId} {
        allow read, create: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
      }
    }
    
    match /notifications/{notificationId} {
        allow read, update, delete: if isOwner(get(/databases/$(database)/documents/notifications/$(notificationId)).data.userId);
        allow create: if request.auth.uid != null;
    }
    
     match /dailyBonusClaims/{bonusId} {
        allow read: if request.auth != null;
        allow write: if isAdmin(); // Only admins can create the initial counter
     }

    // Public game rooms can be read by anyone authenticated.
    // Writing/creating rooms is handled by functions or client logic with balance checks.
    match /game_rooms/{roomId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null;
        // Updates are managed by the Game Context logic on the client
        // and a user can only update a game they are a player in.
        allow update: if request.auth.uid in resource.data.players;
        allow delete: if request.auth.uid == resource.data.createdBy.uid;
        
        match /messages/{messageId} {
            allow read, create: if request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
        }
    }
  }
}
