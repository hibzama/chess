
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
    // =============================================================
    //           Default Security Rules (Deny all by default)
    // =============================================================
    match /{document=**} {
      allow read, write: if false;
    }

    // =============================================================
    //                          USERS
    // =============================================================
    match /users/{userId} {
      // ANY authenticated user can get any user's profile for display purposes.
      allow get: if request.auth != null;
      
      // A user can ONLY create and update their OWN document.
      allow create, update: if request.auth != null && request.auth.uid == userId;

      // Allow users to list other users for referral tracking or finding friends.
      // Specific query constraints should be handled by functions/rules below.
      allow list: if request.auth != null;
    }

    // =============================================================
    //                    GAME ROOMS & RELATED
    // =============================================================
    match /game_rooms/{roomId} {
      // ANY authenticated user can see the list of public rooms or get a specific room.
      allow get, list: if request.auth != null;
      
      // A user can CREATE a room.
      allow create: if request.auth != null;

      // UPDATE permission is complex. A user can update a room if:
      // 1. They are one of the players in the room.
      // 2. A second player is joining (status change from 'waiting' to 'in-progress').
      // 3. The game is in progress (making moves).
      // 4. The game is being completed (status change to 'completed').
      allow update: if request.auth != null && request.auth.uid in resource.data.players;
    
      // A user can DELETE a room only if they are the creator AND it's still waiting.
      allow delete: if request.auth != null && request.auth.uid == resource.data.createdBy.uid && resource.data.status == 'waiting';

      // Allow chat messages within a game room only by players in that game.
      match /messages/{messageId} {
        allow read, create: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
      }
    }

    // =============================================================
    //                       TRANSACTIONS
    // =============================================================
    match /transactions/{transactionId} {
      // An authenticated user can create transactions for themselves.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      
      // Users can read their own transaction history. Admins can read all.
      allow read: if request.auth != null && (request.auth.uid == resource.data.userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');

      // Admins can update transactions (e.g., approve/reject).
      allow update: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // =============================================================
    //                    BONUS & CAMPAIGN RULES
    // =============================================================
    
    // Any authenticated user can see the list of available campaigns.
    match /signup_bonus_campaigns/{campaignId} {
      allow get, list: if request.auth != null;
      match /claims/{userId} {
        allow create: if request.auth != null && request.auth.uid == userId;
      }
    }

    match /daily_bonus_campaigns/{campaignId} {
        allow get, list: if request.auth != null;
        match /claims/{userId} {
            allow create: if request.auth != null && request.auth.uid == userId;
        }
    }
    
    match /deposit_bonus_campaigns/{campaignId} {
      allow get, list: if request.auth != null;
      match /claims/{userId} {
        allow create: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Read access to referral campaigns for all users.
    match /referral_campaigns/{campaignId} {
      allow get, list: if request.auth != null;
    }
    
    // Users can write to their own subcollections for tracking campaign progress.
    match /users/{userId}/active_campaigns/{docId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    match /users/{userId}/daily_bonus_claims/{docId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // A user can create a claim for a bonus.
    match /bonus_claims/{claimId} {
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
        allow read, update: if request.auth != null && (request.auth.uid == resource.data.userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }
    
    // Allow users to query for their own claims.
    match /{path=**}/bonus_claims/{claimId} {
        allow read: if request.auth != null && (
            resource.data.userId == request.auth.uid ||
            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
        );
    }

    // =============================================================
    //                       ADMIN & SETTINGS
    // =============================================================
    
    // Only admins can read/write general settings.
    match /settings/{settingId} {
        allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Only admins can read/write marketing applications.
    match /marketing_applications/{appId} {
        allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
     match /notifications/{notificationId} {
        allow read, update: if request.auth != null && request.auth.uid == resource.data.userId;
        allow create: if request.auth != null; // Allow any authenticated user to create (e.g. friend requests)
    }

    // Allow admins to read all collections for management purposes.
    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    match /users/{userId} {
        allow read, list, update: if isAdmin();
    }
     match /game_rooms/{roomId} {
        allow read, list, update: if isAdmin();
    }

  }
}
