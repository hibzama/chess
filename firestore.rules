rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper Functions
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isJoiningGame(userId, room) {
      // Check if the request is trying to join a game
      let joining = request.resource.data.status == 'in-progress' && room.status == 'waiting';
      // Check if the wager deduction is correct
      let correctWager = get(/databases/$(database)/documents/users/$(userId)).data.balance - request.resource.data.balance == room.wager;
      
      return joining && correctWager;
    }

    // Collection Rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if !isAuthenticated(); // For new user sign-ups
      allow update: if isOwner(userId) || isJoiningGame(userId, request.resource.data.gameRoom);
      allow delete: if isAdmin();
    }
    
    match /game_rooms/{roomId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && resource.data.players.hasAny([request.auth.uid]);
      allow delete: if isAuthenticated() && resource.data.createdBy.uid == request.auth.uid;
    }
    
    match /chats/{chatId} {
      allow read, write: if isAuthenticated() && request.auth.uid in resource.data.users;
      match /messages/{messageId} {
        allow read, write: if isAuthenticated() && get(/databases/$(database)/documents/chats/$(chatId)).data.users[request.auth.uid] != null;
      }
    }
    
    match /friend_requests/{requestId} {
      allow read: if isAuthenticated() && (resource.data.fromId == request.auth.uid || resource.data.toId == request.auth.uid);
      allow create: if isAuthenticated() && request.resource.data.fromId == request.auth.uid;
      allow update, delete: if isAuthenticated() && (resource.data.fromId == request.auth.uid || resource.data.toId == request.auth.uid);
    }
    
    match /transactions/{transactionId} {
      allow read: if isAdmin() || (isAuthenticated() && resource.data.userId == request.auth.uid);
      allow list: if isAdmin() || (isAuthenticated() && request.query.where.to_list()[0].value == request.auth.uid);
      allow create: if isAuthenticated(); // Handled by backend/transaction logic
      allow update, delete: if isAdmin();
    }
    
    match /marketing_applications/{appId} {
      allow read, write: if isAdmin();
      allow create: if !isAuthenticated() || isAuthenticated(); // Anyone can apply
    }
    
    match /notifications/{notificationId} {
       allow read, update: if isAuthenticated() && resource.data.userId == request.auth.uid;
       allow create: if isAuthenticated();
       allow delete: if isAdmin();
    }
    
    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}