rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =================================
    // Helper Functions
    // =================================

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // =================================
    // Collections
    // =================================

    match /users/{userId} {
      allow read: if isSignedIn() || isAdmin();
      allow create: if isOwner(userId);
      // Users can update their own non-critical info. Admins can update anything.
      // Balance updates are handled by backend functions/transactions, not direct user updates.
      allow update: if (isOwner(userId) && !('balance' in request.resource.data) && !('bonusBalance' in request.resource.data) && !('marketingBalance' in request.resource.data) && !('role' in request.resource.data) && !('wins' in request.resource.data)) || isAdmin();
    }
    
    match /friend_requests/{requestId} {
      allow read, delete: if isSignedIn() && (isOwner(resource.data.fromId) || isOwner(resource.data.toId));
      allow create: if isSignedIn() && isOwner(request.resource.data.fromId);
    }
    
    match /game_rooms/{roomId} {
      allow read, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.createdBy.uid == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.createdBy.uid == request.auth.uid;

      // This complex rule allows various game state updates: joining, playing moves, and completing the game.
      allow update: if isSignedIn() && 
        (
          // Rule for JOINING a room
          (
            resource.data.status == 'waiting' &&
            request.resource.data.status == 'in-progress' &&
            request.resource.data.player2.uid == request.auth.uid &&
            !(request.auth.uid in resource.data.players)
          ) ||
          // Rule for MAKING A MOVE in a game
          (
            request.auth.uid in resource.data.players &&
            resource.data.status == 'in-progress' &&
            request.resource.data.status == 'in-progress'
          ) ||
          // Rule for COMPLETING a game (win/loss/draw)
          (
            request.auth.uid in resource.data.players &&
            resource.data.status == 'in-progress' &&
            request.resource.data.status == 'completed'
          )
        );
    }
    
    match /game_rooms/{roomId}/messages/{messageId} {
      allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
    }
    
    match /transactions/{transactionId} {
      allow read, list: if (isSignedIn() && isOwner(resource.data.userId)) || isAdmin();
      allow create: if isSignedIn();
      allow update: if isAdmin();
    }
    
    match /notifications/{notificationId} {
        allow read, list, update: if isSignedIn() && isOwner(resource.data.userId);
        allow create: if isSignedIn();
    }
    
    match /marketing_applications/{appId} {
        allow create; 
        allow read, update, delete: if isAdmin();
    }
    
    match /chats/{chatId} {
        allow read, write: if isSignedIn() && request.auth.uid in resource.data.users;
        match /messages/{messageId} {
            allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
        }
    }
    
    match /settings/{docId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    match /bonuses/{bonusId} {
        allow read, list: if isSignedIn();
        allow create, update, delete: if isAdmin();
    }
    
    match /dailyBonusClaims/{claimId} {
      allow read: if isSignedIn();
      allow create, update: if isSignedIn();
    }
    
    match /users/{userId}/daily_bonus_claims/{claimId} {
        allow read, write: if isOwner(userId);
    }

    // --- Event System Rules ---
    match /events/{eventId} {
      allow read, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    // This is for admin tracking of who enrolled.
    match /event_enrollments/{eventId}/users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      // Allow a user to create their own enrollment tracking doc.
      allow create: if isOwner(userId);
    }

    // This is the user's actual enrollment data.
    match /users/{userId}/event_enrollments/{enrollmentId} {
      // A user can read and write to their own event enrollments.
      allow read, write: if isOwner(userId);
    }
  }
}
