rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // User Profile Rules
    match /users/{userId} {
      allow read: if isUserAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isAdmin();
      
      // Allow users to read their own subcollections
      match /{subcollection}/{docId} {
        allow read, write: if isOwner(userId);
      }
    }
    
    // Marketing applications can be created by anyone, only read/updated by admin
    match /marketing_applications/{appId} {
        allow create;
        allow read, update: if isAdmin();
    }
    
    // Settings can only be managed by admins
    match /settings/{settingId} {
        allow read, write: if isAdmin();
    }
    
    // Referral Campaigns can be read by anyone, managed by admins
    match /referral_campaigns/{campaignId} {
        allow get, list;
        allow write: if isAdmin();
    }
    
    // Signup Bonus Campaigns can be read by anyone, managed by admins
    match /signup_bonus_campaigns/{campaignId} {
        allow get, list;
        allow write: if isAdmin();
        
        match /claims/{claimId} {
            allow write: if isUserAuthenticated();
        }
    }
    
     // Daily Bonus Campaigns can be read by anyone, managed by admins
    match /daily_bonus_campaigns/{campaignId} {
        allow get, list;
        allow write: if isAdmin();
        
        match /claims/{claimId} {
            allow get, list, write: if isUserAuthenticated();
        }
    }
    
     // Deposit Bonus Campaigns can be read by anyone, managed by admins
    match /deposit_bonus_campaigns/{campaignId} {
        allow get, list;
        allow write: if isAdmin();
        
        match /claims/{claimId} {
            allow write: if isUserAuthenticated();
        }
    }

    // Transactions can be created by the user, but only read by them or an admin.
    match /transactions/{transactionId} {
      allow read, update: if isOwner(request.resource.data.userId) || isAdmin();
      allow create: if isOwner(request.resource.data.userId);
    }
    
     // All bonus claims can be queried by admin
     // Individual claims can be created by the user if it's for themself
    match /{path=**}/bonus_claims/{claimId} {
       allow read, write, delete: if isAdmin();
       allow create: if isOwner(request.resource.data.userId);
    }
    
    match /bonus_claims/{claimId} {
        allow get, update: if isAdmin();
    }
    
    match /game_rooms/{roomId} {
      allow read: if isUserAuthenticated();
      allow create: if isOwner(request.resource.data.createdBy.uid);
      allow update: if isUserAuthenticated() && (resource.data.players.hasAny([request.auth.uid]) || request.resource.data.players.hasAny([request.auth.uid]));
      allow delete: if isOwner(resource.data.createdBy.uid);
      
      match /messages/{messageId} {
          allow read, create: if resource.data.senderId == request.auth.uid || get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players.hasAny([request.auth.uid]);
      }
    }
    
    match /friend_requests/{reqId} {
        allow read, create: if isUserAuthenticated();
        allow delete: if isOwner(resource.data.fromId) || isOwner(resource.data.toId);
    }
    
    match /notifications/{notifId} {
        allow read, update: if isOwner(resource.data.userId);
    }
    
    match /chats/{chatId} {
        allow read, update: if request.auth.uid in resource.data.userIds;
        
        match /messages/{messageId} {
            allow read, create: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.userIds;
        }
    }
  }
}

    