rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to make rules cleaner
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Default deny all access unless explicitly allowed
    match /{document=**} {
      allow read, write: if false;
    }

    // USERS collection rules
    match /users/{userId} {
      // Admins can read/write any user document
      allow read, write: if isAdmin();
      
      // A user can read their own document fully
      allow get, list: if isOwner(userId);

      // Any signed-in user can get public data from another user's profile
      allow get: if isSignedIn();
      
      // A user can only update their own document
      allow update: if isOwner(userId);

      // New user creation is handled by the register logic, not direct writes.
      allow create: if true;
    }
    
    // Allow anyone (even unauthenticated users) to count users for the bonus card
    match /users/{userId} {
        allow list: if true;
    }

    // GAME_ROOMS collection rules
    match /game_rooms/{roomId} {
        // Allow reads for any signed-in user to see public lobby games
        allow read: if isSignedIn();

        // Allow creation if the creator is in the players list
        allow create: if isSignedIn() && request.auth.uid in request.resource.data.players;

        // Allow updates (like joining or making a move) only by players in the game
        allow update: if isSignedIn() && request.auth.uid in resource.data.players;

        // Only the creator can delete a waiting room
        allow delete: if isSignedIn() && resource.data.status == 'waiting' && isOwner(resource.data.createdBy.uid);
        
        // Chat subcollection within a game room
        match /messages/{messageId} {
            // Only players in the game can read/write chat messages
            allow read, write: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
        }
    }

    // TRANSACTIONS collection rules
    match /transactions/{transactionId} {
        // Admins have full access
        allow read, write: if isAdmin();
        
        // Users can create their own transactions
        allow create: if isSignedIn() && isOwner(request.resource.data.userId);

        // Users can only read their own transactions
        allow list, get: if isSignedIn() && request.auth.uid == resource.data.userId;
    }
    
    // NOTIFICATIONS collection rules
    match /notifications/{notificationId} {
        // Admins can manage all notifications
        allow read, write: if isAdmin();
        
        // Users can create, read, and update their own notifications
        allow create: if isSignedIn() && isOwner(request.resource.data.userId);
        allow read, update: if isSignedIn() && isOwner(resource.data.userId);
    }
    
    // CHATS collection (private 1-on-1 chats)
    match /chats/{chatId} {
        // Users can only access chats they are a part of
        allow read, update, create: if isSignedIn() && request.auth.uid in resource.data.users;
        
        // Messages subcollection for private chats
        match /messages/{messageId} {
            allow read, write: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
        }
    }
    
    // FRIEND_REQUESTS collection
    match /friend_requests/{requestId} {
        // Any signed-in user can create a request
        allow create: if isSignedIn();
        
        // Only the sender or receiver can read/update/delete the request
        allow read, update, delete: if isSignedIn() && (isOwner(resource.data.fromId) || isOwner(resource.data.toId));
    }
    
    // MARKETING_APPLICATIONS collection
    match /marketing_applications/{appId} {
        // Anyone can submit an application
        allow create: if true;
        // Only admins can read/update them
        allow read, update: if isAdmin();
    }
  }
}
