
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =================================
    // Helper Functions
    // =================================

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function getDoc(path) {
      return get(/databases/$(database)/documents/$(path));
    }

    function incomingData() {
      return request.resource.data;
    }

    // Checks if the user is an admin by looking at their user document.
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // =================================
    // Collections
    // =================================

    match /users/{userId} {
      // Any signed-in user can read another user's profile (for leaderboards, friend searches, etc.).
      allow read: if isSignedIn();

      // A user can only create their own user document.
      allow create: if isOwner(userId);

      // A user can update their own non-critical profile fields.
      // Admin can update any field.
      allow update: if (isOwner(userId) && !('balance' in incomingData()) && !('marketingBalance' in incomingData()) && !('role' in incomingData())) || isAdmin();
    }
    
    match /friend_requests/{requestId} {
      allow read: if isSignedIn() && (isOwner(resource.data.fromId) || isOwner(resource.data.toId));
      allow create: if isSignedIn() && isOwner(request.resource.data.fromId);
      allow delete: if isSignedIn() && (isOwner(resource.data.fromId) || isOwner(resource.data.toId));
    }

    match /game_rooms/{roomId} {
      allow read, list: if isSignedIn();
      allow create: if isSignedIn() && isOwner(request.resource.data.createdBy.uid);
      allow delete: if isSignedIn() && isOwner(resource.data.createdBy.uid);

      // This complex rule allows various game state updates: joining, playing moves, and completing the game.
      allow update: if isSignedIn() && 
        (
          // Joining a game
          !isOwner(resource.data.createdBy.uid) &&
          resource.data.status == 'waiting' &&
          request.resource.data.status == 'in-progress' &&
          request.resource.data.player2.uid == request.auth.uid &&
          !(request.auth.uid in resource.data.players) &&
          (request.auth.uid in request.resource.data.players)
        ) ||
        (
          // Playing moves
          (isOwner(resource.data.createdBy.uid) || isOwner(resource.data.player2.uid)) &&
          resource.data.status == 'in-progress' &&
          request.resource.data.status == 'in-progress'
        ) ||
        (
          // Completing the game
          (isOwner(resource.data.createdBy.uid) || isOwner(resource.data.player2.uid)) &&
          resource.data.status == 'in-progress' &&
          request.resource.data.status == 'completed'
        );
    }
    
    match /game_rooms/{roomId}/messages/{messageId} {
        allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
    }

    match /transactions/{transactionId} {
      // Admins can read/list any transaction. Users can only see their own.
      allow read, list: if (isSignedIn() && isOwner(resource.data.userId)) || isAdmin();
      allow create: if isSignedIn();
      // Only admins can approve/reject transactions (update status).
      allow update: if isAdmin();
    }

    match /notifications/{notificationId} {
        allow read, list, update: if isSignedIn() && isOwner(resource.data.userId);
        allow create: if isSignedIn();
    }

    match /marketing_applications/{appId} {
        allow create; 
        allow read, update, delete: if isAdmin();
    }

    match /chats/{chatId} {
        // A user can only access chats they are a part of.
        allow read, write: if isSignedIn() && request.auth.uid in resource.data.users;

        match /messages/{messageId} {
            // A user can only read/write messages in a chat they are a part of.
            allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
        }
    }

    match /settings/{docId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    match /bonuses/{bonusId} {
        allow read: if isSignedIn();
        allow create, update, delete: if isAdmin();
    }

    match /dailyBonusClaims/{claimId} {
      allow read: if isSignedIn();
      // Allow creation/update during bonus claim transaction
      allow create, update: if isSignedIn();
    }

    match /users/{userId}/daily_bonus_claims/{claimId} {
        allow read, write: if isOwner(userId);
    }

    // --- Events System Rules ---
    match /events/{eventId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }
    
    match /users/{userId}/event_enrollments/{enrollmentId} {
      allow read, write: if isOwner(userId);

      match /progress_history/{progressId} {
        allow read: if isOwner(userId);
        allow create: if isOwner(userId); // Should be created by backend function, but this rule allows it.
      }
    }
  }
}
