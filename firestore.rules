rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // UTILITY FUNCTIONS
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isUserOwner(userId) {
      return isUserAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isUserAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isMarketer() {
       return isUserAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'marketer';
    }
    
    function isEnrollingInEvent(userId) {
        let enrollingEventId = request.resource.data.enrollingEventId;
        return enrollingEventId != null && exists(/databases/$(database)/documents/events/$(enrollingEventId))
               && !exists(/databases/$(database)/documents/users/$(userId)/event_enrollments/$(enrollingEventId));
    }

    // USER DATA
    match /users/{userId} {
      // Anyone can create a user account
      allow create: if true;
      // Only the owner or an admin can read user data
      allow read: if isUserOwner(userId) || isAdmin();
      // Only the owner or an admin can update user data
      allow update: if (isUserOwner(userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['photoURL', 'binancePayId', 'enrollingEventId', 'enrollingEventFee', 'balance'])) || isAdmin();
    }

    // GAME ROOMS
    match /game_rooms/{roomId} {
        allow read: if true;
        // Allow creating a room if authenticated and the creator is the user
        allow create: if isUserAuthenticated() && request.resource.data.createdBy.uid == request.auth.uid;
        // Allow updating a room if authenticated and the user is a player in the room
        allow update: if isUserAuthenticated() && request.auth.uid in resource.data.players;
        // Only the creator can delete a room (e.g., cancel)
        allow delete: if isUserAuthenticated() && resource.data.createdBy.uid == request.auth.uid;

        // MESSAGES in game rooms
        match /messages/{messageId} {
            allow read, write: if isUserAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
        }
    }
    
    // TRANSACTIONS
    match /transactions/{transactionId} {
        allow read: if isUserOwner(request.resource.data.userId) || isAdmin();
        allow create: if isUserAuthenticated();
        allow update: if isAdmin();
    }
    
    // CHATS
    match /chats/{chatId} {
      allow read, write: if isUserAuthenticated() && request.auth.uid in resource.data.users;
      
      match /messages/{messageId} {
        allow read, write: if isUserAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
      }
    }
    
    // FRIEND REQUESTS
    match /friend_requests/{requestId} {
      allow create: if isUserAuthenticated() && request.resource.data.fromId == request.auth.uid;
      allow read, delete: if isUserAuthenticated() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
    }
    
     // NOTIFICATIONS
    match /notifications/{notificationId} {
      allow read, update, delete: if isUserOwner(resource.data.userId);
      allow create: if isUserAuthenticated(); // Can be created by system/other users
    }
    
    // SETTINGS (Admin only)
    match /settings/{settingId} {
      allow read: if isUserAuthenticated();
      allow write: if isAdmin();
    }
    
    // EVENTS (public read, admin write)
    match /events/{eventId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // EVENT ENROLLMENTS
    match /users/{userId}/event_enrollments/{eventId} {
      allow read: if isUserOwner(userId) || isAdmin();
      allow create: if isUserOwner(userId);
      allow update: if isUserOwner(userId); // For progress updates triggered by functions
    }
    
    // EVENT PROGRESS HISTORY (only backend can write)
     match /users/{userId}/event_enrollments/{eventId}/progress_history/{progressId} {
       allow read: if isUserOwner(userId) || isAdmin();
       allow write: if false; // Only backend functions can write here
     }
    
    // BONUSES
    match /bonuses/{bonusId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /dailyBonusClaims/{bonusId} {
      allow read: if true;
      allow write: if isUserAuthenticated(); // Backend function will handle security logic
    }
     match /users/{userId}/daily_bonus_claims/{bonusId} {
        allow read, create: if isUserOwner(userId);
     }
    
    // MARKETING (applications are public write, admin read/update)
    match /marketing_applications/{appId} {
        allow create: if true;
        allow read, update: if isAdmin();
    }
  }
}
