rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isMarketer() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'marketer';
    }

    // Collection: users
    match /users/{userId} {
      // Anyone can create their own user document during sign-up
      allow create: if true;
      // Users can only read their own document, or an admin can read any.
      // Or if the userId is in the friends list.
      allow get: if isUser(userId) || isAdmin() || request.auth.uid in get(/databases/$(database)/documents/users/$(userId)).data.friends;
      // Users can only update their own document, or an admin can update any.
      allow update: if isUser(userId) || isAdmin();
      // Users cannot delete their own accounts from the client.
      allow delete: if false;

      // Allow listing users if authenticated
      allow list: if isSignedIn();

      // Allow reading multiple user documents if their IDs are provided in the request
      allow read: if isSignedIn();
      
      match /active_campaigns/{docId} {
        allow read, write, delete: if isUser(userId);
      }
    }

    // Collection: marketing_applications
    match /marketing_applications/{appId} {
      // Anyone can create an application
      allow create: if true;
      // Only admins can read, update, or delete applications
      allow read, update, delete: if isAdmin();
    }
    
    // Collection: game_rooms
    match /game_rooms/{roomId} {
        allow read, create: if isSignedIn();
        allow update: if isSignedIn() && (
                      (resource.data.createdBy.uid == request.auth.uid && request.resource.data.status == 'in-progress') ||
                      (request.resource.data.players.hasAny([request.auth.uid]))
                    );
        allow delete: if resource.data.createdBy.uid == request.auth.uid;
        
        match /messages/{messageId} {
            allow read, create: if request.auth.uid in resource.data.players;
        }
    }
    
    // Collection: transactions
    match /transactions/{transactionId} {
        allow create: if isUser(request.resource.data.userId) || isAdmin();
        allow read: if isUser(get(/databases/$(database)/documents/transactions/$(transactionId)).data.userId) || isAdmin();
        allow update: if isAdmin();
    }
    
     // Collection: notifications
    match /notifications/{notificationId} {
        allow create: if isSignedIn();
        allow read, update: if isUser(get(/databases/$(database)/documents/notifications/$(notificationId)).data.userId);
    }
    
    // Collection: settings
    match /settings/{settingId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    // Collection: friend_requests
    match /friend_requests/{requestId} {
        allow create: if isUser(request.resource.data.fromId);
        allow read: if isUser(get(/databases/$(database)/documents/friend_requests/$(requestId)).data.toId);
        allow delete: if isUser(get(/databases/$(database)/documents/friend_requests/$(requestId)).data.fromId) ||
                       isUser(get(/databases/$(database)/documents/friend_requests/$(requestId)).data.toId);
    }
    
    // Collection: signup_bonus_campaigns
    match /signup_bonus_campaigns/{campaignId} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
    }

     // Collection: deposit_bonus_campaigns
    match /deposit_bonus_campaigns/{campaignId} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
        
        match /claims/{claimId} {
            allow read, write: if isUser(claimId) || isAdmin();
        }
    }

    // Collection: bonus_claims
    match /bonus_claims/{claimId} {
        allow create: if isSignedIn();
        allow read, update, delete: if isUser(get(/databases/$(database)/documents/bonus_claims/$(claimId)).data.userId) || isAdmin();
    }

    // Collection: referral_campaigns
    match /referral_campaigns/{campaignId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }
    
    // Collection: tasks
    match /tasks/{taskId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }
  }
}
