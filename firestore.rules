rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isAuth() {
      return request.auth != null;
    }

    // USER DATA
    match /users/{userId} {
      allow read;
      allow create: if isAuth();
      allow update: if request.auth.uid == userId || isAdmin();
    }
    
    // GAME ROOMS
    match /game_rooms/{roomId} {
      allow read;
      allow create: if isAuth();
      allow update: if isAuth();
      allow delete: if request.auth.uid == resource.data.createdBy.uid;
    }
    
    // MESSAGES
    match /chats/{chatId} {
      allow read: if isAuth() && request.auth.uid in resource.data.users;
      allow create: if isAuth();
      allow update: if isAuth() && request.auth.uid in resource.data.users;
    }

    match /chats/{chatId}/messages/{messageId} {
        allow read, create: if isAuth() && get(/databases/$(database)/documents/chats/$(chatId)).data.users[request.auth.uid].exists == true;
    }

    // TRANSACTIONS
    match /transactions/{transactionId} {
      allow read: if isAuth() && (request.auth.uid == resource.data.userId || isAdmin());
      allow list: if isAuth() && (request.query.where[0][2] == request.auth.uid || isAdmin());
      allow create: if isAuth();
      allow update: if isAdmin();
    }
    
    // MARKETING APPLICATIONS
    match /marketing_applications/{appId} {
        allow create: if isAuth();
        allow read, update, delete: if isAdmin();
    }
    
    // FRIEND REQUESTS
    match /friend_requests/{requestId} {
      allow read: if isAuth() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId || isAdmin());
      allow create: if isAuth();
      allow update, delete: if isAuth() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId || isAdmin());
    }
    
    // NOTIFICATIONS
    match /notifications/{notificationId} {
        allow read, list, update: if isAuth() && request.auth.uid == resource.data.userId;
        allow create: if isAuth();
    }
  }
}