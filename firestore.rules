rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isUser(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Users collection
    match /users/{userId} {
      // Admins can read/write any user document.
      allow read, write: if isAdmin();
      
      // Users can only read their own document.
      allow get: if isUser(userId);
      
      // Users can update their own document, but with specific restrictions.
      allow update: if isUser(userId)
        // A user can update their balance if it's a decrease (for event enrollment or game creation).
        && (request.resource.data.balance < resource.data.balance
        // And if they are enrolling in an event at the same time.
        && exists(/databases/$(database)/documents/users/$(userId)/event_enrollments/$(request.resource.data.keys().diff(resource.data.keys())[0])))
        
        // Or a user is updating non-critical fields.
        || (request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['firstName', 'lastName', 'photoURL', 'equipment', 'phone', 'address', 'city', 'country', 'gender', 'binancePayId', 'lastSeen', 'status']));
    }

    // Game Rooms collection
    match /game_rooms/{roomId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.createdBy.uid == request.auth.uid;
      allow delete: if resource.data.createdBy.uid == request.auth.uid;

      // Allow a user to update a room if they are joining it or if they are a player resigning.
      allow update: if request.auth != null && (
        // Condition for joining a game
        (request.resource.data.status == 'in-progress' && resource.data.status == 'waiting' && request.resource.data.player2.uid == request.auth.uid) ||
        // Condition for resigning
        (request.resource.data.status == 'completed' && resource.data.players.hasAny([request.auth.uid]))
      );
    }
    
    match /game_rooms/{roomId}/messages/{messageId} {
      allow read, create: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
    }
    
    // Transactions collection
    match /transactions/{transactionId} {
      allow create: if isUser(request.resource.data.userId);
      allow read, list: if isAdmin() || isUser(get(/databases/$(database)/documents/transactions/$(transactionId)).data.userId);
      allow update: if isAdmin();
    }
    
     // Marketing Applications collection
    match /marketing_applications/{appId} {
      allow create: if request.auth == null; // Open for anyone to apply
      allow read, update, delete: if isAdmin();
    }
    
    // Chats collection
    match /chats/{chatId} {
        allow read, update: if request.auth != null && request.auth.uid in resource.data.users;
        allow create: if request.auth != null;
    }

    match /chats/{chatId}/messages/{messageId} {
        allow read, create: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
    }

    // Settings collection
    match /settings/{settingId} {
        allow read: if request.auth != null;
        allow write: if isAdmin();
    }
    
    // Notifications collection
    match /notifications/{notifId} {
        allow read, list, update: if request.auth != null && isUser(get(/databases/$(database)/documents/notifications/$(notifId)).data.userId);
        allow create: if true; // Allow backend functions to create notifications
    }

    // Bonuses collection
    match /bonuses/{bonusId} {
        allow read: if request.auth != null; // Any authenticated user can see active bonuses
        allow create, update, delete: if isAdmin();
    }

    match /dailyBonusClaims/{bonusId} {
        allow read, write: if request.auth != null; // User can read counts, transaction will handle write
    }

     // Events collection
    match /events/{eventId} {
        allow get, list: if request.auth != null;
        allow create, update, delete: if isAdmin();
    }
    
    match /event_enrollments/{eventId}/{userIds}/{userId} {
        allow read: if isAdmin();
    }

    match /users/{userId}/event_enrollments/{enrollmentId} {
        allow read, list: if isUser(userId) || isAdmin();
        allow create: if isUser(userId);
        allow update: if isUser(userId); // For progress updates by cloud function (acts as user)
    }

    match /users/{userId}/event_enrollments/{enrollmentId}/progress_history/{progressId} {
        allow read: if isUser(userId) || isAdmin();
    }
  }
}