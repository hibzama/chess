rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }

    // Allow authenticated users to read/write their own data
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == userId;
      
      // Allow general profile updates
      allow update: if request.auth.uid == userId
                    && request.resource.data.diff(resource.data).affectedKeys()
                       .hasOnly(['firstName', 'lastName', 'phone', 'address', 'city', 'country', 'gender', 'photoURL', 'friends', 'binancePayId']);
                       
      // Allow balance update specifically for event enrollment
      allow update: if request.auth.uid == userId 
                    && request.resource.data.balance < resource.data.balance
                    && getAfter(/databases/$(database)/documents/users/$(userId)/event_enrollments/$(request.resource.data.enrollingEventId)).data != null;
    }
    
    // Allow admins to manage users
    match /users/{userId} {
        allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Allow authenticated users to read game rooms
    match /game_rooms/{roomId} {
        allow read: if request.auth != null;
        allow create: if request.auth.uid == request.resource.data.createdBy.uid;
        allow update: if request.auth.uid in resource.data.players;
        allow delete: if request.auth.uid == resource.data.createdBy.uid;
    }
    
    match /game_rooms/{roomId}/messages/{messageId} {
        allow read, create: if request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
    }

    // Allow authenticated users to manage their own friend requests
    match /friend_requests/{requestId} {
        allow read, delete: if request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId;
        allow create: if request.auth.uid == request.resource.data.fromId;
    }

    // Allow authenticated users to manage their own notifications
    match /notifications/{notificationId} {
        allow read, create: if request.auth.uid == request.resource.data.userId;
        allow update: if request.auth.uid == resource.data.userId && request.resource.data.read == true;
    }

    // Allow authenticated users to manage their own transactions
    match /transactions/{transactionId} {
        allow read, create: if request.auth.uid == request.resource.data.userId;
        // No updates allowed from client
    }
    
    // Marketing applications can be created by anyone, read by admin
    match /marketing_applications/{appId} {
        allow create: if true;
        allow read, update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Settings can only be modified by admins
    match /settings/{settingId} {
        allow read: if request.auth != null;
        allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Events can be read by any authenticated user, written by admin
    match /events/{eventId} {
        allow read: if request.auth != null;
        allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Users can enroll in events
    match /users/{userId}/event_enrollments/{eventId} {
        allow create: if request.auth.uid == userId;
        allow read, list: if request.auth.uid == userId;
    }
    
     // Event progress history can be read by the user
    match /users/{userId}/event_enrollments/{eventId}/progress_history/{historyId} {
        allow read: if request.auth.uid == userId;
        // history is only written by cloud function
    }
    
    // Admins can read event enrollments for any user
    match /event_enrollments/{eventId}/{doc=**} {
      allow read, list: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /chats/{chatId} {
        allow read, update: if request.auth.uid in resource.data.users;
        allow create: if request.auth.uid in request.resource.data.users;
    }

    match /chats/{chatId}/messages/{messageId} {
        allow read, create: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
    }
    
    match /dailyBonusClaims/{bonusId} {
        allow read: if request.auth != null;
        // writes handled by transaction in cloud function
    }
    
    match /bonuses/{bonusId} {
        allow read: if request.auth != null;
        allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}