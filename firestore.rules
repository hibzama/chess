
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Allow admins full access
    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // USERS collection rules
    match /users/{userId} {
      allow create: if isAuthenticated();
      allow read, update: if isOwner(userId) || isAdmin();
      
      // Allow users to manage their own subcollections
      match /{document=**} {
        allow read, write: if isOwner(userId) || isAdmin();
      }
    }

    // TRANSACTIONS collection rules
    match /transactions/{transactionId} {
        allow create: if isAuthenticated();
        allow read: if isAdmin() || (isAuthenticated() && request.auth.uid == resource.data.userId);
        allow update, delete: if isAdmin();
    }

    // MARKETING APPLICATIONS collection rules
    match /marketing_applications/{appId} {
      allow create: if true; // Anyone can apply
      allow read, update, delete: if isAdmin();
    }
    
    // GAME ROOMS collection rules
    match /game_rooms/{roomId} {
        allow read, create: if isAuthenticated();
        allow update: if isAuthenticated(); // More granular control in Cloud Functions
        allow delete: if isAuthenticated() && (isAdmin() || request.auth.uid == resource.data.createdBy.uid);
        
        // Chat messages within a game room
        match /messages/{messageId} {
            allow read, create: if isAuthenticated() && request.auth.uid in resource.data.players;
        }
    }
    
    // NOTIFICATIONS collection rules
    match /notifications/{notificationId} {
        allow read, create: if isAuthenticated();
        allow update: if isAuthenticated() && request.auth.uid == resource.data.userId;
        allow delete: if isAdmin();
    }

    // FRIEND REQUESTS collection rules
    match /friend_requests/{reqId} {
        allow create: if isAuthenticated();
        allow read, delete: if isAuthenticated() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
    }
    
    // CHATS collection rules
    match /chats/{chatId} {
        allow read, create, update: if isAuthenticated() && request.auth.uid in resource.data.userIds;
        
        match /messages/{messageId} {
            allow read, create: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.userIds;
        }
    }
    
    // SETTINGS collection rules (Admin only write, all users read)
    match /settings/{settingId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
    }
    
    // Bonus campaign rules
    match /signup_bonus_campaigns/{campaignId} {
        allow read: if isAuthenticated();
        allow create, update, delete: if isAdmin();
        
        match /claims/{claimId} {
            allow read: if isAuthenticated() && (isOwner(claimId) || isAdmin());
            allow create: if isAuthenticated() && isOwner(claimId);
        }
    }

    match /daily_bonus_campaigns/{campaignId} {
        allow read: if isAuthenticated();
        allow create, update, delete: if isAdmin();
        
        match /claims/{claimId} {
            allow read: if isAuthenticated();
            allow create: if isAuthenticated() && isOwner(claimId);
        }
    }

    match /deposit_bonus_campaigns/{campaignId} {
        allow read: if isAuthenticated();
        allow create, update, delete: if isAdmin();
        
        match /claims/{claimId} {
            allow read: if isAuthenticated();
            allow create: if isAuthenticated() && isOwner(claimId);
        }
    }
    
    // Referral campaign rules
    match /referral_campaigns/{campaignId} {
        allow read: if isAuthenticated();
        allow create, update, delete: if isAdmin();
    }
    
    // Bonus claims rules (collectionGroup for wider access checking)
    match /{path=**}/bonus_claims/{claimId} {
        allow read: if isAuthenticated() && (isOwner(get(path).data.userId) || isAdmin());
        allow create: if isAuthenticated();
        allow update: if isAdmin();
    }
  }
}
