rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check for admin role
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Admins can read and write anything
    match /{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Rules for the 'users' collection
    match /users/{userId} {
      // Any authenticated user can create their own user document
      allow create: if request.auth != null;
      // Users can read/update their own document. Admins can do anything.
      allow read, update: if request.auth.uid == userId || isAdmin();
      // Allow authenticated users to read public profiles
      allow get: if request.auth != null;

      // Rules for user subcollections
      match /{subcollection}/{docId} {
        allow read, write: if request.auth.uid == userId || isAdmin();
      }
    }
    
    // Rules for game rooms
    match /game_rooms/{roomId} {
      // Anyone can see public game rooms
      allow read: if request.auth != null;
      // Authenticated users can create rooms
      allow create: if request.auth != null;
      // Only the creator can update a waiting room, or players in the game can update it.
      allow update: if (request.auth != null && resource.data.createdBy.uid == request.auth.uid && resource.data.status == 'waiting') || (request.auth != null && request.auth.uid in resource.data.players);
       // The creator can delete a waiting room
      allow delete: if request.auth != null && resource.data.createdBy.uid == request.auth.uid && resource.data.status == 'waiting';

      // Chat messages within a game room
      match /messages/{messageId} {
        allow read, create: if request.auth != null && request.auth.uid in resource.data.players;
      }
    }

    // Rules for private chats
    match /chats/{chatId} {
        allow read, update, create: if request.auth != null && request.auth.uid in resource.data.userIds;
        match /messages/{messageId} {
            allow read, create: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.userIds;
        }
    }

    // Rules for various settings collections
    match /settings/{settingId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    match /referral_campaigns/{campaignId} {
        allow read: if request.auth != null;
        allow write: if isAdmin();
    }

    match /daily_bonus_campaigns/{campaignId} {
        allow read: if request.auth != null;
        allow write: if isAdmin();
    }

    match /marketing_applications/{appId} {
        allow create: if request.auth == null;
        allow read, update: if isAdmin();
    }

     match /notifications/{notificationId} {
        allow read, update: if request.auth.uid == resource.data.userId;
        allow create: if request.auth != null;
    }

    match /transactions/{transactionId} {
        allow read, create: if request.auth.uid == resource.data.userId || isAdmin();
        allow update: if isAdmin();
    }
    
    match /bonus_claims/{claimId} {
        allow read, create, update: if request.auth.uid == resource.data.userId || isAdmin();
    }
  }
}
