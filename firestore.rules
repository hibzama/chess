rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =================================
    // Helper Functions
    // =================================

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isPlayer(room) {
      return request.auth.uid in room.players;
    }

    function isJoining(room) {
      return request.auth.uid == request.resource.data.player2.uid;
    }

    // =================================
    // Collections
    // =================================

    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isOwner(userId);
      
      // Allow user to update their own non-critical fields.
      // Allow balance/role changes only by admins or specific transactions.
      allow update: if (isOwner(userId) && 
                      !("balance" in request.resource.data) && 
                      !("bonusBalance" in request.resource.data) && 
                      !("marketingBalance" in request.resource.data) && 
                      !("role" in request.resource.data)) 
                    || isAdmin();
    }

    match /game_rooms/{roomId} {
      allow read, list: if isSignedIn();
      allow create: if isSignedIn() && isOwner(request.resource.data.createdBy.uid);
      allow delete: if isSignedIn() && isOwner(resource.data.createdBy.uid);

      // Allow updates for joining, playing, or completing a game
      allow update: if isSignedIn() && isPlayer(resource.data);
    }
    
    match /game_rooms/{roomId}/messages/{messageId} {
      allow read, create: if isSignedIn() && isPlayer(get(/databases/$(database)/documents/game_rooms/$(roomId)).data);
    }

    match /transactions/{transactionId} {
      allow read, list: if (isSignedIn() && isOwner(resource.data.userId)) || isAdmin();
      allow create: if isSignedIn();
      allow update: if isAdmin();
    }

    match /friend_requests/{requestId} {
      allow read: if isSignedIn() && (isOwner(resource.data.fromId) || isOwner(resource.data.toId));
      allow create: if isSignedIn() && isOwner(request.resource.data.fromId);
      allow delete: if isSignedIn() && (isOwner(resource.data.fromId) || isOwner(resource.data.toId));
    }
    
    match /chats/{chatId} {
        allow read, write, list: if isSignedIn() && request.auth.uid in chatId.split('_');
        match /messages/{messageId} {
            allow read, create: if isSignedIn() && request.auth.uid in chatId.split('_');
        }
    }

    match /notifications/{notificationId} {
        allow read, list, update: if isSignedIn() && isOwner(resource.data.userId);
        allow create: if isSignedIn();
    }

    match /marketing_applications/{appId} {
        allow create; 
        allow read, update, delete: if isAdmin();
    }
    
    match /settings/{docId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    match /bonuses/{bonusId} {
        allow read, list: if isSignedIn();
        allow create, update, delete: if isAdmin();
    }

    match /dailyBonusClaims/{claimId} {
      allow read, create, update: if isSignedIn();
    }

    match /users/{userId}/daily_bonus_claims/{claimId} {
        allow read, write: if isOwner(userId);
    }

    match /events/{eventId} {
      allow read, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }

    match /users/{userId}/event_enrollments/{enrollmentId} {
      allow read, write: if isOwner(userId);
      match /progress_history/{progressId} {
        allow read: if isOwner(userId);
        allow create: if isOwner(userId); // Should be done by backend, but allow for now
      }
    }
  }
}
