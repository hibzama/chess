rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      // Users can read/write their own data.
      allow read, write: if request.auth.uid == userId;
      // Any authenticated user can create a user doc (on signup).
      allow create: if request.auth != null;
      
      // Allow authenticated users to list users (for friend suggestions, etc.)
      // but not to get the whole collection. The queries must be specific.
      allow list: if request.auth != null;

      match /event_enrollments/{enrollmentId} {
        allow read, write: if request.auth.uid == userId;
      }

       match /daily_bonus_claims/{claimId} {
        allow read, write: if request.auth.uid == userId;
      }
    }

    match /game_rooms/{roomId} {
      // Any authenticated user can see a game room.
      allow read: if request.auth != null;
      // Only the creator can create a room.
      allow create: if request.auth.uid == request.resource.data.createdBy.uid;
      // Only players in the game can update it.
      allow update: if request.auth.uid in resource.data.players;
      // Creator can delete their own waiting room.
      allow delete: if request.auth.uid == resource.data.createdBy.uid && resource.data.status == 'waiting';
    }
    
    match /chats/{chatId} {
      // Only participants can read/write to a chat.
      allow read, write: if request.auth.uid in resource.data.users;
      match /messages/{messageId} {
        // Only participants can read/write messages.
        allow read, write: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
      }
    }

    match /friend_requests/{requestId} {
      allow read, write: if request.auth.uid == request.resource.data.toId || request.auth.uid == request.resource.data.fromId;
      allow create: if request.auth.uid == request.resource.data.fromId;
      allow delete: if request.auth.uid == resource.data.toId || request.auth.uid == resource.data.fromId;
    }
    
    match /notifications/{notificationId} {
        allow read, update: if request.auth.uid == resource.data.userId;
        allow create: if request.auth != null;
    }
    
    match /marketing_applications/{appId} {
        allow create; // Public can apply
        allow read, update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    match /settings/{settingId} {
      allow read;
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /events/{eventId} {
      // Any logged-in user can see the list of events.
      allow get, list: if request.auth != null;
      // Only admins can create or change events.
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
     match /dailyBonusClaims/{bonusId} {
      allow read;
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
     match /bonuses/{bonusId} {
      // Any logged-in user can see available bonuses
      allow get, list: if request.auth != null;
      // Only admins can write
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /transactions/{transactionId} {
      allow create: if request.auth.uid == request.resource.data.userId;
      // User can see their own transactions, admins can see all.
      allow read, update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' || request.auth.uid == resource.data.userId;
    }
  }
}
