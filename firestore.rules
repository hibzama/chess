rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check for admin role
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // USER-RELATED RULES
    match /users/{userId} {
      // Any authenticated user can read any user's profile
      allow read: if request.auth != null;
      
      // A user can only create their own document
      allow create: if request.auth.uid == userId;

      // A user can only update their own document
      // Admins can update any user document
      allow update: if request.auth.uid == userId || isAdmin();
      
      // Only admins can delete users
      allow delete: if isAdmin();

      // Rules for user subcollections
      match /{subcollection}/{docId} {
        // A user can read/write to their own subcollections
        allow read, write: if request.auth.uid == userId;
        // Admins can delete from any user's subcollections (e.g., for campaign cleanup)
        allow delete: if isAdmin();
      }
    }

    // GAME-RELATED RULES
    match /game_rooms/{roomId} {
      // Any authenticated user can read game rooms
      allow read: if request.auth.uid != null;
      
      // Allow creating a room if the creator is the authenticated user
      allow create: if request.auth.uid == request.resource.data.createdBy.uid;

      // Allow joining a room (updating from 'waiting')
      // Allow playing a move (updating from 'in-progress')
      // Allow ending a game (updating to 'completed') by an admin or by the game function
      allow update: if request.auth.uid != null;
      
      // Allow deleting a room if it's in 'waiting' state and the user is the creator
      allow delete: if resource.data.status == 'waiting' && request.auth.uid == resource.data.createdBy.uid;
      
      // Messages subcollection within a game room
      match /messages/{messageId} {
        allow read, create: if request.auth.uid in resource.data.players || get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players.hasAny([request.auth.uid]);
      }
    }

    // TRANSACTION & BONUS-RELATED RULES
    match /transactions/{transactionId} {
        // Any authenticated user can create a transaction log
        allow create: if request.auth != null;
        // Only admins can update/delete transactions
        allow update, delete: if isAdmin();
        // Any authenticated user can read transactions
        allow read: if request.auth != null;
    }

    // BONUS CAMPAIGN RULES
    match /signup_bonus_campaigns/{campaignId} {
        allow read: if request.auth != null;
        allow write: if isAdmin();
        
        match /claims/{claimId} {
            allow read, create: if request.auth.uid == claimId;
            allow write: if isAdmin();
        }
    }
    match /daily_bonus_campaigns/{campaignId} {
        allow read: if request.auth != null;
        allow write: if isAdmin();

        match /claims/{claimId} {
            allow read, create: if request.auth.uid == claimId;
            allow write: if isAdmin();
        }
    }
    match /deposit_bonus_campaigns/{campaignId} {
        allow read: if request.auth != null;
        allow write: if isAdmin();

        match /claims/{claimId} {
            allow read, create: if request.auth.uid == claimId;
            allow write: if isAdmin();
        }
    }
    
    // REFERRAL CAMPAIGN RULES
    match /referral_campaigns/{campaignId} {
      // Any logged-in user can view available campaigns
      allow read: if request.auth != null;
      // Only admins can create/update/delete campaigns
      allow write: if isAdmin();
    }
    
    // This allows admins to query all bonus claims across all users
    match /{path=**}/bonus_claims/{claimId} {
        allow read: if isAdmin();
    }

    match /bonus_claims/{claimId} {
      // A user can create a claim for themselves
      allow create: if request.auth.uid == request.resource.data.userId;
      // An admin can read/update any claim (for approval/rejection)
      allow read, update: if isAdmin();
    }

    // SETTINGS & OTHER ADMIN-WRITABLE COLLECTIONS
    match /settings/{settingId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    match /marketing_applications/{appId} {
      // Anyone can submit an application
      allow create: if request.auth == null || request.auth != null;
      allow read, write: if isAdmin();
    }

    match /notifications/{notificationId} {
        // Users can only read their own notifications
        allow read: if request.auth.uid == resource.data.userId;
        // Users can update their own notifications (e.g., mark as read)
        allow update: if request.auth.uid == resource.data.userId;
        // System/Admin can create notifications
        allow create: if request.auth.uid != null;
    }
  }
}
