rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users can read/update their own data.
    // Allow any authenticated user to read public profile data.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow update: if request.auth.uid == userId;
      allow create: if request.auth.uid == userId;
    }

    // Friend requests can be created by the sender.
    // They can only be deleted (which is how they are accepted/declined).
    match /friend_requests/{requestId} {
      allow create: if request.auth != null && request.resource.data.fromId == request.auth.uid;
      allow delete: if request.auth != null;
      allow read, update: if false; // Nobody can read/update directly
    }

    // Notifications can be created for other users.
    match /notifications/{notificationId} {
      allow create: if request.auth != null;
      allow update: if request.auth.uid == resource.data.userId; // User can update their own notification (e.g., mark as read)
      allow read, delete: if request.auth.uid == resource.data.userId;
    }

    // Game rooms security
    match /game_rooms/{roomId} {
      allow read: if request.auth != null;
      // Allow creation if the user is the one creating it.
      allow create: if request.auth.uid == request.resource.data.createdBy.uid;
      // Allow joining (update) if the room is waiting and the user is not the creator.
      allow update: if request.auth != null && resource.data.status == 'waiting' || resource.data.players.hasAny([request.auth.uid]);
      // Only the creator can delete a waiting room.
      allow delete: if request.auth.uid == resource.data.createdBy.uid && resource.data.status == 'waiting';
    }
    
    match /game_rooms/{roomId}/messages/{messageId} {
        allow read, create: if request.auth != null && exists(/databases/$(database)/documents/game_rooms/$(roomId)) && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
    }
    
    // Transactions security
    match /transactions/{transactionId} {
      // Users can only create transactions for themselves
      allow create: if request.auth.uid == request.resource.data.userId;
      // Users can only read their own transactions
      allow read: if request.auth.uid == resource.data.userId;
      // No one can update or delete transactions from the client
      allow update, delete: if false;
    }

    // Settings can be read by any authenticated user (for bonuses)
    match /settings/{settingId} {
      allow read: if request.auth != null;
      // Only admins should write to settings (this requires custom claims)
      allow write: if false; 
    }
    
    // Marketing applications can be created by anyone
    match /marketing_applications/{appId} {
        allow create: if true;
        allow read, update, delete: if false;
    }

    // Allow logged-in users to read referral tasks
    match /referral_tasks/{taskId} {
      allow read: if request.auth != null;
      allow write: if false; // Only admins from backend
    }

    // Daily bonus configs can be read
    match /bonuses/{bonusId} {
      allow read: if request.auth != null;
      allow write: if false; // Admin only
    }

    // Bonus claim documents
    match /bonus_claims/{claimId} {
      allow create: if request.auth != null && request.resource.data.newUserId == request.auth.uid || request.resource.data.referrerId == request.auth.uid;
      allow read, update, delete: if false; // Admin only
    }

     // Daily bonus claims counters and user lists
    match /dailyBonusClaims/{bonusId} {
      // Users can only trigger an update via a transaction, not write directly
      allow read: if request.auth != null;
      allow write: if false;
    }

    // Users can create/read/update their own subcollection docs
    match /users/{userId}/{subcollection}/{docId} {
      allow read, write: if request.auth.uid == userId;
    }

     // Chat system security
    match /chats/{chatId} {
      // A user can only read/write to chats they are a part of
      allow read, write: if request.auth.uid in resource.data.userIds;
    }

    match /chats/{chatId}/messages/{messageId} {
      // A user can only read/write messages in chats they are a part of
      allow read, create: if request.auth != null && get(/databases/$(database)/documents/chats/$(chatId)).data.userIds.hasAny([request.auth.uid]);
      allow update, delete: if request.auth.uid == resource.data.senderId;
    }
  }
}
