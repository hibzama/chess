rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuth() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Users collection
    match /users/{userId} {
      // Allow any authenticated user to read any user profile.
      // This is necessary for game joining, viewing friend profiles, and leaderboards.
      // Write access remains strictly controlled.
      allow read: if isAuth();

      // Users can only create their own document. Admins can create any.
      allow create: if isOwner(userId) || isAdmin();

      // Users can only update specific fields on their own document. Admins can update any field.
      allow update: if (isOwner(userId) && request.resource.data.keys().hasOnly(['firstName', 'lastName', 'photoURL', 'equipment', 'binancePayId'])) || isAdmin();

      // Subcollections for users
      match /active_campaigns/{docId} {
        allow read, write: if isOwner(userId);
      }
    }
    
    // Marketing applications
    match /marketing_applications/{appId} {
        // Only admins can read applications
        allow read, write: if isAdmin();
        // Anyone can create an application
        allow create: if true;
    }

    // Settings collection
    match /settings/{settingId} {
        // Only admins can read/write settings
        allow read, write: if isAdmin();
    }
    
    // Game Rooms
    match /game_rooms/{roomId} {
        allow read: if isAuth();
        allow create: if isAuth() && request.resource.data.createdBy.uid == request.auth.uid;
        allow update: if isAuth() && request.auth.uid in resource.data.players;
        allow delete: if isAuth() && resource.data.createdBy.uid == request.auth.uid;
        
        match /messages/{messageId} {
            allow read, create: if isAuth() && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
        }
    }
    
    // Chats
    match /chats/{chatId} {
        allow read, update, create: if isAuth() && request.auth.uid in resource.data.userIds;
        
        match /messages/{messageId} {
             allow read, create: if isAuth() && get(/databases/$(database)/documents/chats/$(chatId)).data.userIds.hasAny([request.auth.uid]);
        }
    }
    
    // Notifications
    match /notifications/{notificationId} {
        allow read, update: if isAuth() && resource.data.userId == request.auth.uid;
        allow create: if isAuth();
    }
    
    // Transactions
    match /transactions/{transactionId} {
        allow read: if isAuth() && (resource.data.userId == request.auth.uid || isAdmin());
        allow create: if isAuth(); // Cloud Functions will handle security
        allow update, delete: if isAdmin();
    }
    
    // Campaigns
    match /signup_bonus_campaigns/{campaignId} {
        allow read, list: if isAuth();
        allow write: if isAdmin();
    }
    match /deposit_bonus_campaigns/{campaignId} {
        allow read, list: if isAuth();
        allow write: if isAdmin();
        match /claims/{claimId} {
            allow read, create: if isOwner(claimId) || isAdmin();
        }
    }
    match /referral_campaigns/{campaignId} {
        allow read, list: if isAuth();
        allow write: if isAdmin();
    }
    match /tasks/{taskId} {
      allow read, list: if isAuth();
      allow write: if isAdmin();
    }
    
    // Bonus Claims (root collection)
    match /bonus_claims/{claimId} {
      allow read: if isAdmin() || (isAuth() && resource.data.userId == request.auth.uid);
      allow create: if isAuth();
      allow update: if isAdmin();
    }
    
    // Friend Requests
    match /friend_requests/{requestId} {
        allow read, create, delete: if isAuth();
    }
  }
}
