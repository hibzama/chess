rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =================================
    // Helper Functions
    // =================================

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isPlayer(room) {
        return request.auth.uid in room.players;
    }

    // =================================
    // Collections
    // =================================

    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isOwner(userId) && !exists(/databases/$(database)/documents/users/$(userId));
      
      allow update: if (isOwner(userId) && 
                      // Allow users to update their own non-critical fields
                      (request.resource.data.diff(resource.data).affectedKeys()
                        .hasOnly(['firstName', 'lastName', 'phone', 'address', 'city', 'country', 'gender', 'photoURL', 'friends', 'equipment'])) ||
                      // Allow a user's balance to change ONLY when they are enrolling in an event
                      (isOwner(userId) && request.resource.data.balance != resource.data.balance && 
                       existsAfter(/databases/$(database)/documents/users/$(userId)/event_enrollments/$(request.resource.data.enrollingEventId))) ||
                      // Admins can update anything
                      isAdmin());
    }

    match /game_rooms/{roomId} {
      allow read, list: if isSignedIn();
      allow create: if isSignedIn() && isOwner(request.resource.data.createdBy.uid);
      allow delete: if isSignedIn() && isOwner(resource.data.createdBy.uid) && resource.data.status == 'waiting';

      allow update: if isSignedIn() && (
        // Case 1: Joining a room
        (resource.data.status == 'waiting' && request.resource.data.status == 'in-progress' && request.resource.data.player2.uid == request.auth.uid) ||
        // Case 2: Playing a move
        (isPlayer(resource.data) && resource.data.status == 'in-progress' && request.resource.data.status == 'in-progress') ||
        // Case 3: Completing the game (by a player)
        (isPlayer(resource.data) && resource.data.status == 'in-progress' && request.resource.data.status == 'completed') ||
        // Admin override
        isAdmin()
      );

      match /messages/{messageId} {
        allow read, create: if isPlayer(get(/databases/$(database)/documents/game_rooms/$(roomId)).data);
      }
    }

    match /transactions/{transactionId} {
      allow read, list: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isSignedIn();
      allow update: if isAdmin();
    }
    
    match /settings/{docId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    match /marketing_applications/{appId} {
        allow create; 
        allow read, update, delete: if isAdmin();
    }

    match /friend_requests/{requestId} {
      allow read, delete: if isSignedIn() && (isOwner(resource.data.fromId) || isOwner(resource.data.toId));
      allow create: if isSignedIn() && isOwner(request.resource.data.fromId);
    }

    match /chats/{chatId} {
      allow read, write: if isSignedIn() && request.auth.uid in chatId.split('_');
      match /messages/{messageId} {
        allow read, create: if isSignedIn() && request.auth.uid in chatId.split('_');
      }
    }

    match /notifications/{notificationId} {
      allow read, list, update: if isOwner(resource.data.userId);
      allow create: if isSignedIn();
    }
    
    match /events/{eventId} {
      allow read, list: if isSignedIn();
      allow create, update, delete: if isAdmin();

       match /event_enrollments/{userId} {
         allow read, list: if isAdmin();
       }
    }
    
    match /users/{userId}/event_enrollments/{enrollmentId} {
        allow read: if isOwner(userId) || isAdmin();
        allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId; // Ensure user can only write to their own subcollection
        
        match /progress_history/{progressId} {
            allow read: if isOwner(userId);
            allow write: if false; // Only backend can write here
        }
    }
    
    match /bonuses/{bonusId} {
        allow read, list: if isSignedIn();
        allow create, update, delete: if isAdmin();
    }

    match /dailyBonusClaims/{claimId} {
      allow read, write: if isSignedIn();
    }

    match /users/{userId}/daily_bonus_claims/{claimId} {
        allow read, write: if isOwner(userId);
    }
  }
}
