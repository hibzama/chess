
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Admin-only access to settings
    match /settings/{settingId} {
      allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Rules for user profiles
    match /users/{userId} {
        // A user can create their own document upon signup
        allow create: if request.auth != null && request.auth.uid == userId;
        // Any authenticated user can read public user profiles
        allow read: if request.auth != null;
        // A user can only update their own document.
        // Admins can update any user document.
        allow update: if (request.auth != null && request.auth.uid == userId) ||
                         (request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
        // Only admins can delete user documents
        allow delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';

        // Allow users to read their own daily bonus claims
        match /daily_bonus_claims/{campaignId} {
            allow read: if request.auth != null && request.auth.uid == userId;
            allow create: if request.auth != null && request.auth.uid == userId;
        }

         match /active_campaigns/{campaignDocId} {
            allow read, write, delete: if request.auth.uid == userId;
        }

         match /bonus_claims/{claimId} {
            allow read: if request.auth.uid == userId;
        }
    }
    
     // Rules for game rooms
    match /game_rooms/{roomId} {
        // Anyone can read a public game room or a private one they are a part of
        allow read: if resource.data.isPrivate == false || request.auth.uid in resource.data.players;
        // Authenticated users can create game rooms
        allow create: if request.auth != null;
        // Only players in the game can update it
        allow update: if request.auth.uid in resource.data.players;
        // Only the creator can delete a waiting room
        allow delete: if request.auth.uid == resource.data.createdBy.uid && resource.data.status == 'waiting';
        
        match /messages/{messageId} {
            allow read, create: if request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
        }
    }
    
    // Rules for transactions
    match /transactions/{transactionId} {
        // A user can only create and read their own transactions
        allow read, create: if request.auth != null && request.resource.data.userId == request.auth.uid;
        // Admins can read all transactions for auditing
        allow list: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        // No one can update or delete transactions to maintain integrity
        allow update, delete: if false;
    }

    // Rules for marketing applications
    match /marketing_applications/{appId} {
        // Anyone can create an application
        allow create: if true;
        // Only admins can read/write applications
        allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Rules for chats
    match /chats/{chatId} {
      allow read, update: if request.auth.uid in resource.data.userIds;
      allow create: if request.auth != null && request.auth.uid in request.resource.data.userIds;
      
      match /messages/{messageId} {
        allow read, create: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.userIds;
      }
    }
    
    // Rules for friend requests
    match /friend_requests/{reqId} {
        allow read, delete: if request.auth.uid == resource.data.toId || request.auth.uid == resource.data.fromId;
        allow create: if request.auth != null && request.auth.uid == request.resource.data.fromId;
    }

     // Rules for notifications
    match /notifications/{notifId} {
        allow read, update: if request.auth != null && request.auth.uid == resource.data.userId;
        allow create: if request.auth != null;
    }

    // Rules for all bonus campaigns - public read
    match /{collectionName}/{campaignId} 
    where collectionName in ['signup_bonus_campaigns', 'daily_bonus_campaigns', 'deposit_bonus_campaigns', 'referral_campaigns'] {
        allow get: if request.auth != null;
        allow list: if request.auth != null;
        allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
     match /bonus_claims/{claimId} {
        // Users can create their own bonus claims
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
        // Admins can read/update all claims
        allow read, update: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        // Users can read their own claims
        allow list: if request.auth != null;
     }

  }
}
