rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isMarketer() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'marketer';
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    match /users/{userId} {
      allow read, create;
      allow update: if isOwner(userId) && 
                       (
                         // Allow updating most fields except for balance-related and role
                         request.resource.data.diff(resource.data).affectedKeys()
                           .hasOnly(['firstName', 'lastName', 'phone', 'address', 'city', 'country', 'gender', 'photoURL', 'equipment', 'friends', 'binancePayId']) ||
                         // Allow balance update ONLY when enrolling in an event
                         (
                            request.resource.data.balance == resource.data.balance - request.resource.data.enrollingEventFee &&
                            existsAfter(/databases/$(database)/documents/users/$(userId)/event_enrollments/$(request.resource.data.enrollingEventId))
                         )
                       ) ||
                     isAdmin();
    }
    
    match /users/{userId}/event_enrollments/{enrollmentId} {
        allow read, write: if isOwner(userId);
    }
    
    match /users/{userId}/daily_bonus_claims/{bonusId} {
        allow read, write: if isOwner(userId);
    }

    match /game_rooms/{roomId} {
      allow read;
      allow create: if request.auth.uid == request.resource.data.createdBy.uid;
      allow update: if (
        // Case 1: A player is joining a 'waiting' game
        resource.data.status == 'waiting' &&
        request.resource.data.status == 'in-progress' &&
        request.auth.uid == request.resource.data.player2.uid &&
        getAfter(/databases/$(database)/documents/users/$(request.resource.data.createdBy.uid)).data.balance >= 0 &&
        getAfter(/databases/$(database)/documents/users/$(request.auth.uid)).data.balance >= 0
      ) || (
        // Case 2: An in-progress game is being updated by one of the players
        resource.data.status == 'in-progress' &&
        request.auth.uid in resource.data.players
      ) || (
        // Case 3: Admin intervention
        isAdmin()
      );
      allow delete: if request.auth.uid == resource.data.createdBy.uid || isAdmin();
      
      match /messages/{messageId} {
        allow read, create: if request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
      }
    }
    
    match /notifications/{notificationId} {
        allow read, write: if isOwner(get(/databases/$(database)/documents/notifications/$(notificationId)).data.userId);
    }
    
    match /chats/{chatId} {
        allow read, write: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
        
        match /messages/{messageId} {
            allow read, create: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
        }
    }
    
    match /marketing_applications/{appId} {
      allow create;
      allow read, update: if isAdmin();
    }

    match /transactions/{transactionId} {
      allow read, create: if request.auth.uid != null;
      allow update: if isAdmin();
    }
    
    match /events/{eventId} {
        allow read;
        allow create, update, delete: if isAdmin();
    }
    
    match /event_enrollments/{eventId}/users/{userId} {
        allow read, write: if isAdmin() || isOwner(userId);
    }
    
    match /bonuses/{bonusId} {
        allow read;
        allow create, update, delete: if isAdmin();
    }
    
    match /dailyBonusClaims/{bonusId} {
        allow read, write: if request.auth.uid != null;
    }

    match /settings/{settingId} {
      allow read;
      allow write: if isAdmin();
    }
  }
}
