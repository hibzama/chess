rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Admins can do anything
    match /{document=**} {
      function isAdmin() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }
      allow read, write: if isAdmin();
    }
    
    // Allow any authenticated user to read from any collection.
    // This is necessary for complex queries like finding referrals.
    // Write access is still restricted on a per-collection basis.
    match /{document=**} {
        allow read: if request.auth != null;
    }

    // Users can only write to their own document.
    match /users/{userId} {
      allow write: if request.auth.uid == userId;
    }
    
    // Users can read/write their own subcollections.
    match /users/{userId}/{document=**} {
      allow read, write: if request.auth.uid == userId;
    }
    
    // Any authenticated user can create transactions for themselves.
    match /transactions/{transactionId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }
    
    // Any authenticated user can create a bonus claim for themselves.
    match /bonus_claims/{claimId} {
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }

    match /game_rooms/{roomId} {
      // Any authenticated user can create a room.
      allow create: if request.auth != null;
      // Allow a user to update a room only if they are joining it.
      allow update: if request.auth != null && resource.data.status == 'waiting' && request.resource.data.status == 'in-progress';
      // Allow a user to delete their own waiting room.
      allow delete: if request.auth.uid == resource.data.createdBy.uid && resource.data.status == 'waiting';
    }
    
    // Marketing applications can be created by anyone.
    match /marketing_applications/{appId} {
        allow create: if true;
    }
    
  }
}
