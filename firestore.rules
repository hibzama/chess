rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =================================
    // Helper Functions
    // =================================

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function getDoc(path) {
      return get(/databases/$(database)/documents/$(path));
    }

    function incomingDoc() {
      return request.resource.data;
    }
    
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // =================================
    // Collections
    // =================================

    // Admins can do anything
    match /{document=**} {
      allow write: if isAdmin();
    }
    
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isOwner(userId) && !exists(/databases/$(database)/documents/users/$(userId));
      allow update: if 
        (isOwner(userId) && !(
            'balance' in incomingDoc() && incomingDoc().balance != resource.data.balance
          ) && !(
            'marketingBalance' in incomingDoc() && incomingDoc().marketingBalance != resource.data.marketingBalance
          ) && !(
            'role' in incomingDoc() && incomingDoc().role != resource.data.role
          )
        ) ||
        (isSignedIn() && exists(/databases/$(database)/documents/friend_requests/$(request.resource.data.requestId))) ||
        (isSignedIn() && !(userId in incomingDoc().friends) && (userId in resource.data.friends)) ||
        isAdmin() ||
        (isSignedIn() && ('balance' in incomingDoc()));
    }
    
    match /friend_requests/{requestId} {
      allow read: if isSignedIn() && (isOwner(resource.data.fromId) || isOwner(resource.data.toId));
      allow create: if isSignedIn() && isOwner(request.resource.data.fromId);
      allow delete: if isSignedIn() && (isOwner(resource.data.fromId) || isOwner(resource.data.toId));
    }
    
    match /game_rooms/{roomId} {
      allow read: if isSignedIn() && (request.auth.uid in resource.data.players || isAdmin());
      allow list: if isSignedIn(); // For public lobby
      allow create: if isSignedIn() && isOwner(request.resource.data.createdBy.uid);
      allow delete: if isSignedIn() && isOwner(resource.data.createdBy.uid);
      allow update: if isSignedIn() && 
        (
          !isOwner(resource.data.createdBy.uid) &&
          resource.data.status == 'waiting' &&
          request.resource.data.status == 'in-progress' &&
          request.resource.data.player2.uid == request.auth.uid &&
          !(request.auth.uid in resource.data.players) &&
          (request.auth.uid in request.resource.data.players)
        ) ||
        (
          (isOwner(resource.data.createdBy.uid) || (resource.data.player2 != null && isOwner(resource.data.player2.uid))) &&
          resource.data.status == 'in-progress'
        ) ||
        isAdmin();
    }
    
    match /transactions/{transactionId} {
      allow read, list: if (isSignedIn() && isOwner(resource.data.userId)) || isAdmin();
      allow create: if isSignedIn();
      allow update: if isAdmin();
    }
    
    match /notifications/{notificationId} {
        allow read, list, update: if isSignedIn() && isOwner(resource.data.userId);
        allow create: if isSignedIn();
    }
    
    match /marketing_applications/{appId} {
        allow create; 
        allow read, update, delete: if isAdmin();
    }
    
    match /settings/{docId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    match /game_rooms/{roomId}/messages/{messageId} {
      allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
    }

    match /chats/{chatId} {
        // A user can read/write to a chat if their UID is a key in the 'users' map.
        allow read, write, list: if isSignedIn() && request.auth.uid in resource.data.users;
        
        match /messages/{messageId} {
            // A user can read/create messages if they are a participant of the parent chat.
            allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
        }
    }
  }
}
