rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper Functions
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isJoiningGame(requestData, resourceData) {
      return requestData.status == 'in-progress' && resourceData.status == 'waiting';
    }

    // USER rules:
    // Read: Any authenticated user can read any user's profile.
    // Write: A user can only write to their own document.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if isOwner(userId) || isAdmin();
      
      // Allow users to manage their own subcollections
      match /{subcollection}/{docId} {
        allow read, write: if isOwner(userId);
      }
    }

    // GAME ROOM rules:
    // Read: Any authenticated user can see public game rooms.
    // Create: Any authenticated user can create a game room.
    // Update: A user can only update a room if they are joining it. Admins have full access.
    match /game_rooms/{roomId} {
      allow read, create: if request.auth != null;
      allow update, delete: if isOwner(resource.data.createdBy.uid) || isAdmin() || isJoiningGame(request.resource.data, resource.data);
    }
    
    // CHAT rules:
    // A user can only read/write to chats they are a part of.
    match /chats/{chatId} {
        allow read, write: if request.auth.uid in resource.data.userIds;
        
        match /messages/{messageId} {
            allow read, write: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.userIds;
        }
    }

    // TRANSACTION rules:
    // Users can create transactions for themselves, but not view others' unless they are admin.
    match /transactions/{transactionId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isOwner(request.resource.data.userId);
      allow update, delete: if isAdmin();
    }

    // BONUS CAMPAIGN rules:
    // Read: All authenticated users can read all active bonus campaigns.
    // Write: Only admins can create/edit campaigns.
    match /signup_bonus_campaigns/{campaignId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
       match /claims/{claimId} {
        allow read, write: if isOwner(claimId) || isAdmin();
      }
    }
    match /daily_bonus_campaigns/{campaignId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
      match /claims/{claimId} {
        allow read, write: if isOwner(claimId) || isAdmin();
      }
    }
     match /deposit_bonus_campaigns/{campaignId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
      match /claims/{claimId} {
        allow read, write: if isOwner(claimId) || isAdmin();
      }
    }
    
    // REFERRAL CAMPAIGN rules:
    // Read: Authenticated users can read the campaigns to participate.
    // Write: Admins manage campaigns.
    match /referral_campaigns/{campaignId} {
        allow read: if request.auth != null;
        allow write: if isAdmin();
    }
    
    // BONUS CLAIM rules:
    // Create: A user can create a claim for themselves.
    // Read/Update: An admin can read/update any claim to approve/reject it. A user can read their own.
    match /bonus_claims/{claimId} {
        allow create: if isOwner(request.resource.data.userId);
        allow read, update: if isAdmin() || isOwner(resource.data.userId);
        allow delete: if isAdmin();
    }

    // NOTIFICATION rules:
    // Users can only read their own notifications.
    match /notifications/{notificationId} {
      allow read, update: if isOwner(resource.data.userId);
      allow create: if request.auth != null; // Allow server-side creation
    }

    // MARKETING APPLICATION rules:
    // Create: Anyone can create (submit) an application.
    // Read/Write: Only admins can read/update them.
    match /marketing_applications/{appId} {
        allow create: if request.auth == null || request.auth != null; // Open for anyone to apply
        allow read, update, delete: if isAdmin();
    }

    // SETTINGS rules:
    // Admins can write to any settings document. Authenticated users can read some settings.
    match /settings/{settingId} {
        allow read: if request.auth != null;
        allow write: if isAdmin();
    }
  }
}