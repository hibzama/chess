rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isAuthenticated() {
      return request.auth != null;
    }

    function getRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }
    
    function isJoiningGame(gameRoomId) {
      let roomBefore = get(/databases/$(database)/documents/game_rooms/$(gameRoomId)).data;
      let roomAfter = request.resource.data;
      
      // The user joining the room is the one making the request.
      let joinerId = request.auth.uid;
      let creatorId = roomBefore.createdBy.uid;
      
      // Ensure the room is moving from 'waiting' to 'in-progress'
      let statusChangeValid = roomBefore.status == 'waiting' && roomAfter.status == 'in-progress';
      
      // Ensure the joiner is correctly added as player2
      let playerAddedCorrectly = roomAfter.player2.uid == joinerId && roomAfter.players[1] == joinerId;
      
      return statusChangeValid && playerAddedCorrectly;
    }

    function isAcceptingFriendRequest(requestId) {
        let req = get(/databases/$(database)/documents/friend_requests/$(requestId)).data;
        // The user accepting is the one the request was sent TO.
        // The user making the update to the other person's doc is the one who SENT the request.
        return req.toId == request.auth.uid && req.status == 'pending';
    }

    // Collection Rules
    match /users/{userId} {
      allow read: if isAuthenticated();

      allow create: if request.auth.uid == userId;
      
      allow update: if isOwner(userId)
                      || (isAuthenticated() && exists(/databases/$(database)/documents/game_rooms/{gameId}) && isJoiningGame(gameId))
                      || (isAuthenticated() && exists(/databases/$(database)/documents/friend_requests/{reqId}) && isAcceptingFriendRequest(reqId));
    }

    match /game_rooms/{roomId} {
      allow read: if isAuthenticated();
      
      // Allow creation if user is authenticated
      allow create: if isAuthenticated();

      // Allow updates if user is a player in the game
      allow update: if isAuthenticated() && request.auth.uid in resource.data.players;
      
      // Allow deletion only if the user is the creator and the room is still waiting
      allow delete: if isAuthenticated() && get(/databases/$(database)/documents/game_rooms/$(roomId)).data.createdBy.uid == request.auth.uid
                    && get(/databases/$(database)/documents/game_rooms/$(roomId)).data.status == 'waiting';

      match /messages/{messageId} {
        allow read, write: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
      }
    }

    match /chats/{chatId} {
        allow get: if isAuthenticated() && request.auth.uid in resource.data.users;
        allow list: if isAuthenticated() && request.auth.uid in resource.data.users;

        match /messages/{messageId} {
            allow read, create: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
        }
    }

    match /transactions/{transactionId} {
        // Users can only read their own transactions
        allow read: if isOwner(get(/databases/$(database)/documents/transactions/$(transactionId)).data.userId);

        // Allow creation under specific conditions (e.g., within a transaction)
        allow create: if isAuthenticated();

        // No direct updates or deletes
        allow update, delete: if false;
    }
    
    match /friend_requests/{requestId} {
        allow read: if isAuthenticated() && (
                        isOwner(resource.data.fromId) || isOwner(resource.data.toId)
                    );
        allow create: if isAuthenticated() && isOwner(request.resource.data.fromId);
        allow update, delete: if isAuthenticated() && (
                                 isOwner(resource.data.fromId) || isOwner(resource.data.toId)
                              );
    }

    match /marketing_applications/{appId} {
      allow create: true;
      allow read, update: if isAuthenticated() && getRole(request.auth.uid) == 'admin';
    }
    
     match /notifications/{notificationId} {
        allow read, update: if isAuthenticated() && isOwner(resource.data.userId);
        allow create: if isAuthenticated();
     }
  }
}
