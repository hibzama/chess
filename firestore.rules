rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions to make rules cleaner
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isUser(userId) {
      return request.auth.uid == userId;
    }

    function isAuthenticated() {
      return request.auth != null;
    }

    // USERS collection
    match /users/{userId} {
      // Admins can read/write any user document
      allow read, write: if isAdmin();
      
      // Any authenticated user can read public profile data
      allow get;
      allow list: if isAuthenticated();

      // A user can only update their own document
      allow update: if isUser(userId);
    }
    
    // GAME_ROOMS collection
    match /game_rooms/{roomId} {
      // Allow anyone to read a game room (for lobbies, etc.)
      allow get: if isAuthenticated();
      allow list: if isAuthenticated();

      // Allow a user to create a room if they are logged in
      allow create: if isAuthenticated() && isUser(request.resource.data.createdBy.uid);
      
      // Allow a user to update a room if:
      // 1. They are joining a waiting room.
      // 2. They are one of the players in an in-progress game.
      allow update: if isAuthenticated() && 
                    (resource.data.status == 'waiting' || request.auth.uid in resource.data.players);

      // Only the creator can delete a waiting room
      allow delete: if isAuthenticated() && isUser(resource.data.createdBy.uid) && resource.data.status == 'waiting';
      
      // Game Chat subcollection
      match /messages/{messageId} {
        allow read, write: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
      }
    }
    
    // TRANSACTIONS collection
    match /transactions/{transactionId} {
        // Admins can read/write any transaction
        allow read, write: if isAdmin();
        
        // A user can read their own transactions
        allow list, get: if isAuthenticated() && get(/databases/$(database)/documents/transactions/$(transactionId)).data.userId == request.auth.uid;
        
        // Allow creating transactions if authenticated (server-side logic handles validation)
        allow create: if isAuthenticated();
    }
    
    // CHATS collection (for direct messages)
    match /chats/{chatId} {
      // Only users involved in the chat can read/write
      allow read, write, update: if isAuthenticated() && request.auth.uid in resource.data.users;
      allow create: if isAuthenticated();

      match /messages/{messageId} {
        allow read, write: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
      }
    }
    
    // FRIEND_REQUESTS collection
    match /friend_requests/{requestId} {
        // Admins can manage all requests
        allow read, write, delete: if isAdmin();
        
        // Users can create requests, and can update/delete their own requests (or requests sent to them)
        allow create: if isAuthenticated() && isUser(request.resource.data.fromId);
        allow update, delete: if isAuthenticated() && (isUser(resource.data.fromId) || isUser(resource.data.toId));
    }

    // NOTIFICATIONS collection
    match /notifications/{notificationId} {
        // A user can only read/update their own notifications
        allow read, update, delete: if isAuthenticated() && isUser(resource.data.userId);
        
        // Server/functions can create notifications
        allow create: if isAuthenticated();
    }
    
     // MARKETING_APPLICATIONS collection
    match /marketing_applications/{appId} {
      // Anyone can create an application
      allow create;
      // Only admins can read/update them
      allow read, update, delete: if isAdmin();
    }
  }
}
