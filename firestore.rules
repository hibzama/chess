rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Admins have read access to everything
    match /{document=**} {
        allow read: if isAdmin();
    }

    // User Profile Rules
    match /users/{userId} {
      // Any signed-in user can get a user's public profile
      allow get: if isSignedIn();
      // Only admins can list all users
      allow list: if isAdmin();
      // A user can only write to their own document
      allow write: if isOwner(userId);
       // Allow anyone to count users for the bonus card
      allow count: if true;
    }

    // Friend Request Rules
    match /friend_requests/{requestId} {
        // You can create a request if you are the sender
        allow create: if isSignedIn() && request.resource.data.fromId == request.auth.uid;
        // You can read, update or delete a request if you are the sender or receiver
        allow read, update, delete: if isSignedIn() && (request.resource.data.fromId == request.auth.uid || request.resource.data.toId == request.auth.uid);
    }
    
    // Game Room Rules
    match /game_rooms/{roomId} {
        // Anyone can see the list of public rooms
        allow list: if request.query.isPrivate == false;
        // Anyone can read a specific public room if it's waiting
        allow get: if resource.data.isPrivate == false && resource.data.status == 'waiting';

        // Logged-in users can create a room, as long as they are listed as a player
        allow create: if isSignedIn() && request.auth.uid in request.resource.data.players;

        // Only players in the game can read or write to it once it's in-progress or completed
        allow read, write: if isSignedIn() && request.auth.uid in resource.data.players;

        // Chat subcollection rules
        match /messages/{messageId} {
            // Only players in the game can read/write chat messages
            allow read, write: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
        }
    }

    // Transaction Rules
    match /transactions/{transactionId} {
        // A user can only create transactions for themselves
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        // A user can only read their own transactions
        allow list, get: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    // Chat Rules (Main DM)
    match /chats/{chatId} {
        // Only involved users can read/write to the chat document
        allow read, write: if isSignedIn() && request.auth.uid in resource.data.users;

        // Message subcollection
         match /messages/{messageId} {
            allow read, write: if isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.users[request.auth.uid].exists == true;
        }
    }
    
    // Notification Rules
    match /notifications/{notificationId} {
        // User can only access their own notifications
        allow read, write, list: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    // Marketing Application Rules
    match /marketing_applications/{applicationId} {
        // Anyone can create an application
        allow create: if true;
        // Only admins can read/write them
        allow read, write: if isAdmin();
    }
  }
}
