
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuth() {
      return request.auth != null;
    }
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    function isPlayer(room) {
      return request.auth.uid in room.data.players;
    }

    match /users/{userId} {
      allow read: if isAuth();
      allow create: if !isAuth(); // Allow user creation during signup
      allow update: if isOwner(userId) || isAdmin();
      
      // Rules for event enrollments subcollection
      match /event_enrollments/{enrollmentId} {
        allow read: if isOwner(userId) || isAdmin();
        // Allow creating an enrollment if the user is paying the fee
        allow create: if isOwner(userId) &&
                      request.resource.data.userId == userId &&
                      getAfter(/databases/$(database)/documents/users/$(userId)).data.balance ==
                      get(/databases/$(database)/documents/users/$(userId)).data.balance - get(/databases/$(database)/documents/events/$(request.resource.data.eventId)).data.enrollmentFee;

        // Allow reading progress history
        match /progress_history/{historyId} {
             allow read: if isOwner(userId) || isAdmin();
        }
      }
    }
    
    // Marketing applications can be created by anyone, read/updated by admin
    match /marketing_applications/{appId} {
      allow create: if !isAuth();
      allow read, update: if isAdmin();
    }

    match /settings/{settingId} {
        allow read: if isAuth();
        allow write: if isAdmin();
    }

    match /transactions/{txId} {
        allow create: if isAuth();
        allow read: if isOwner(resource.data.userId) || isAdmin();
        allow update: if isAdmin();
    }
    
    match /notifications/{notifId} {
        allow read, update, delete: if isOwner(resource.data.userId) || isAdmin();
        allow create: if isAuth();
    }
    
    match /chats/{chatId} {
      allow read, write: if isAuth() && request.auth.uid in resource.data.users;
      match /messages/{messageId} {
        allow read, create: if isAuth() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
      }
    }
    
    match /friend_requests/{reqId} {
        allow read, delete: if isOwner(resource.data.fromId) || isOwner(resource.data.toId) || isAdmin();
        allow create: if isAuth() && isOwner(request.resource.data.fromId);
    }
    
    match /bonuses/{bonusId} {
        allow read: if isAuth();
        allow create, update, delete: if isAdmin();
    }

    match /dailyBonusClaims/{bonusId} {
        allow read, write: if isAuth();
    }
    
    match /events/{eventId} {
        allow read: if isAuth();
        allow create, update, delete: if isAdmin();
    }

    match /game_rooms/{roomId} {
      allow read: if isAuth();
      allow create: if isAuth();
      // Allow listing public, waiting games
      allow list: if isAuth() && request.query.get("where") == [["isPrivate", "==", false], ["status", "==", "waiting"]];

      // Allow a player to join a room OR for the game to be updated by a player
      allow update: if isAuth() && isPlayer(resource);
    }

    // Allow admins to list any collection group they need to.
    match /{path=**}/event_enrollments/{enrollmentId} {
      allow read, list: if isAdmin();
    }
  }
}
