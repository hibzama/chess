
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isTheAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isTheOwner(userId) {
      return request.auth.uid == userId;
    }

    // Collection Rules
    match /users/{userId} {
      allow read: if isUserAuthenticated();
      allow create: if !isUserAuthenticated() || isTheOwner(userId); // Allow creation during sign-up
      allow update, delete: if isTheOwner(userId) || isTheAdmin();
      
      match /active_campaigns/{docId} {
        allow read, write: if isTheOwner(userId);
      }
      
      match /daily_bonus_claims/{docId} {
        allow read, write: if isTheOwner(userId);
      }
    }
    
    match /transactions/{transactionId} {
        allow read: if isUserAuthenticated();
        allow create: if isUserAuthenticated();
        allow update, delete: if isTheAdmin();
    }

    match /game_rooms/{roomId} {
      allow read: if isUserAuthenticated();
      allow create: if isUserAuthenticated();
      // Allow update only if joining a waiting game or if user is part of the game.
      allow update: if isUserAuthenticated() && (
                      (resource.data.status == 'waiting' && request.resource.data.status == 'in-progress' && !(request.auth.uid in resource.data.players))
                      || request.auth.uid in resource.data.players
                    );
      allow delete: if isTheOwner(resource.data.createdBy.uid) || isTheAdmin();
      
      match /messages/{messageId} {
        allow read, create: if isUserAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
      }
    }
    
    match /chats/{chatId} {
      allow read, write: if isUserAuthenticated() && request.auth.uid in resource.data.userIds;
      
      match /messages/{messageId} {
        allow read, create: if isUserAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.userIds;
      }
    }

    match /marketing_applications/{appId} {
        allow read: if isTheAdmin();
        allow create: if true; // Anyone can apply
        allow update: if isTheAdmin();
    }

    match /settings/{settingId} {
        allow read, write: if isTheAdmin();
    }
    
    match /notifications/{notifId} {
      allow read, update: if isUserAuthenticated() && isTheOwner(resource.data.userId);
      allow create: if true; // Can be created by functions
    }
    
    // Bonus & Campaign Rules
    match /signup_bonus_campaigns/{campaignId} {
      allow read: if isUserAuthenticated();
      allow write: if isTheAdmin();
      match /claims/{claimId} {
        allow read, write: if isUserAuthenticated();
      }
    }
    
    match /daily_bonus_campaigns/{campaignId} {
      allow read: if isUserAuthenticated();
      allow write: if isTheAdmin();
       match /claims/{claimId} {
        allow read, write: if isUserAuthenticated();
      }
    }
    
    match /deposit_bonus_campaigns/{campaignId} {
      allow read: if isUserAuthenticated();
      allow write: if isTheAdmin();
      match /claims/{claimId} {
        allow read, write: if isUserAuthenticated();
      }
    }
    
     match /referral_campaigns/{campaignId} {
      allow read: if isUserAuthenticated();
      allow write: if isTheAdmin();
    }

    // Collection Group Rules
    match /{path=**}/bonus_claims/{claimId} {
       allow read, create: if isUserAuthenticated();
       allow update: if isTheAdmin(); // Only admin can approve/reject
    }
  }
}
