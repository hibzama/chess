
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to keep rules DRY
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return isUserAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Default deny all access unless explicitly allowed
    match /{document=**} {
      allow read, write: if false;
    }

    // Admins can do anything
    match /{path=**} {
        allow read, write: if isAdmin();
    }

    // Users collection rules
    match /users/{userId} {
      // Any authenticated user can get public profile data of any other user.
      allow get: if isUserAuthenticated();
      // Users can list other users (for rankings, friends search etc.)
      allow list: if isUserAuthenticated();
       // A user can only write to their own document.
      allow update, delete: if isOwner(userId);
       // Allow anyone to count users for the bonus card.
      allow count: if true;
    }
    
    // Marketing applications can be created by anyone, read by admins.
    match /marketing_applications/{appId} {
        allow create: if true;
        allow read, write: if isAdmin();
    }

    // Friend requests
    match /friend_requests/{requestId} {
        // You can create a request if you are the sender
        allow create: if isUserAuthenticated() && request.resource.data.fromId == request.auth.uid;
        // You can read/update a request if you are the sender or receiver
        allow read, update, delete: if isUserAuthenticated() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
    }
    
    // Notifications can be read/updated only by the assigned user.
    match /notifications/{notificationId} {
        allow read, update, delete: if isUserAuthenticated() && resource.data.userId == request.auth.uid;
        // Creating notifications is handled by backend logic (game actions, friend requests)
        allow create: if false;
    }

    // Game Rooms
    match /game_rooms/{roomId} {
        // Anyone can read public, waiting rooms (for the lobby list)
        allow list: if resource.data.isPrivate == false && resource.data.status == 'waiting';
        
        // You can create a room if you are authenticated and listed as a player
        allow create: if isUserAuthenticated() && request.auth.uid in request.resource.data.players;
        
        // You can get/read a room if you are a player in it
        allow get, read: if isUserAuthenticated() && request.auth.uid in resource.data.players;

        // You can update a room if you are a player and the game is not completed
        allow update: if isUserAuthenticated() && request.auth.uid in resource.data.players && resource.data.status != 'completed';
        
        // Only the creator can delete a waiting room
        allow delete: if isUserAuthenticated() && resource.data.status == 'waiting' && request.auth.uid == resource.data.createdBy.uid;
        
        // Chat messages within a game room
        match /messages/{messageId} {
            // Only players in the game can read/write messages
            allow read, write: if isUserAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
        }
    }
    
    // Chat collection (for direct messages)
    match /chats/{chatId} {
        // Only users involved in the chat can read/write
        allow read, write: if isUserAuthenticated() && request.auth.uid in resource.data.users;
        
         match /messages/{messageId} {
            allow read, write: if isUserAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
        }
    }

    // Transactions
    match /transactions/{transactionId} {
      // Users can only create transactions for themselves.
      allow create: if isUserAuthenticated() && request.resource.data.userId == request.auth.uid;

      // Users can only read their own transactions.
      allow read: if isUserAuthenticated() && resource.data.userId == request.auth.uid;
    }
  }
}
