
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to keep rules DRY
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // USERS
    match /users/{userId} {
      // Anyone can read basic profile data (for rankings, profiles, etc.)
      allow get: if true;
      
      // A user can read their own full document
      allow read: if isUser(userId) || isAdmin();

      // Anyone can create a user account (registration)
      allow create: if true;
      
      // A user can only update their own document
      allow update: if isUser(userId) || isAdmin();
      
      // Only admins can delete users
      allow delete: if isAdmin();
      
      // Allow querying users collection for rankings and friend suggestions
      allow list: if isAuthenticated() || isAdmin();
    }
    
    // GAME ROOMS
    match /game_rooms/{roomId} {
      // Anyone authenticated can view a game room (for lobby)
      allow get: if isAuthenticated();
      
      // Only players in the game can read the full game state
      allow read: if isAuthenticated() && resource.data.players.hasAny([request.auth.uid]) || isAdmin();

      // Any authenticated user can create a game room
      allow create: if isAuthenticated();

      // Allow joining a game, resigning, and playing moves
      allow update: if (isAdmin() || 
                       (isAuthenticated() && 
                        (
                          // A player in the room can make updates (moves, resignations)
                          resource.data.players.hasAny([request.auth.uid]) ||
                          // A new player can join a waiting room
                          (resource.data.status == 'waiting' && !resource.data.players.hasAny([request.auth.uid]))
                        )
                       ));

      // Creator can delete a waiting room
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.createdBy.uid && resource.data.status == 'waiting';

      // Allow querying public games for the lobby
      allow list: if isAuthenticated();
      
      // MESSAGES (subcollection)
      match /messages/{messageId} {
        // Only players in the game can read/write messages
        allow read, write: if isAuthenticated() && get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players.hasAny([request.auth.uid]);
      }
    }

    // TRANSACTIONS
    match /transactions/{transactionId} {
      // User can read their own transactions
      allow get: if isAuthenticated() && resource.data.userId == request.auth.uid;

      // Allow querying for user's own transaction history
      allow list: if isAuthenticated();
      
      // Users can create their own transactions (deposits, withdrawals).
      // The backend handles commission creation.
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      
      // Transactions are immutable except for status updates by admins
      allow update: if isAdmin();
      
      // No one can delete transactions
      allow delete: if false;
    }

    // FRIEND REQUESTS
    match /friend_requests/{requestId} {
      // Only the sender or receiver can read a request
      allow read: if isAuthenticated() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);

      // Anyone authenticated can send a friend request
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.fromId;

      // Only the receiver can update (accept/decline) a request
      allow update: if isAuthenticated() && request.auth.uid == resource.data.toId;
      
      // Only the sender can delete (cancel) a pending request
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.fromId;

      // Allow querying for user's own sent/received requests
      allow list: if isAuthenticated();
    }

    // NOTIFICATIONS
    match /notifications/{notificationId} {
      // A user can read/update their own notifications
      allow read, update, delete: if isUser(resource.data.userId);
      // Backend/system can create notifications
      allow create: if true; 
      // Allow querying for user's own notifications
      allow list: if isAuthenticated();
    }
    
    // MARKETING APPLICATIONS
    match /marketing_applications/{appId} {
       // Anyone can submit an application
       allow create: if true;
       // Only admins can manage applications
       allow read, update, delete: if isAdmin();
       allow list: if isAdmin();
    }
    
    // CHATS (direct messages between friends)
    match /chats/{chatId} {
      // Allow read/write only if the user is a participant in the chat
      allow read, write: if isAuthenticated() && request.auth.uid in resource.data.users;
      
      match /messages/{messageId} {
        // Allow read/write only if the user is a participant in the parent chat
        allow read, write: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
      }
    }
  }
}
