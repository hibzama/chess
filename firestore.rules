rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function getDoc(path) {
      return get(/databases/$(database)/documents/$(path));
    }

    function incomingDoc() {
      return request.resource.data;
    }
    
    // Checks if the user is an admin
    function isAdmin() {
      return isSignedIn() && getDoc('users/' + request.auth.uid).data.role == 'admin';
    }

    // Checks if the user is a participant in a chat
    function isChatParticipant(chatId) {
        return request.auth.uid in getDoc('chats/' + chatId).data.users;
    }

    match /users/{userId} {
      allow read: if isSignedIn();

      allow create: if isOwner(userId) && !exists(/databases/$(database)/documents/users/$(userId));

      allow update: if 
        // Allow user to update their own document, but not change critical fields like role or balance directly.
        (isOwner(userId) && !(
            'balance' in incomingDoc() && incomingDoc().balance != resource.data.balance
          ) && !(
            'marketingBalance' in incomingDoc() && incomingDoc().marketingBalance != resource.data.marketingBalance
          ) && !(
            'role' in incomingDoc() && incomingDoc().role != resource.data.role
          )
        ) ||
        // Allow accepting a friend request (updates both users' friends list)
        (isSignedIn() && exists(/databases/$(database)/documents/friend_requests/$(request.resource.data.requestId))) ||
        // Allow removing a friend (updates both users' friends list)
        (isSignedIn() && !(userId in incomingDoc().friends) && (userId in resource.data.friends)) ||
        // Allow game-related balance updates via transaction
        (isSignedIn() && ('balance' in incomingDoc()));
    }
    
    match /friend_requests/{requestId} {
      allow read: if isSignedIn() && (isOwner(resource.data.fromId) || isOwner(resource.data.toId));
      allow create: if isSignedIn() && isOwner(request.resource.data.fromId);
      allow delete: if isSignedIn() && (isOwner(resource.data.fromId) || isOwner(resource.data.toId));
    }
    
    match /game_rooms/{roomId} {
      allow read, list: if isSignedIn() || isAdmin();
      allow create: if isSignedIn() && isOwner(request.resource.data.createdBy.uid);
      allow delete: if isSignedIn() && isOwner(resource.data.createdBy.uid);

      allow update: if isSignedIn() && 
        // Allow joining a game
        (
          !isOwner(resource.data.createdBy.uid) &&
          resource.data.status == 'waiting' &&
          request.resource.data.status == 'in-progress' &&
          request.resource.data.player2.uid == request.auth.uid &&
          !(request.auth.uid in resource.data.players) &&
          (request.auth.uid in request.resource.data.players)
        ) ||
        // Allow playing a move
        (
          (isOwner(resource.data.createdBy.uid) || isOwner(resource.data.player2.uid)) &&
          resource.data.status == 'in-progress' &&
          request.resource.data.status == 'in-progress'
        ) ||
        // Allow game completion update
        (
           (isOwner(resource.data.createdBy.uid) || isOwner(resource.data.player2.uid)) &&
          resource.data.status == 'in-progress' &&
          request.resource.data.status == 'completed'
        );
    }

    match /transactions/{transactionId} {
      allow read, list: if (isSignedIn() && isOwner(resource.data.userId)) || isAdmin();
      allow create: if isSignedIn();
    }
    
    match /notifications/{notificationId} {
        allow read, list: if isSignedIn() && isOwner(resource.data.userId);
        allow create: if isSignedIn();
        allow update: if isSignedIn() && isOwner(resource.data.userId);
    }
    
    match /marketing_applications/{appId} {
        allow create; 
        allow read, update, delete: if isAdmin();
    }
    
     // Allow chat messages within a game room
    match /game_rooms/{roomId}/messages/{messageId} {
      allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
    }

    // Allow chat messages in direct chats
    match /chats/{chatId} {
      // The user can query chats they are a part of.
      allow list: if isSignedIn();
      // A user can only read/update a chat if they are one of the participants.
      allow read, update, create: if isChatParticipant(chatId);
    }

    match /chats/{chatId}/messages/{messageId} {
      allow read, create: if isChatParticipant(chatId);
    }
  }
}
