rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Users can only read/write their own data, but some fields are publicly readable.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;
    }
    
    // Game rooms can be created by any authenticated user.
    // Public rooms can be read by anyone.
    // Private rooms can only be read by players in them.
    // Updates can only be made by players in the game.
    match /game_rooms/{roomId} {
      allow read: if request.auth != null && (resource.data.isPrivate == false || request.auth.uid in resource.data.players);
      allow create: if request.auth != null;
      allow update: if request.auth != null && request.auth.uid in resource.data.players;
      allow delete: if request.auth != null && request.auth.uid == resource.data.createdBy.uid;
      
      match /messages/{messageId} {
        allow read, write: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
      }
    }
    
    // Transactions can only be read/written by the user they belong to.
    // Cloud Functions will have admin access to create these.
    match /transactions/{transactionId} {
      allow read, write, create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }
    
    // Friend requests can be read by the sender or receiver.
    // They can only be created by the sender.
    // They can only be deleted by sender or receiver.
    match /friend_requests/{requestId} {
      allow read, delete: if request.auth != null && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      allow create: if request.auth != null && request.resource.data.fromId == request.auth.uid;
    }
    
    // Chats can be read/updated by the participants.
    match /chats/{chatId} {
      allow read, update: if request.auth != null && request.auth.uid in resource.data.userIds;
      
      match /messages/{messageId} {
        allow read, create: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.userIds;
      }
    }
    
    // Notifications can only be read by the user they are for.
    match /notifications/{notificationId} {
      allow read, update: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Settings can be read by anyone, but only written by admins (server-side).
    match /settings/{settingId} {
        allow read: if request.auth != null;
        allow write: if false; // Only allow server-side/admin writes
    }
    
    // Marketing applications can be created by anyone.
    match /marketing_applications/{appId} {
      allow create: if true;
      allow read, write: if false; // Only allow server-side/admin access
    }

    // Rules for systems not yet being debugged are omitted as requested.
    // This includes: bonus_claims, referral_tasks, dailyBonusClaims, bonuses.
    // The default is to deny access, which is secure.
  }
}
