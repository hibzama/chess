
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isPlayerInGame(roomId, userId) {
      return get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players.hasAny([userId]);
    }

    match /users/{userId} {
      allow read: if request.auth != null;
      // Allow user to write to their own doc.
      // Also allow updates if the request is part of a game transaction by another player in the same game.
      allow write: if request.auth.uid == userId;
    }

    match /game_rooms/{roomId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.createdBy.uid == request.auth.uid;
      // Allow update if user is one of the players in the room.
      allow update: if request.auth != null && request.auth.uid in resource.data.players;
      allow delete: if request.auth != null && resource.data.createdBy.uid == request.auth.uid;

      // Allow players to send messages in their own game chat.
      match /messages/{messageId} {
        allow read, create: if request.auth != null && isPlayerInGame(roomId, request.auth.uid);
      }
    }

    match /friend_requests/{requestId} {
      allow read: if request.auth != null && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
      allow create: if request.auth != null && request.resource.data.fromId == request.auth.uid;
      allow delete: if request.auth != null && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
    }
    
    match /chats/{chatId} {
      allow read, update, create: if request.auth != null && request.auth.uid in resource.data.userIds;
       match /messages/{messageId} {
        allow read, create: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.userIds;
      }
    }

    match /settings/{docId} {
      allow read, write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    match /transactions/{transactionId} {
      allow read: if request.auth != null && (request.auth.uid == resource.data.userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /marketing_applications/{appId} {
      allow create: if true; // Public can apply
      allow read, update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    match /notifications/{notificationId} {
        allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
        allow create: if request.auth != null;
    }
    
    match /bonus_claims/{claimId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null && (request.auth.uid == resource.data.newUserId || request.auth.uid == resource.data.referrerId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    match /referral_tasks/{taskId} {
      allow read: if true;
      allow create, update, delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    match /dailyBonusClaims/{bonusId} {
      allow read: if true;
      // Allow user to write to their own subcollection, and admin to write to any
      allow write: if request.auth != null;
    }
    
    match /bonuses/{bonusId} {
      allow read: if true;
      allow create, update, delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}
