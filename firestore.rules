rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =================================
    // Helper Functions
    // =================================

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Checks if the user is an admin by looking at their user document.
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // =================================
    // Collections
    // =================================

    match /users/{userId} {
      // Any signed-in user can read another user's profile.
      allow read: if isSignedIn();

      // A user can only create their own user document.
      allow create: if isOwner(userId);
      
      // Users can update their own non-critical data.
      // Balance updates can only happen through a game transaction or by an admin.
      allow update: if (isOwner(userId) && !("balance" in request.resource.data)) || isAdmin();
    }
    
    match /friend_requests/{requestId} {
      allow read, write, delete: if isSignedIn() && (isOwner(resource.data.fromId) || isOwner(resource.data.toId));
      allow create: if isSignedIn() && isOwner(request.resource.data.fromId);
    }
    
    match /game_rooms/{roomId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && isOwner(request.resource.data.createdBy.uid);
      allow delete: if isSignedIn() && isOwner(resource.data.createdBy.uid) && resource.data.status == 'waiting';

      // This complex rule allows various game state updates: 
      // 1. A new player joining a waiting room.
      // 2. An existing player making a move in an in-progress game.
      // 3. Completing a game.
      allow update: if isSignedIn() && (
        // Allow a new player to join
        (
          resource.data.status == 'waiting' &&
          request.resource.data.status == 'in-progress' &&
          request.resource.data.player2.uid == request.auth.uid &&
          !(request.auth.uid in resource.data.players) &&
          (request.auth.uid in request.resource.data.players)
        ) ||
        // Allow players in the game to update it (make moves)
        (
          (request.auth.uid in resource.data.players) &&
          resource.data.status == 'in-progress' &&
          request.resource.data.status == 'in-progress'
        ) ||
        // Allow players in the game to complete it
        (
           (request.auth.uid in resource.data.players) &&
          resource.data.status == 'in-progress' &&
          request.resource.data.status == 'completed'
        ) || isAdmin()
      );
    }
    
    match /transactions/{transactionId} {
      // Users can only see their own transactions. Admins can see all.
      allow read: if (isSignedIn() && isOwner(resource.data.userId)) || isAdmin();
      // Users can create transactions (deposits, withdrawals, etc.).
      allow create: if isSignedIn();
      // Only admins can approve/reject transactions.
      allow update: if isAdmin();
    }
    
    match /notifications/{notificationId} {
        allow read, write: if isSignedIn() && isOwner(resource.data.userId);
        allow create: if isSignedIn();
    }
    
    match /marketing_applications/{appId} {
        allow create; 
        allow read, update, delete: if isAdmin();
    }
    
    match /game_rooms/{roomId}/messages/{messageId} {
      allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
    }

    match /chats/{chatId} {
        allow read, write: if isSignedIn() && request.auth.uid in resource.data.users;

        match /messages/{messageId} {
            allow read, create: if isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.users[request.auth.uid].exists == true;
        }
    }

    match /settings/{docId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }
  }
}
