rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isJoiningGame(requestData) {
        let gameRoomId = requestData.gameRoomId;
        let gameRoom = get(/databases/$(database)/documents/game_rooms/$(gameRoomId)).data;
        let p1Id = gameRoom.createdBy.uid;
        let p2Id = request.auth.uid;
        let wager = gameRoom.wager;

        // Check that the write is for the correct amount and players
        let p1Write = request.resource.data.writes[1];
        let p2Write = request.resource.data.writes[3];

        return p1Write.update.name == /databases/$(database)/documents/users/$(p1Id) &&
               p1Write.updateTransforms[0].fieldPath == "balance" &&
               p1Write.updateTransforms[0].increment.integerValue == -wager &&
               p2Write.update.name == /databases/$(database)/documents/users/$(p2Id) &&
               p2Write.updateTransforms[0].fieldPath == "balance" &&
               p2Write.updateTransforms[0].increment.integerValue == -wager;
    }

    // Admins can do anything
    match /{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Users Collection
    match /users/{userId} {
      allow read: if request.auth.uid != null;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
    }
    
    // Game Rooms
    match /game_rooms/{roomId} {
      allow read: if request.auth.uid != null;
      allow create: if isOwner(request.resource.data.createdBy.uid);
      allow update: if request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players ||
                      (request.resource.data.status == 'in-progress' && get(/databases/$(database)/documents/game_rooms/$(roomId)).data.status == 'waiting');
      allow delete: if request.auth.uid == get(/databases/$(database)/documents/game_rooms/$(roomId)).data.createdBy.uid;
    }

    // Chats & Messages
    match /chats/{chatId} {
      allow read, create: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users ||
                           request.auth.uid in request.resource.data.users;
      allow update: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
      
      match /messages/{messageId} {
        allow read, create: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
      }
    }
    
    // Transactions
    match /transactions/{transactionId} {
        allow read, list: if isOwner(get(/databases/$(database)/documents/transactions/$(transactionId)).data.userId);
        allow create: if isOwner(request.resource.data.userId);
    }

    // Friend Requests
    match /friend_requests/{requestId} {
        allow read, list: if isOwner(get(/databases/$(database)/documents/friend_requests/$(requestId)).data.toId) || 
                           isOwner(get(/databases/$(database)/documents/friend_requests/$(requestId)).data.fromId);
        allow create: if isOwner(request.resource.data.fromId);
        allow update, delete: if isOwner(get(/databases/$(database)/documents/friend_requests/$(requestId)).data.toId) ||
                               isOwner(get(/databases/$(database)/documents/friend_requests/$(requestId)).data.fromId);
    }
    
    // Notifications
    match /notifications/{notificationId} {
        allow read, list: if isOwner(get(/databases/$(database)/documents/notifications/$(notificationId)).data.userId);
        allow create: if request.auth != null;
        allow update: if isOwner(get(/databases/$(database)/documents/notifications/$(notificationId)).data.userId);
    }

    // Marketing Applications
    match /marketing_applications/{appId} {
        allow create; // Anyone can apply
    }
  }
}