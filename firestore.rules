
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check for admin role
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Users can read their own data and public profiles
    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth.uid == userId &&
                    (
                      // Allow user to decrease their balance only if enrolling in an event in the same transaction
                      (request.resource.data.balance < resource.data.balance &&
                       existsAfter(/databases/$(database)/documents/users/$(userId)/event_enrollments/$(get(/databases/$(database)/documents/events/$(request.resource.data.enrollingEventId)).id)))
                      ||
                      // Allow other profile updates that do not touch the balance
                      !('balance' in request.resource.data.diff(resource.data))
                    );
    }
    
    // Events can be read by anyone, but only modified by admins
    match /events/{eventId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
      
      // Enrolled users can be read by admins
      match /users/{userId} {
        allow read: if isAdmin();
      }
    }
    
    // User can manage their own event enrollments
    match /users/{userId}/event_enrollments/{enrollmentId} {
      allow read: if request.auth.uid == userId;
      allow create: if request.auth.uid == userId;
    }

    // Settings can only be modified by admins
    match /settings/{settingId} {
        allow read: if request.auth != null;
        allow write: if isAdmin();
    }
    
    // Game rooms have specific access rules
    match /game_rooms/{roomId} {
      allow read: if true; 
      allow create: if request.auth != null && request.resource.data.createdBy.uid == request.auth.uid;
      allow update: if request.auth != null && request.auth.uid in resource.data.players;
      allow delete: if request.auth != null && resource.data.createdBy.uid == request.auth.uid;
      
      // Messages within a game room
      match /messages/{messageId} {
        allow read: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
        allow create: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
      }
    }
    
    // Transactions can be created by users, but only read/updated by the user or an admin
    match /transactions/{transactionId} {
        allow read: if request.auth.uid == resource.data.userId || isAdmin();
        allow create: if request.auth.uid == request.resource.data.userId;
        allow update: if isAdmin();
    }

    // Notifications are private to the user
    match /notifications/{notificationId} {
        allow read, update, delete: if request.auth.uid == resource.data.userId;
        allow create: if request.auth != null;
    }

    // Friend requests
    match /friend_requests/{requestId} {
        allow read, delete: if request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId;
        allow create: if request.auth.uid == request.resource.data.fromId;
    }

    // Marketing applications
    match /marketing_applications/{appId} {
        allow read, update: if isAdmin();
        allow create: if request.auth == null; // Public can apply
    }
    
    // Public chat rooms
    match /chats/{chatId} {
        allow read, update: if request.auth.uid in resource.data.users;
        allow create: if request.auth != null;

        match /messages/{messageId} {
            allow read, create: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
        }
    }

    // Bonus configurations
    match /bonuses/{bonusId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    // Bonus claims counters
    match /dailyBonusClaims/{bonusId} {
        allow read: if true;
        allow write: if request.auth != null || isAdmin(); // Allow users to claim (write) and admins to manage
    }
  }
}
