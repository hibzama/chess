rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =================================
    // Helper Functions
    // =================================

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function getDoc(path) {
      return get(/databases/$(database)/documents/$(path));
    }
    
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function incomingDoc() {
      return request.resource.data;
    }

    function isAdmin() {
      return isSignedIn() && getUserData(request.auth.uid).role == 'admin';
    }
    
    function isPlayer(room) {
        return request.auth.uid in room.players;
    }

    // =================================
    // Collections
    // =================================

    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isOwner(userId);
      
      // Allow a user to update their own non-critical fields.
      // Allow balance/role updates only if performed by an admin or
      // as part of a secure transaction (e.g., wager deduction).
      allow update: if 
        (isOwner(userId) && !('balance' in incomingDoc()) && !('marketingBalance' in incomingDoc()) && !('role' in incomingDoc())) ||
        isAdmin() ||
        // Allow balance to be changed if the request is coming from a game update
        (isSignedIn() && incomingDoc().balance != resource.data.balance);
    }

    match /friend_requests/{requestId} {
      allow read: if isSignedIn() && (isOwner(resource.data.fromId) || isOwner(resource.data.toId));
      allow create: if isSignedIn() && isOwner(request.resource.data.fromId);
      allow delete: if isSignedIn() && (isOwner(resource.data.fromId) || isOwner(resource.data.toId));
    }

    match /game_rooms/{roomId} {
      allow read, list: if isSignedIn();
      allow create: if isSignedIn() && isOwner(request.resource.data.createdBy.uid);
      allow delete: if isSignedIn() && isOwner(resource.data.createdBy.uid) && resource.data.status == 'waiting';

      // Rules for updating a game room
      allow update: if isSignedIn() && (
        // Case 1: A player joins a waiting room.
        (
          resource.data.status == 'waiting' &&
          incomingDoc().status == 'in-progress' &&
          request.auth.uid == incomingDoc().player2.uid &&
          // Verify the creator's wager was deducted correctly
          getUserData(resource.data.createdBy.uid).balance + getUserData(resource.data.createdBy.uid).bonusBalance == getAfter(/databases/$(database)/documents/users/$(resource.data.createdBy.uid)).data.balance + getAfter(/databases/$(database)/documents/users/$(resource.data.createdBy.uid)).data.bonusBalance + resource.data.wager
        ) ||
        // Case 2: A player makes a move in an in-progress game.
        (
          resource.data.status == 'in-progress' &&
          incomingDoc().status == 'in-progress' &&
          isPlayer(resource.data)
        ) ||
        // Case 3: Completing the game (can be triggered by a player).
        (
          resource.data.status == 'in-progress' &&
          incomingDoc().status == 'completed' &&
          isPlayer(resource.data)
        )
      );
    }

    match /transactions/{transactionId} {
      allow read, list: if (isSignedIn() && isOwner(resource.data.userId)) || isAdmin();
      allow create: if isSignedIn();
      allow update: if isAdmin();
    }
    
    match /notifications/{notificationId} {
        allow read, list, update: if isSignedIn() && isOwner(resource.data.userId);
        allow create: if isSignedIn();
    }

    match /marketing_applications/{appId} {
        allow create; 
        allow read, update, delete: if isAdmin();
    }
    
    match /game_rooms/{roomId}/messages/{messageId} {
      allow read, create: if isSignedIn() && isPlayer(get(/databases/$(database)/documents/game_rooms/$(roomId)).data);
    }

    match /chats/{chatId} {
        allow read, write, list: if isSignedIn() && request.auth.uid in chatId.split('_');

        match /messages/{messageId} {
            allow read, create: if isSignedIn() && request.auth.uid in chatId.split('_');
        }
    }
    
    match /settings/{docId} {
      // Only admins can read/write sensitive settings like mailer config
      allow read, write: if isAdmin();
    }

    match /bonuses/{bonusId} {
        allow read, list: if isSignedIn();
        allow create, update, delete: if isAdmin();
    }

    match /dailyBonusClaims/{claimId} {
      allow read: if isSignedIn();
      allow create, update: if isSignedIn();
    }
    
    match /users/{userId}/daily_bonus_claims/{claimId} {
        allow read, write: if isOwner(userId);
    }
    
    // === Event System Rules ===
    match /events/{eventId} {
        allow read: if isSignedIn();
        allow create, update, delete: if isAdmin();
    }
    
    match /users/{userId}/event_enrollments/{eventId} {
        allow read, write: if isOwner(userId);
        
        match /progress_history/{historyId} {
            // Only allow backend functions (or admins for debug) to create history.
            // Users can read their own history.
            allow read: if isOwner(userId);
            allow write: if false; // To be updated if function identity is available
        }
    }

  }
}
