rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =================================
    // Helper Functions
    // =================================

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function getDoc(path) {
      return get(/databases/$(database)/documents/$(path));
    }

    function incomingDoc() {
      return request.resource.data;
    }
    
    // Checks if the user is an admin by looking at their user document.
    function isAdmin() {
      return isSignedIn() && exists(/databases/$(database)/documents/users/$(request.auth.uid)) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Checks if the user is a participant in a chat.
    function isChatParticipant(chatId) {
        return request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
    }

    // =================================
    // Collections
    // =================================

    match /users/{userId} {
      // Any signed-in user can read another user's profile (for leaderboards, friend searches, etc.).
      allow read: if isSignedIn();

      // A user can only create their own user document.
      allow create: if isOwner(userId);

      // This complex rule allows a user to update their own profile (but not critical fields),
      // and allows other system processes like friend requests and game transactions to update user documents.
      allow update: if 
        (isOwner(userId) && !(
            'balance' in incomingDoc() && incomingDoc().balance != resource.data.balance
          ) && !(
            'marketingBalance' in incomingDoc() && incomingDoc().marketingBalance != resource.data.marketingBalance
          ) && !(
            'role' in incomingDoc() && incomingDoc().role != resource.data.role
          )
        ) ||
        // Allow admins to update any user document (for balance changes, role changes, etc.)
        isAdmin();
    }
    
    match /friend_requests/{requestId} {
      allow read: if isSignedIn() && (isOwner(resource.data.fromId) || isOwner(resource.data.toId));
      allow create: if isSignedIn() && isOwner(request.resource.data.fromId);
      allow delete: if isSignedIn() && (isOwner(resource.data.fromId) || isOwner(resource.data.toId));
    }
    
    match /game_rooms/{roomId} {
        // Anyone can read game rooms to join or spectate.
        allow read: if isSignedIn();
        // A user can create a game room if they are logged in and are the creator specified in the document.
        allow create: if isSignedIn() && isOwner(request.resource.data.createdBy.uid);
        // Only the creator can delete their own waiting room.
        allow delete: if isSignedIn() && isOwner(resource.data.createdBy.uid);
        // Players in the game can update it.
        allow update: if isSignedIn() && request.auth.uid in resource.data.players;
    }
    
    match /transactions/{transactionId} {
      // Admins can read/list any transaction. Users can only see their own.
      allow read, list: if (isSignedIn() && isOwner(resource.data.userId)) || isAdmin();
      allow create: if isSignedIn();
      // Only admins can approve/reject transactions (update status).
      allow update: if isAdmin();
    }
    
    match /notifications/{notificationId} {
        allow read, list, update: if isSignedIn() && isOwner(resource.data.userId);
        allow create: if isSignedIn();
    }
    
    match /marketing_applications/{appId} {
        allow create; 
        allow read, update, delete: if isAdmin();
    }
    
    match /game_rooms/{roomId}/messages/{messageId} {
      allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
    }

    match /chats/{chatId} {
        // A user can only access chats they are a part of. The chat ID is a composite of two user IDs.
        allow read, write, list: if isSignedIn() && request.auth.uid in chatId.split('_');

        match /messages/{messageId} {
            // A user can only read/write messages in a chat they are a part of.
            allow read, create: if isSignedIn() && request.auth.uid in chatId.split('_');
        }
    }
    
    match /settings/{docId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    // --- Bonus System Rules ---
    
    match /signup_bonus_campaigns/{campaignId} {
        allow read: if true;
        allow write: if isAdmin();
        
        match /claims/{claimId} {
            allow read: if isOwner(claimId) || isAdmin();
            allow create: if isOwner(claimId); // Users can claim for themselves
        }
    }
    
    match /daily_bonus_campaigns/{campaignId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
        
        match /claims/{claimId} {
            allow read: if isOwner(claimId) || isAdmin();
            allow create: if isOwner(claimId);
        }
    }

    match /deposit_bonus_campaigns/{campaignId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
        
        match /claims/{claimId} {
             allow read: if isOwner(claimId) || isAdmin();
             allow create: if isOwner(claimId);
        }
    }
    
    match /users/{userId}/daily_bonus_claims/{campaignId} {
        allow read, create: if isOwner(userId);
    }
    
    match /users/{userId}/bonus_claims/{claimId} {
        allow read, create: if isOwner(userId);
    }

    match /bonus_claims/{claimId} {
        allow read, create: if isSignedIn();
        allow update: if isAdmin();
    }

    match /referral_campaigns/{campaignId} {
        allow read: if true;
        allow write: if isAdmin();
    }

    match /users/{userId}/active_campaigns/{campaignId} {
        allow read, write, delete: if isOwner(userId);
    }
  }
}