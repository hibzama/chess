
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper Functions
    function isUserAuthenticated() {
      return request.auth != null;
    }
    
    function isUser(userId) {
      return isUserAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isUserAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Is the user joining a game room? Check if the write operation is only changing the status from 'waiting'
    function isJoiningGame(request, resource) {
        return request.resource.data.status == 'in-progress' && resource.data.status == 'waiting';
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Admins can read/write any user document
      allow read, write: if isAdmin();
      
      // A user can update their own document
      allow update: if isUser(userId);
      
      // A user can read their own document
      allow get: if isUserAuthenticated();
      
      // A user can be read by another user ONLY if that other user is joining a game room they created
      allow get: if isUserAuthenticated() && existsAfter(/databases/$(database)/documents/game_rooms/{roomId}) && isJoiningGame(request, getAfter(/databases/$(database)/documents/game_rooms/{roomId}));

      // Allow users to query the users collection for referral tracking purposes
      allow list: if isUserAuthenticated();
      
      // Subcollections for users
      match /{subcollection}/{docId} {
        allow read, write: if isUser(userId) || isAdmin();
      }
    }

    // Rules for 'game_rooms'
    match /game_rooms/{roomId} {
      allow read: if isUserAuthenticated();
      allow create: if isUserAuthenticated();
      allow update: if isUserAuthenticated() && (isJoiningGame(request, resource) || resource.data.players[0] == request.auth.uid || resource.data.players[1] == request.auth.uid);
      allow delete: if isUserAuthenticated() && resource.data.createdBy.uid == request.auth.uid;
      
      match /messages/{messageId} {
        allow read, create: if isUserAuthenticated() && request.auth.uid in resource.data.players;
      }
    }
    
    // Rules for 'marketing_applications'
    match /marketing_applications/{appId} {
        allow create: if true; // Anyone can apply
        allow read, update, delete: if isAdmin();
    }
    
    // Rules for 'transactions'
    match /transactions/{transactionId} {
      allow read: if isUserAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isUserAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAdmin();
    }
    
    // Rules for 'friend_requests'
    match /friend_requests/{reqId} {
        allow read, create: if isUserAuthenticated();
        allow delete: if isUserAuthenticated() && (resource.data.fromId == request.auth.uid || resource.data.toId == request.auth.uid);
    }
    
    // Bonus related collections
    match /signup_bonus_campaigns/{campaignId} {
        allow read: if true;
        allow write: if isAdmin();
         match /claims/{claimId} {
            allow read, create: if isUser(claimId) || isAdmin();
        }
    }
    
    match /daily_bonus_campaigns/{campaignId} {
        allow read: if isUserAuthenticated();
        allow write: if isAdmin();
        match /claims/{claimId} {
             allow create: if isUser(claimId);
             allow read, delete: if isAdmin();
        }
    }
    
    match /deposit_bonus_campaigns/{campaignId} {
        allow read: if isUserAuthenticated();
        allow write: if isAdmin();
        match /claims/{claimId} {
            allow create: if isUser(claimId);
            allow read, delete: if isAdmin();
        }
    }

    match /referral_campaigns/{campaignId} {
        allow read: if isUserAuthenticated();
        allow write: if isAdmin();
    }
    
     // All bonus claims by a specific user can be listed by that user
    match /{path=**}/bonus_claims/{claimId} {
      allow read: if isUserAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
     // For querying claims
    match /bonus_claims/{claimId} {
      allow write: if isUserAuthenticated();
      allow read: if isUserAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // Settings collection
    match /settings/{settingId} {
        allow read, write: if isAdmin();
    }
    
    // Notifications collection
    match /notifications/{notifId} {
        allow read, update: if isUserAuthenticated() && resource.data.userId == request.auth.uid;
        allow create: if true; // Can be created by server/other users
    }
  }
}
