
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /users/{userId} {
      // Admins can read/write any user document.
      // Users can get any other user's public profile.
      allow get: if request.auth != null || isAdmin();
      // Users can only update their own document.
      allow update, write: if request.auth.uid == userId || isAdmin();
      // Authenticated users can query the user list (for suggestions, etc.)
      allow list: if request.auth != null || isAdmin();
    }
    
    match /marketing_applications/{appId} {
      allow create: if request.auth == null; // Allow unauthenticated users to apply
      allow read, write: if isAdmin();
    }
    
    match /transactions/{transactionId} {
      // Users can create their own transactions.
      allow create: if request.auth.uid == request.resource.data.userId;
      // Users can read their own transactions. Admins can read any.
      allow read: if request.auth.uid == resource.data.userId || isAdmin();
      // Only admins can update transaction status (approve/reject).
      allow update: if isAdmin();
    }

    match /game_rooms/{roomId} {
      allow read: if true; // Rooms are public to read
      allow list: if request.auth != null; // Allow authenticated users to list public rooms
      
      // Allow creation if the user is the one creating it.
      allow create: if request.auth.uid == request.resource.data.createdBy.uid;

      // Allow updates for joining, playing, or resigning
      allow update: if request.auth.uid in resource.data.players || request.auth.uid in request.resource.data.players;
    }
    
    match /game_rooms/{roomId}/messages/{messageId} {
      allow read, create: if request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
    }

    match /chats/{chatId} {
      allow read, update: if request.auth.uid in resource.data.users;
      // Allow creation if the user is one of the participants in the new chat.
      allow create: if request.auth.uid in request.resource.data.users;
    }

    match /chats/{chatId}/messages/{messageId} {
      allow read, create: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
    }

    match /notifications/{notificationId} {
        allow read, write: if request.auth.uid == resource.data.userId || isAdmin();
    }
    
    match /settings/{settingId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    match /events/{eventId} {
      allow read: if request.auth != null; // All users can see events
      allow create, update, delete: if isAdmin(); // Only admins can manage events
    }
    
    match /bonuses/{bonusId} {
        allow read: if request.auth != null;
        allow write: if isAdmin();
    }
    
    match /dailyBonusClaims/{bonusId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /users/{userId}/event_enrollments/{enrollmentId} {
      // User can read their own enrollment. Admins can read any.
      allow read: if request.auth.uid == userId || isAdmin();
      // Users can only enroll themselves via a transaction handled by a cloud function.
      allow create, update, delete: if request.auth.uid == userId || isAdmin();
    }
    
    match /users/{userId}/event_enrollments/{enrollmentId}/progress_history/{historyId} {
       allow read, create: if request.auth.uid == userId || isAdmin();
    }

    // Allow admins to read the collection group for the admin panel
    match /{path=**}/event_enrollments/{enrollmentId} {
      allow read: if isAdmin();
    }
    
    match /users/{userId}/daily_bonus_claims/{claimId} {
      allow read, write: if request.auth.uid == userId || isAdmin();
    }

  }
}
