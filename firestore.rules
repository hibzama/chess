
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isMarketer() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'marketer';
    }
    
    function willJoinGame(roomId) {
        let game = get(/databases/$(database)/documents/game_rooms/$(roomId)).data;
        let joiningPlayerId = request.auth.uid;
        
        // Ensure the transaction is for a game that is waiting
        return game.status == 'waiting'
            && game.createdBy.uid != joiningPlayerId
            && joiningPlayerId in request.resource.data.players;
    }

    // Users Collection
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if !isSignedIn(); // Allow user creation during signup
      allow update: if isOwner(userId) || (isSignedIn() && willJoinGame(request.query.gameId)); // Allow user to update own doc, or allow game transaction
      allow delete: if isAdmin();
    }

    // Game Rooms Collection
    match /game_rooms/{roomId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      
      // Allow update if user is a player in the game room
      allow update: if isSignedIn() && (request.auth.uid in resource.data.players);

      // Only the creator can delete a waiting room
      allow delete: if isSignedIn() && resource.data.status == 'waiting' && isOwner(resource.data.createdBy.uid);
    }
    
    // Transactions Collection
    match /transactions/{transactionId} {
        allow read: if isSignedIn() && isOwner(resource.data.userId);
        allow list: if isSignedIn() && request.query.where[0][2] == request.auth.uid; // Allow querying own transactions
        allow create: if isSignedIn(); // Allow creation for wagers, deposits, etc. Handled by client logic.
        allow update, delete: if isAdmin();
    }
    
    // Friend Requests Collection
    match /friend_requests/{requestId} {
        allow read: if isSignedIn() && (isOwner(resource.data.fromId) || isOwner(resource.data.toId));
        allow list: if isSignedIn() && (request.query.where[0][2] == request.auth.uid || request.query.where[2][2] == request.auth.uid);
        allow create: if isSignedIn() && isOwner(request.resource.data.fromId);
        allow update, delete: if isSignedIn() && (isOwner(resource.data.fromId) || isOwner(resource.data.toId));
    }
    
    // Marketing Applications Collection
    match /marketing_applications/{appId} {
        allow read: if isAdmin();
        allow list: if isAdmin();
        allow create: if request.auth == null; // Anyone can apply
        allow update, delete: if isAdmin();
    }

    // Notifications Collection
    match /notifications/{notificationId} {
        allow read, list: if isSignedIn() && isOwner(resource.data.userId);
        allow create: if isSignedIn(); // Server/functions will create these
        allow update: if isSignedIn() && isOwner(resource.data.userId);
        allow delete: if isAdmin();
    }
    
     // Chats & Messages
    match /chats/{chatId} {
      allow get: if isSignedIn() && request.auth.uid in resource.data.users;
      allow list: if isSignedIn() && request.query.where[0][2] == request.auth.uid;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && request.auth.uid in resource.data.users;

      match /messages/{messageId} {
        allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
      }
    }
  }
}
