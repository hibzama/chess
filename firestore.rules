rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for admin role
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    match /users/{userId} {
      // Allow user to read and write their own document
      allow read, write: if request.auth.uid == userId;
      // Allow admin to read any user document
      allow get, list: if isAdmin();
      
      // Allow admin to update any user document
      allow update: if isAdmin();

      // Allow a user to update their balance only if they are joining a game or enrolling in an event in the same transaction
      allow update: if request.auth.uid == userId && (
          // Condition for joining a game
          (existsAfter(/databases/$(database)/documents/game_rooms/$(request.resource.data.joiningRoomId)) &&
           request.resource.data.balance == resource.data.balance - getAfter(/databases/$(database)/documents/game_rooms/$(request.resource.data.joiningRoomId)).data.wager)
          ||
          // Condition for enrolling in an event
          (existsAfter(/databases/$(database)/documents/users/$(userId)/event_enrollments/$(request.resource.data.enrollingEventId)) &&
           request.resource.data.balance == resource.data.balance - get(/databases/$(database)/documents/events/$(request.resource.data.enrollingEventId)).data.enrollmentFee)
      );

      // Allow authenticated users to read from event_enrollments subcollection.
      match /event_enrollments/{enrollmentId} {
        allow read, write: if request.auth.uid == userId;
        allow list, get: if isAdmin();
      }
    }

    match /game_rooms/{roomId} {
      allow read: if isAuthenticated();

      // Allow creating a room if authenticated
      allow create: if isAuthenticated();

      // Allow user to update a room only under specific conditions (joining or ending game)
      allow update: if request.auth.uid in resource.data.players && (
        // Condition for joining a game
        (request.resource.data.status == 'in-progress' &&
         request.resource.data.player2.uid == request.auth.uid)
        ||
        // Condition for ending a game
        (request.resource.data.status == 'completed')
      );
      
      // Allow creator to delete a waiting room
      allow delete: if resource.data.createdBy.uid == request.auth.uid && resource.data.status == 'waiting';

      match /messages/{messageId} {
        allow read, create: if request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
      }
    }

    match /chats/{chatId} {
        allow read, list, update: if request.auth.uid in resource.data.users;
        allow create: if request.auth.uid in request.resource.data.users;

        match /messages/{messageId} {
            allow read, create: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
        }
    }
    
    match /marketing_applications/{appId} {
        allow create;
        allow read, update: if isAdmin();
    }
    
    match /events/{eventId} {
      allow get, list: if isAuthenticated();
      allow create, update: if isAdmin();

      // Allow enrollment transaction to update enrolledCount
      allow update: if request.auth.uid != null &&
                      existsAfter(/databases/$(database)/documents/users/$(request.auth.uid)/event_enrollments/$(eventId));
    }

    match /settings/{settingId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    match /transactions/{transactionId} {
      // Allow user to see their own transactions
      allow read: if resource.data.userId == request.auth.uid;
      // Allow admin to read any transaction
      allow get, list: if isAdmin();

      // Allow user to create a transaction document
      allow create: if request.resource.data.userId == request.auth.uid;
      
      // Allow admin to update any transaction
      allow update: if isAdmin();
    }
    
    match /notifications/{notificationId} {
        allow read, update: if resource.data.userId == request.auth.uid;
        allow create: if isAuthenticated(); // More specific rules might be needed
    }
    
     match /friend_requests/{requestId} {
        allow read, create, delete: if isAuthenticated();
     }

     match /bonuses/{bonusId} {
        allow read, list: if isAuthenticated();
        allow create, update: if isAdmin();
     }

     match /dailyBonusClaims/{bonusId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
     }
  }
}
