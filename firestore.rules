
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    //----------------------------------------------------------------------
    //  USERS Collection
    //----------------------------------------------------------------------
    match /users/{userId} {
      // Any signed-in user can read public profiles
      allow read: if isSignedIn();
      
      // Only the owner or an admin can write to a user document
      allow write: if isOwner(userId) || isAdmin();
      
      // Rules for user subcollections
      match /{subcollection}/{docId} {
        allow read, write: if isOwner(userId);
      }
    }

    //----------------------------------------------------------------------
    //  GAME_ROOMS Collection
    //----------------------------------------------------------------------
    match /game_rooms/{roomId} {
        // Any signed in user can read any game room to see lobby/game state
        allow read: if isSignedIn();

        // Anyone can create a new game room
        allow create: if isSignedIn();

        // Complex update logic for joining a game
        allow update: if isSignedIn() && (
            // Case 1: A player is joining the game
            request.resource.data.status == 'in-progress' && resource.data.status == 'waiting' && request.auth.uid in request.resource.data.players && !(request.auth.uid in resource.data.players)
            ||
            // Case 2: The game is in progress and the current player is making a move
            resource.data.status == 'in-progress' && request.resource.data.status == 'in-progress' && request.auth.uid in resource.data.players
            ||
            // Case 3: The game is being completed
            request.resource.data.status == 'completed' && resource.data.status == 'in-progress'
        );

        // A player can delete a room they created only if it's still waiting
        allow delete: if isSignedIn() && resource.data.createdBy.uid == request.auth.uid && resource.data.status == 'waiting';

        // Messages subcollection
        match /messages/{messageId} {
            allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
        }
    }

    //----------------------------------------------------------------------
    //  TRANSACTIONS Collection
    //----------------------------------------------------------------------
    match /transactions/{transactionId} {
      // Users can only create transactions for themselves
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      
      // Only admins can read, update, or delete transaction logs
      allow read, update, delete: if isAdmin();
    }
    
    //----------------------------------------------------------------------
    //  BONUS & CAMPAIGN Collections (Daily, Deposit, Signup, Referral)
    //----------------------------------------------------------------------
    // Allow any authenticated user to read the main campaign documents to see what's active.
    match /daily_bonus_campaigns/{campaignId} {
      allow read: if isSignedIn();
      // Admin-only for write access
      allow write: if isAdmin();
      
      // Users can only claim for themselves in the subcollection
      match /claims/{userId} {
        allow create: if isOwner(userId);
        allow read: if isOwner(userId) || isAdmin();
      }
    }
    
    match /deposit_bonus_campaigns/{campaignId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
        match /claims/{userId} {
            allow create: if isOwner(userId);
            allow read: if isOwner(userId) || isAdmin();
        }
    }
    
    match /signup_bonus_campaigns/{campaignId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
      match /claims/{userId} {
        allow create: if isOwner(userId);
        allow read: if isOwner(userId) || isAdmin();
      }
    }
    
    match /referral_campaigns/{campaignId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }
    
    match /bonus_claims/{claimId} {
        // Users can create claims for themselves
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        // Users can only read their own claims, admins can read all
        allow read: if (isSignedIn() && resource.data.userId == request.auth.uid) || isAdmin();
        // Only admins can approve/reject claims
        allow update, delete: if isAdmin();
    }


    //----------------------------------------------------------------------
    //  SETTINGS Collection
    //----------------------------------------------------------------------
    match /settings/{settingId} {
        // Only admins can read/write global settings
        allow read, write: if isAdmin();
    }
    
    //----------------------------------------------------------------------
    //  OTHER ADMIN-ONLY Collections
    //----------------------------------------------------------------------
    match /marketing_applications/{appId} {
        allow read, write: if isAdmin();
        allow create: if true; // Allow anyone to submit an application
    }

    match /notifications/{notifId} {
        allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
        allow create: if true; // Functions create notifications
        allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
    }
    
    match /friend_requests/{reqId} {
        allow read, create, delete: if isSignedIn();
    }
    
    match /chats/{chatId} {
        allow read, write: if isSignedIn() && request.auth.uid in resource.data.userIds;
        match /messages/{messageId} {
            allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.userIds;
        }
    }

  }
}
