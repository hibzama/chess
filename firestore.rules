rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuth() {
      return request.auth != null;
    }
    function isUser(userId) {
      return isAuth() && request.auth.uid == userId;
    }
    function isAdmin() {
      // Check for the existence of the admin role on the user's document
      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // USER rules
    match /users/{userId} {
      // Any authenticated user can read any user's profile data.
      // This is necessary for fetching opponent/friend data and for transactions involving multiple users.
      allow read: if isAuth();

      // Users can create their own document, admins can create any user.
      allow create: if isUser(userId) || isAdmin();
      
      // Users can update specific, non-critical fields on their own profile. Admins can update anything.
      allow update: if (isUser(userId) && request.resource.data.keys().hasOnly(['firstName', 'lastName', 'photoURL', 'equipment', 'binancePayId', 'emailVerified'])) || isAdmin();
    }

    // GAME_ROOMS rules
    match /game_rooms/{roomId} {
      allow read: if isAuth();
      allow create: if isAuth() && request.resource.data.createdBy.uid == request.auth.uid;
      // Allow players in the game or an admin to update the game state.
      allow update: if isAuth() && (request.auth.uid in resource.data.players || isAdmin());
      allow delete: if isAuth() && (resource.data.createdBy.uid == request.auth.uid || isAdmin());

      match /messages/{messageId} {
        allow read, create: if isAuth() && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
      }
    }

    // TRANSACTIONS rules
    match /transactions/{transactionId} {
      allow read: if isAuth() && (resource.data.userId == request.auth.uid || isAdmin());
      // Users can only create transactions for themselves.
      allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAdmin();
    }

    // BONUS & CAMPAIGN rules
    match /signup_bonus_campaigns/{campaignId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    match /deposit_bonus_campaigns/{campaignId} {
        allow read: if isAuth();
        allow write: if isAdmin();
        match /claims/{claimId} {
            allow read, create: if isUser(claimId) || isAdmin();
        }
    }
    match /referral_campaigns/{campaignId} {
      allow read: if isAuth();
      allow write: if isAdmin();
    }
     match /tasks/{taskId} {
      allow read: if isAuth();
      allow write: if isAdmin();
    }

    // Root level bonus_claims collection
    match /bonus_claims/{claimId} {
      allow read: if isAuth() && (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAuth();
      allow update: if isAdmin();
    }
    
    // Subcollections under users for campaign tracking
    match /users/{userId}/active_campaigns/{docId} {
        allow read, write: if isUser(userId) || isAdmin();
    }
    
    // MARKETING rules
    match /marketing_applications/{appId} {
      allow read: if isAdmin();
      allow create: if isAuth();
      allow update: if isAdmin();
    }

    // NOTIFICATIONS rules
    match /notifications/{notificationId} {
      allow read, update: if isAuth() && resource.data.userId == request.auth.uid;
      allow create: if isAuth(); // Allow backend services/other users to create notifications
    }

    // FRIEND REQUESTS rules
    match /friend_requests/{requestId} {
      allow read, create: if isAuth();
      allow delete: if isAuth() && (isUser(resource.data.fromId) || isUser(resource.data.toId));
    }

    // CHATS rules
    match /chats/{chatId} {
      allow read, update, create: if isAuth() && request.auth.uid in resource.data.userIds;
      match /messages/{messageId} {
        allow read, create: if isAuth() && get(/databases/$(database)/documents/chats/$(chatId)).data.userIds.hasAny([request.auth.uid]);
      }
    }

    // SETTINGS rules
    match /settings/{settingId} {
      allow read: if isAuth();
      allow write: if isAdmin();
    }
  }
}
