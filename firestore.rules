rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to get incoming request data
    function getRequestData() {
      return request.resource.data;
    }
    
    // Helper function to check if a user is a player in a specific game room
    function isPlayer(gameRoomId) {
      return get(/databases/$(database)/documents/game_rooms/$(gameRoomId)).data.players.hasAny([request.auth.uid]);
    }

    match /users/{userId} {
      // Allow a user to read their own document
      allow get: if isAuthenticated() && request.auth.uid == userId;
      // Allow anyone to read public user profiles (for profile pages, etc.)
      allow list: if isAuthenticated();
      // Allow a user to create their own document
      allow create: if isAuthenticated() && request.auth.uid == userId;
      // Allow a user to update their own document
      allow update: if isAuthenticated() && request.auth.uid == userId;
    }

    match /game_rooms/{roomId} {
      allow get: if isAuthenticated();
      // Allow any authenticated user to see the list of public games
      allow list: if isAuthenticated(); 
      // Allow authenticated users to create a game room
      allow create: if isAuthenticated();
      
      // Allow a player to update a game if it's their turn
      allow update: if isAuthenticated() && isPlayer(roomId) && resource.data.status != 'completed';
      
      // Allow a user to delete their own waiting room
      allow delete: if isAuthenticated() && resource.data.createdBy.uid == request.auth.uid && resource.data.status == 'waiting';
    }

    match /game_rooms/{roomId}/messages/{messageId} {
      allow read, write: if isPlayer(roomId);
    }

    match /transactions/{transactionId} {
      allow get: if isAuthenticated() && resource.data.userId == request.auth.uid;
      // Allow a user to see their own transaction history
      allow list: if isAuthenticated() && request.query.where.size() > 0 && request.query.where[0][2] == request.auth.uid;
      // Allow users to create their own transactions
      allow create: if isAuthenticated() && getRequestData().userId == request.auth.uid;
      // Allow admins to update any transaction
      allow update: if isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /friend_requests/{requestId} {
      allow read, create: if isAuthenticated();
      // Allow the recipient to accept/decline, or the sender to cancel (delete)
      allow update, delete: if isAuthenticated() && (request.auth.uid == resource.data.toId || request.auth.uid == resource.data.fromId);
    }

    match /marketing_applications/{appId} {
       // Admins can read/write, users can create
       allow read, update, delete: if isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
       allow create: if true; // Open for anyone to apply
    }
    
    match /notifications/{notificationId} {
        allow read, list: if isAuthenticated() && request.query.where.size() > 0 && request.query.where[0][2] == request.auth.uid;
        allow create, update: if isAuthenticated();
    }
    
    match /chats/{chatId} {
      // A user can read or write to a chat if their UID is in the `users` map keys
      allow read, write: if isAuthenticated() && resource.data.users[request.auth.uid].exists == true;
    }
    
    match /chats/{chatId}/messages/{messageId} {
      // A user can read/write messages in a chat they are part of.
      allow read, write: if isAuthenticated() && get(/databases/$(database)/documents/chats/$(chatId)).data.users[request.auth.uid].exists == true;
    }
  }
}