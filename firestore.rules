rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    match /users/{userId} {
      allow read, create: if true;
      allow update: if isOwner(userId) || isAdmin();
    }
    
    match /users/{userId}/{document=**} {
       allow read, write: if isOwner(userId) || isAdmin();
    }
    
    // Allow admins to list all users
    match /users/{userId} {
      allow list: if isAdmin();
    }
    
    match /game_rooms/{roomId} {
      allow read, create, delete: if request.auth != null;
      allow update: if isAdmin() || (resource.data.status == 'waiting' && request.auth.uid == resource.data.createdBy.uid) || (request.resource.data.status == 'in-progress' && request.auth.uid in resource.data.players);
    }
    
    match /chats/{chatId} {
      allow read, create, update: if request.auth.uid in resource.data.users;
    }

    match /chats/{chatId}/{document=**} {
      allow read, write: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
    }
    
    match /notifications/{notificationId} {
        allow read, write: if isOwner(resource.data.userId);
    }
    
    match /marketing_applications/{appId} {
      allow create;
      allow read, update: if isAdmin();
    }
    
    match /transactions/{transactionId} {
        allow create: if request.auth != null;
        allow read, update: if isAdmin() || isOwner(resource.data.userId);
    }
    
    match /settings/{settingId} {
        allow read: if request.auth != null;
        allow write: if isAdmin();
    }
    
    match /bonuses/{bonusId} {
        allow read: if request.auth != null;
        allow write: if isAdmin();
    }
    
    match /dailyBonusClaims/{bonusId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null; // Further checks are in the transaction logic
    }
    
    match /events/{eventId} {
       allow get, list: if request.auth != null;
       allow write: if isAdmin();
    }
    
    match /event_enrollments/{eventId}/users/{userId} {
       allow read, write, list: if isAdmin();
    }

    // This rule allows an admin to list documents across all 'event_enrollments' subcollections.
    // This is required for the collectionGroup query in the admin panel.
     match /{path=**}/event_enrollments/{enrollmentId} {
      allow list: if isAdmin();
    }
  }
}