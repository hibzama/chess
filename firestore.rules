
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isMarketer() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'marketer';
    }

    function isUser() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'user';
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAnyRole() {
        return request.auth != null && ('role' in get(/databases/$(database)/documents/users/$(request.auth.uid)).data);
    }
    
    // User can update their own data, but not their balance, role, or referral stats
    match /users/{userId} {
      allow read: if isAnyRole();
      allow create: if request.resource.data.uid == request.auth.uid;
      allow update: if isOwner(userId) && 
                       !('balance' in request.resource.data) &&
                       !('marketingBalance' in request.resource.data) &&
                       !('bonusReferralCount' in request.resource.data) &&
                       !('role' in request.resource.data) &&
                       !('wins' in request.resource.data);
      allow delete: if isAdmin();
      
      match /active_campaigns/{docId} {
        allow read, write: if isOwner(userId);
      }
      match /daily_bonus_claims/{docId} {
          allow read, write: if isOwner(userId);
      }
       match /bonus_claims/{docId} {
          allow read, write: if isOwner(userId);
      }
    }
    
    match /game_rooms/{roomId} {
        allow read: if isAnyRole();
        allow create: if isOwner(request.resource.data.createdBy.uid);
        // Allow updates only if transitioning from waiting to in-progress (join)
        // or if a player in the game is updating the board state.
        allow update: if (request.resource.data.status == 'in-progress' && request.resource.data.player2.uid == request.auth.uid && resource.data.status == 'waiting') ||
                         (request.auth.uid in resource.data.players && request.resource.data.status == 'in-progress' );
        allow delete: if isOwner(resource.data.createdBy.uid) || isAdmin();
        
        match /messages/{messageId} {
          allow read, write: if request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
        }
    }
    
    match /transactions/{transactionId} {
        allow read: if isOwner(get(/databases/$(database)/documents/transactions/$(transactionId)).data.userId) || isAdmin();
        allow create: if isOwner(request.resource.data.userId);
        allow update, delete: if isAdmin();
    }
    
    match /marketing_applications/{appId} {
        allow read, write, delete: if isAdmin();
        allow create: if request.auth == null; // Open for anyone to apply
    }
    
    // Admins have full access to settings
    match /settings/{settingId} {
      allow read, write, delete: if isAdmin();
    }
    
    // Notifications can only be read/updated by the target user.
    match /notifications/{notifId} {
      allow read, update, delete: if isOwner(get(/databases/$(database)/documents/notifications/$(notifId)).data.userId);
      // Creating notifications is handled by cloud functions
      allow create: if isAdmin(); // Or allow server-side only
    }
    
    // Friend requests can be created by any user, but only read/deleted by the involved parties
    match /friend_requests/{reqId} {
      allow create: if isOwner(request.resource.data.fromId);
      allow read, delete: if request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId;
    }
    
    match /chats/{chatId} {
      allow read, write: if request.auth.uid in resource.data.userIds;
       match /messages/{messageId} {
          allow read, write: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.userIds;
        }
    }

    // --- Bonus & Campaign Rules ---
    
    function isClaimingOwnBonus(campaignType, campaignId) {
       return request.resource.data.userId == request.auth.uid &&
              exists(/databases/$(database)/documents/$(campaignType)/$(campaignId));
    }
    
    match /signup_bonus_campaigns/{campaignId} {
        allow read: if isAnyRole();
        allow write, create, delete: if isAdmin();
        
        match /claims/{userId} {
            allow read: if isAdmin() || isOwner(userId);
            allow create: if isOwner(userId) && isClaimingOwnBonus('signup_bonus_campaigns', campaignId);
        }
    }

    match /daily_bonus_campaigns/{campaignId} {
        allow read: if isAnyRole();
        allow write, create, delete: if isAdmin();
        
        match /claims/{userId} {
            allow read: if isAdmin() || isOwner(userId);
            allow create: if isOwner(userId) && isClaimingOwnBonus('daily_bonus_campaigns', campaignId);
        }
    }
    
    match /deposit_bonus_campaigns/{campaignId} {
        allow read: if isAnyRole();
        allow write, create, delete: if isAdmin();
        
         match /claims/{userId} {
            allow read: if isAdmin() || isOwner(userId);
            allow create: if isOwner(userId) && isClaimingOwnBonus('deposit_bonus_campaigns', campaignId);
        }
    }
    
    match /referral_campaigns/{campaignId} {
        allow read: if isAnyRole();
        allow write, create, delete: if isAdmin();
    }
    
    match /bonus_claims/{claimId} {
      // User can create their own claim, admin can do anything.
      allow create: if isOwner(request.resource.data.userId);
      allow read, update, delete: if isAdmin() || isOwner(resource.data.userId);
    }
  }
}
