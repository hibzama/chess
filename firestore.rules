rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isUserAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isUserAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // USER Collection
    match /users/{userId} {
      allow read: if isUserAuthenticated();
      allow create: if isUserAuthenticated() && isOwner(userId);
      allow update: if isOwner(userId) || isAdmin();

      // Users can see their own subcollections
      match /{subcollection}/{docId} {
        allow read, write: if isOwner(userId);
      }
    }

    // GAME_ROOMS Collection
    match /game_rooms/{roomId} {
      allow read: if isUserAuthenticated();
      allow create: if isUserAuthenticated();
      // Only players in the game can update it, or an admin
      allow update: if (isUserAuthenticated() && request.auth.uid in resource.data.players) || isAdmin();
      allow delete: if (isUserAuthenticated() && isOwner(resource.data.createdBy.uid)) || isAdmin();
      
       match /messages/{messageId} {
        allow read, create: if isUserAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
      }
    }

    // CHATS Collection
    match /chats/{chatId} {
        allow read, update: if isUserAuthenticated() && request.auth.uid in resource.data.userIds;
        allow create: if isUserAuthenticated();
        
        match /messages/{messageId} {
            allow read, create: if isUserAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.userIds;
        }
    }
    
    // NOTIFICATIONS Collection
    match /notifications/{notificationId} {
        allow read, update, create: if isUserAuthenticated();
    }
    
    // MARKETING APPLICATIONS Collection
    match /marketing_applications/{appId} {
        allow read: if isAdmin();
        allow create: if request.resource.data.status == 'pending';
        allow update: if isAdmin();
    }
    
    // TRANSACTIONS Collection
    match /transactions/{transactionId} {
      allow read: if isUserAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
      allow list: if isUserAuthenticated() && (isAdmin() || request.query.where.size() > 0 && request.query.where[0][0] == 'userId' && request.query.where[0][2] == request.auth.uid);
      allow create: if (isUserAuthenticated() && isOwner(request.resource.data.userId)) || isAdmin();
    }
    
    // SETTINGS documents (e.g., for mailer)
    match /settings/{settingId} {
      allow read, write: if isAdmin();
    }
    
    // BONUS CAMPAIGNS (Signup, Daily, Deposit, Referral)
    match /{campaignCollection}/{campaignId} {
        allow read: if isUserAuthenticated();
        allow create, update, delete: if isAdmin();
        
        match /claims/{claimId} {
             allow read, create: if isUserAuthenticated();
             allow update, delete: if isAdmin();
        }
    }
    
    // BONUS CLAIMS Collection
    match /bonus_claims/{claimId} {
       allow read, create: if isUserAuthenticated();
       allow update, delete: if isAdmin();
       allow list: if isUserAuthenticated() && (isAdmin() || (request.query.where.size() > 0 && request.query.where[0][0] == 'userId' && request.query.where[0][2] == request.auth.uid));
    }
    
    // Allow admins to read any collection for management purposes
    match /{document=**} {
        allow read, write: if isAdmin();
    }
  }
}
