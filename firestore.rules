
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isGettingSelf() {
      return isSignedIn() && request.auth.uid == resource.data.uid;
    }

    function isUpdatingSelf() {
      return isOwner(request.resource.data.uid);
    }
    
    function getDoc(path) {
      return get(/databases/$(database)/documents/$(path));
    }

    function incomingDoc(path) {
      return request.resource.data[path];
    }
    
    match /users/{userId} {
      allow read: if isSignedIn();

      allow create: if isOwner(userId) && !exists(/databases/$(database)/documents/users/$(userId));

      allow update: if 
        // Allow user to update their own document, but not change critical fields like role or balance directly.
        (isOwner(userId) && !(
            'balance' in request.resource.data && request.resource.data.balance != resource.data.balance
          ) && !(
            'marketingBalance' in request.resource.data && request.resource.data.marketingBalance != resource.data.marketingBalance
          ) && !(
            'role' in request.resource.data && request.resource.data.role != resource.data.role
          )
        ) ||
        // Allow accepting a friend request (updates both users' friends list)
        (isSignedIn() && getDoc('friend_requests/' + getDoc('users/' + request.auth.uid).data.requestId).data.fromId == userId) ||
        // Allow removing a friend (updates both users' friends list)
        (isSignedIn() && !(userId in incomingDoc('friends')) && (userId in resource.data.friends)) ||
        // Allow game-related balance updates via transaction
        (isSignedIn() && ('balance' in request.resource.data));
    }
    
    match /friend_requests/{requestId} {
      allow read: if isSignedIn() && (isOwner(resource.data.fromId) || isOwner(resource.data.toId));
      allow create: if isSignedIn() && isOwner(request.resource.data.fromId);
      allow delete: if isSignedIn() && (isOwner(resource.data.fromId) || isOwner(resource.data.toId));
    }
    
    match /game_rooms/{roomId} {
      allow read, list: if isSignedIn();
      allow create: if isSignedIn() && isOwner(request.resource.data.createdBy.uid);
      allow delete: if isSignedIn() && isOwner(resource.data.createdBy.uid);

      allow update: if isSignedIn() && 
        // Allow joining a game
        (
          !isOwner(resource.data.createdBy.uid) &&
          resource.data.status == 'waiting' &&
          request.resource.data.status == 'in-progress' &&
          request.resource.data.player2.uid == request.auth.uid &&
          !(request.auth.uid in resource.data.players) &&
          (request.auth.uid in request.resource.data.players)
        ) ||
        // Allow playing a move
        (
          (isOwner(resource.data.createdBy.uid) || isOwner(resource.data.player2.uid)) &&
          resource.data.status == 'in-progress' &&
          request.resource.data.status == 'in-progress'
        ) ||
        // Allow game completion update
        (
           (isOwner(resource.data.createdBy.uid) || isOwner(resource.data.player2.uid)) &&
          resource.data.status == 'in-progress' &&
          request.resource.data.status == 'completed'
        );
    }

    match /transactions/{transactionId} {
      allow read, list: if isSignedIn() && isOwner(resource.data.userId);
      allow create: if isSignedIn();
    }
    
    match /notifications/{notificationId} {
        allow read, list: if isSignedIn() && isOwner(resource.data.userId);
        allow create: if isSignedIn();
        allow update: if isSignedIn() && isOwner(resource.data.userId);
    }
    
    match /marketing_applications/{appId} {
        allow create; 
        allow read, update, delete: if isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
     // Allow chat messages within a game room
    match /game_rooms/{roomId}/messages/{messageId} {
      allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
    }

    // Allow chat messages in direct chats
    match /chats/{chatId} {
      allow read, list, update, create: if isSignedIn() && request.auth.uid in resource.data.users;
    }
    match /chats/{chatId}/messages/{messageId} {
      allow read, create: if isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.users[request.auth.uid].exists == true;
    }
  }
}
