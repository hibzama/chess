rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Allows admin full access, and authenticated users to read their own data.
    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      
      // Allow users to create their own profile.
      allow create: if request.auth != null && request.auth.uid == userId;

      // Allow users to update their own profile, but NOT their balance or role.
      // Balance is only allowed to change via a transaction from a Cloud Function or a specific client-side transaction.
      allow update: if request.auth != null && request.auth.uid == userId &&
                      !('balance' in request.resource.data) && 
                      !('bonusBalance' in request.resource.data) &&
                      !('marketingBalance' in request.resource.data) &&
                      !('role' in request.resource.data) &&
                      !('emailVerified' in request.resource.data);
    }
    
    match /users/{userId} {
      // Allow a user to update their own balance ONLY IF they are also creating an event enrollment.
      // This is a specific rule to allow the event enrollment transaction.
      allow update: if request.auth != null && request.auth.uid == userId &&
                      getAfter(/databases/$(database)/documents/users/$(userId)/event_enrollments/$(request.resource.data.enrollingEventId)).data.eventId == request.resource.data.enrollingEventId;
    }
    
    // Marketing applications can be created by anyone.
    match /marketing_applications/{appId} {
      allow create: if true;
    }

    // Settings can only be read by authenticated users.
    match /settings/{settingId} {
      allow read: if request.auth != null;
    }
    
    // Events can be read by any authenticated user.
    match /events/{eventId} {
        allow get, list: if request.auth != null;
    }
    
    // A user can read and write to their own event_enrollments subcollection.
    match /users/{userId}/event_enrollments/{enrollmentId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Public game rooms can be listed by any authenticated user.
    match /game_rooms/{roomId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.createdBy.uid == request.auth.uid;
      // Allow updates only by players in the game, and only if the game is not completed.
      allow update: if request.auth != null && request.auth.uid in resource.data.players && resource.data.status != 'completed';
      allow delete: if request.auth != null && request.auth.uid == resource.data.createdBy.uid;
    }
    
    // Game chat messages can be read/written by players in the game.
    match /game_rooms/{roomId}/messages/{messageId} {
        allow read, create: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
    }
    
    // Chats can be read/updated by participants.
    match /chats/{chatId} {
        allow read, update: if request.auth != null && request.auth.uid in resource.data.users;
    }
    
     match /chats/{chatId}/messages/{messageId} {
      allow read, create: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
    }
    
    // Notifications can be read/updated only by the recipient.
    match /notifications/{notifId} {
        allow read, update: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Default deny all other reads/writes.
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
