rules_version = '2';

service cloud.firestore { match /databases/{database}/documents {

// =================================
// Helper Functions
// =================================

function isSignedIn() {
  return request.auth != null;
}

function isOwner(userId) {
  return request.auth.uid == userId;
}

function getDoc(path) {
  return get(/databases/$(database)/documents/$(path));
}

function incomingDoc() {
  return request.resource.data;
}

// Checks if the user is an admin by looking at their user document.
function isAdmin() {
  return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
}

// Checks if the user is a participant in a chat.
function isChatParticipant(chatId) {
    return request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
}

// =================================
// Collections
// =================================

match /users/{userId} {
  // Any signed-in user can read another user's profile (for leaderboards, friend searches, etc.).
  allow read: if isSignedIn();

  // A user can only create their own user document.
  allow create: if isOwner(userId) && !exists(/databases/$(database)/documents/users/$(userId));

  // A user can update their own profile, and admins can update any user profile.
  // Balance updates are only allowed through transactions, which are governed by other rules (e.g., game_rooms, transactions).
  allow update: if 
    (isOwner(userId) && !(
        'balance' in incomingDoc() && incomingDoc().balance != resource.data.balance
      ) && !(
        'marketingBalance' in incomingDoc() && incomingDoc().marketingBalance != resource.data.marketingBalance
      ) && !(
        'bonusBalance' in incomingDoc() && incomingDoc().bonusBalance != resource.data.bonusBalance
      ) && !(
        'role' in incomingDoc() && incomingDoc().role != resource.data.role
      )
    ) || isAdmin();
}

match /friend_requests/{requestId} {
  allow read: if isSignedIn() && (isOwner(resource.data.fromId) || isOwner(resource.data.toId));
  allow create: if isSignedIn() && isOwner(request.resource.data.fromId);
  allow delete: if isSignedIn() && (isOwner(resource.data.fromId) || isOwner(resource.data.toId));
}

match /game_rooms/{roomId} {
  // Any signed-in user can list public games, and admins can read any game room's details.
  allow read, list: if isSignedIn();
  allow create: if isSignedIn() && isOwner(request.resource.data.createdBy.uid);
  allow delete: if isSignedIn() && isOwner(resource.data.createdBy.uid);

  // This complex rule allows various game state updates: joining, playing moves, and completing the game.
  allow update: if isSignedIn() && 
    (
      // Rule for a player joining a game
      !isOwner(resource.data.createdBy.uid) &&
      resource.data.status == 'waiting' &&
      request.resource.data.status == 'in-progress' &&
      request.resource.data.player2.uid == request.auth.uid &&
      !(request.auth.uid in resource.data.players) &&
      (request.auth.uid in request.resource.data.players) &&
      // Allow the transaction to read the creator's user doc
      exists(/databases/$(database)/documents/users/$(resource.data.createdBy.uid)) &&
      // Allow the transaction to read the joiner's user doc
      exists(/databases/$(database)/documents/users/$(request.auth.uid))
    ) ||
    (
      // Rule for players making moves during a game
      (isOwner(resource.data.createdBy.uid) || isOwner(resource.data.player2.uid)) &&
      resource.data.status == 'in-progress' &&
      request.resource.data.status == 'in-progress'
    ) ||
    (
      // Rule for completing a game
       (isOwner(resource.data.createdBy.uid) || isOwner(resource.data.player2.uid)) &&
      resource.data.status == 'in-progress' &&
      request.resource.data.status == 'completed'
    );
}

match /transactions/{transactionId} {
  // Admins can read/list any transaction. Users can only see their own.
  allow read, list: if (isSignedIn() && isOwner(resource.data.userId)) || isAdmin();
  allow create: if isSignedIn();
  // Only admins can approve/reject transactions (update status).
  allow update: if isAdmin();
}

match /notifications/{notificationId} {
    allow read, list, update: if isSignedIn() && isOwner(resource.data.userId);
    allow create: if isSignedIn();
}

match /marketing_applications/{appId} {
    allow create; 
    allow read, update, delete: if isAdmin();
}

match /game_rooms/{roomId}/messages/{messageId} {
  allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
}

match /chats/{chatId} {
    // A user can only access chats they are a part of. The chat ID is a composite of two user IDs.
    allow read, write, list: if isSignedIn() && request.auth.uid in chatId.split('_');

    match /messages/{messageId} {
        // A user can only read/write messages in a chat they are a part of.
        allow read, create: if isSignedIn() && request.auth.uid in chatId.split('_');
    }
}

match /settings/{docId} {
  // Mailer config is read-only for clients, only admin can write.
  allow read: if isSignedIn();
  allow write: if isAdmin();
}

match /bonuses/{bonusId} {
    allow read, list: if isSignedIn();
    allow create, update, delete: if isAdmin();
}

match /dailyBonusClaims/{claimId} {
  allow read: if isSignedIn();
  // Allow creation/update during bonus claim transaction
  allow create, update: if isSignedIn();
}

match /users/{userId}/daily_bonus_claims/{claimId} {
    allow read, write: if isOwner(userId);
}

// Rules for Events System
match /events/{eventId} {
  allow read: if isSignedIn();
  allow create, update, delete: if isAdmin();
}

match /users/{userId}/event_enrollments/{enrollmentId} {
  allow read, write: if isOwner(userId);

  match /progress_history/{progressId} {
    // A user can only read their own event progress history.
    // Progress is only created by the backend Cloud Function.
    allow read: if isOwner(userId);
    allow create: if false; 
    allow update, delete: if false;
  }
}

} }
