
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Users can read public data on other users, but only update their own.
    match /users/{userId} {
      allow read;
      allow create, update: if isOwner(userId);
    }
    
    // Game Rooms can be read by anyone, but only updated by players in the game.
    match /game_rooms/{roomId} {
      allow read, create;
      // Allow a user to join a game (update from waiting to in-progress)
      allow update: if (isAuthenticated() && 
                      (resource.data.createdBy.uid == request.auth.uid || (resource.data.player2 != null && resource.data.player2.uid == request.auth.uid) || (request.resource.data.status == 'in-progress' && resource.data.status == 'waiting')));
      allow delete: if resource.data.createdBy.uid == request.auth.uid;
      
      // Messages can be read by players, and created by players.
      match /messages/{messageId} {
        allow read: if request.auth.uid in resource.data.players;
        allow create: if request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
      }
    }

    // Transactions can only be accessed by the user they belong to.
    match /transactions/{transactionId} {
      allow read, create, update: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // Friend requests can be created by the sender, and read by either party.
    match /friend_requests/{requestId} {
      allow create: if isAuthenticated() && request.resource.data.fromId == request.auth.uid;
      allow read, delete: if isAuthenticated() && (resource.data.fromId == request.auth.uid || resource.data.toId == request.auth.uid);
    }
    
    // Notifications can be read/updated by the user they are for.
    match /notifications/{notificationId} {
        allow read, update, delete: if isAuthenticated() && isOwner(resource.data.userId);
        allow create: if isAuthenticated();
    }
    
    // Settings can be read by anyone (for mailer, bonuses etc)
    match /settings/{settingId} {
        allow read;
    }
    
    // Marketing applications can be created by anyone.
    match /marketing_applications/{appId} {
        allow create: if true;
    }
    
    match /bonuses/{bonusId} {
      allow read;
    }
    
    match /referral_tasks/{taskId} {
      allow read;
    }
    
    match /dailyBonusClaims/{claimId} {
      allow read: if isAuthenticated();
      // Allow users to create their own claim document
      match /claimed_by/{userId} {
        allow create: if isOwner(userId);
      }
    }
    
    // Bonus Claims can be created by the user, read by the involved parties
    match /bonus_claims/{claimId} {
        allow create: if isAuthenticated();
        allow read: if isAuthenticated() && (isOwner(resource.data.newUserId) || isOwner(resource.data.referrerId));
    }
    
     // Chat documents
    match /chats/{chatId} {
      // Only players involved in the chat can read or write to it.
      allow read, update: if isAuthenticated() && request.auth.uid in resource.data.userIds;
      
      // Messages can be created by involved players
      match /messages/{messageId} {
        allow create, read: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.userIds;
      }
    }
  }
}
