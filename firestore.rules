rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Functions ---
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // --- Collections ---

    // USER DATA: Users can read all profiles, but only write to their own.
    // Admins have full access.
    match /users/{userId} {
      allow read: if true;
      allow create: if isOwner(userId);
      // Allow user to update their own doc, or allow updates during a game transaction (wager deduction)
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // GAME ROOMS: Handles creation, joining, playing, and deletion of rooms.
    match /game_rooms/{roomId} {
      allow read: if true;
      allow create: if isAuthenticated();
      
      // Allow updates if user is a player in the room OR if they are joining a waiting room
      allow update: if isAuthenticated() 
      					&& (
                  // Player making a move
                  request.auth.uid in resource.data.players 
                  || 
                  // Player joining a game
                  (request.resource.data.status == 'in-progress' && resource.data.status == 'waiting')
                 );
                 
      // Only the creator can delete a waiting room.
      allow delete: if isAuthenticated() && resource.data.status == 'waiting' && request.auth.uid == resource.data.createdBy.uid;
    }

    // CHAT: Only participants of a chat can read or write messages.
    match /chats/{chatId} {
      allow get, list, create, update: if isAuthenticated() && request.auth.uid in resource.data.users;
      match /messages/{messageId} {
        allow read, create: if isAuthenticated() && get(/databases/$(database)/documents/chats/$(chatId)).data.users[request.auth.uid] != null;
      }
    }

    // TRANSACTIONS: Users can create transactions for themselves, and query their own transaction history.
    match /transactions/{transactionId} {
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      // This rule fixes the dashboard loading error.
      allow list: if isAuthenticated();
    }

    // FRIEND REQUESTS: Authenticated users can manage their friend requests.
    match /friend_requests/{requestId} {
        allow create: if isAuthenticated();
        allow update, delete: if isAuthenticated() && (isOwner(resource.data.fromId) || isOwner(resource.data.toId) || isAdmin());
    }

    // MARKETING: Anyone can apply, only admins can manage applications.
    match /marketing_applications/{appId} {
        allow create: if true;
        allow read, update, delete: if isAdmin();
    }

    // NOTIFICATIONS: Users can read and update their own notifications.
    match /notifications/{notifId} {
        allow read, update: if isAuthenticated() && isOwner(resource.data.userId);
    }
  }
}
