rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for admin role
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Admins can read and write all data
    match /{path=**} {
      allow read, write: if isAdmin();
    }
    
    // Rules for the 'users' collection
    match /users/{userId} {
      // Any authenticated user can read any user's profile
      allow read: if request.auth != null;
      // Only the user themselves can create their own document
      allow create: if request.auth.uid == userId;
      // A user can only update their own document
      allow update: if request.auth.uid == userId;
      // No user should be able to delete their account from the client
      allow delete: if false;
    }

    // Rules for 'game_rooms'
    match /game_rooms/{roomId} {
      // Any authenticated user can read game rooms (for lobbies)
      allow read: if request.auth != null;
      // Only authenticated users can create rooms
      allow create: if request.auth != null;
      // Only players in the game can update it
      allow update: if request.auth != null && request.auth.uid in resource.data.players;
      // Only the creator can delete a waiting room
      allow delete: if request.auth != null && request.auth.uid == resource.data.createdBy.uid;
    }
    
    // Rules for 'transactions'
    match /transactions/{transactionId} {
        // A user can create their own transactions
        allow create: if request.auth.uid == request.resource.data.userId;
        // A user can only read their own transactions
        allow read: if request.auth.uid == resource.data.userId;
        // Transactions cannot be updated or deleted by clients
        allow update, delete: if false;
    }

    // Rules for 'friend_requests'
    match /friend_requests/{requestId} {
        allow read: if request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId;
        allow create: if request.auth.uid == request.resource.data.fromId;
        allow delete: if request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId;
    }
    
    // Rules for 'notifications'
    match /notifications/{notificationId} {
        allow read, update: if request.auth.uid == resource.data.userId;
        // Notifications are created by server-side logic (functions)
        allow create, delete: if false;
    }

    // Rules for reading bonus configurations
    match /settings/{settingId} {
        allow read: if request.auth != null;
        allow write: if false; // Should only be editable by admins in console or via a trusted function
    }

    match /daily_bonus_campaigns/{campaignId} {
      allow read: if request.auth != null;
      allow write: if false;
      
      match /claims/{claimId} {
        allow read, create: if request.auth != null;
        allow update, delete: if false;
      }
    }
    
     match /deposit_bonus_campaigns/{campaignId} {
      allow read: if request.auth != null;
      allow write: if false;

       match /claims/{claimId} {
        allow read, create: if request.auth != null;
        allow update, delete: if false;
      }
    }
    
    // Rules for referral campaigns
    match /referral_campaigns/{campaignId} {
        allow read: if request.auth != null;
    }

    // Rules for bonus claims (nested under users)
    match /users/{userId}/bonus_claims/{claimId} {
        allow read, create: if request.auth.uid == userId;
        allow update, delete: if false;
    }
    
    // Rules for active campaigns (nested under users)
    match /users/{userId}/active_campaigns/{campaignDocId} {
        allow read, create, update, delete: if request.auth.uid == userId;
    }
    
    // Rules for game chat messages
    match /game_rooms/{roomId}/messages/{messageId} {
        allow read, create: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
    }

  }
}
