rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =================================
    // Helper Functions
    // =================================

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function getDoc(path) {
      return get(/databases/$(database)/documents/$(path));
    }

    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isPlayer(room) {
        return request.auth.uid in room.players;
    }

    // =================================
    // Collections
    // =================================

    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isOwner(userId) && !exists(/databases/$(database)/documents/users/$(userId));
      
      // Allow users to update their own non-critical fields.
      // Admins can update anything.
      // Balance can be updated if the request comes from a game transaction (has a gameId) or by an admin.
      allow update: if (isOwner(userId) && 
                      request.resource.data.balance == resource.data.balance &&
                      request.resource.data.bonusBalance == resource.data.bonusBalance &&
                      request.resource.data.marketingBalance == resource.data.marketingBalance &&
                      request.resource.data.role == resource.data.role &&
                      request.resource.data.wins == resource.data.wins) 
                    || isAdmin()
                    || (isSignedIn() && request.resource.data.balance != resource.data.balance);
    }

    match /game_rooms/{roomId} {
      allow read, list: if isSignedIn();
      allow create: if isSignedIn() && isOwner(request.resource.data.createdBy.uid);
      allow delete: if isSignedIn() && isOwner(resource.data.createdBy.uid) && resource.data.status == 'waiting';

      allow update: if isSignedIn() && (
        // Case 1: A new player is joining a waiting room.
        // This rule allows the transaction where the joining player reads the room and both user docs,
        // and writes to the room and their own user doc.
        (
            resource.data.status == 'waiting' &&
            request.resource.data.status == 'in-progress' &&
            request.resource.data.player2.uid == request.auth.uid &&
            // Verify the creator's doc is being read (implicitly allowed in transactions)
            // and the joiner's doc is being written to.
            get(/databases/$(database)/documents/users/$(request.auth.uid)) != null &&
            get(/databases/$(database)/documents/users/$(resource.data.createdBy.uid)) != null
        ) ||
        // Case 2: A player in the game is making a move.
        (isPlayer(resource.data) && resource.data.status == 'in-progress' && request.resource.data.status == 'in-progress') ||
        // Case 3: A player is completing the game (e.g., resignation, final move).
        (isPlayer(resource.data) && resource.data.status == 'in-progress' && request.resource.data.status == 'completed') ||
        // Admin override for any update.
        isAdmin()
      );

      match /messages/{messageId} {
        allow read, create: if isPlayer(get(/databases/$(database)/documents/game_rooms/$(roomId)).data);
      }
    }

    match /transactions/{transactionId} {
      allow read, list: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isSignedIn();
      allow update: if isAdmin();
    }
    
    match /settings/{docId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    match /marketing_applications/{appId} {
        allow create; 
        allow read, update, delete: if isAdmin();
    }

    match /friend_requests/{requestId} {
      allow read, delete: if isSignedIn() && (isOwner(resource.data.fromId) || isOwner(resource.data.toId));
      allow create: if isSignedIn() && isOwner(request.resource.data.fromId);
    }

    match /chats/{chatId} {
      allow read, write: if isSignedIn() && request.auth.uid in chatId.split('_');
      match /messages/{messageId} {
        allow read, create: if isSignedIn() && request.auth.uid in chatId.split('_');
      }
    }

    match /notifications/{notificationId} {
      allow read, list, update: if isOwner(resource.data.userId);
      allow create: if isSignedIn();
    }
    
    match /events/{eventId} {
      allow read, list: if isSignedIn();
      allow create, update, delete: if isAdmin();
    }
    
    match /users/{userId}/event_enrollments/{enrollmentId} {
        allow read, write: if isOwner(userId);
        
        match /progress_history/{progressId} {
            allow read: if isOwner(userId);
            // Only backend cloud functions can write to progress history.
            allow write: if false; 
        }
    }
    
    match /bonuses/{bonusId} {
        allow read, list: if isSignedIn();
        allow create, update, delete: if isAdmin();
    }

    match /dailyBonusClaims/{claimId} {
      allow read, write: if isSignedIn();
    }

    match /users/{userId}/daily_bonus_claims/{claimId} {
        allow read, write: if isOwner(userId);
    }
  }
}
