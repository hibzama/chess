
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuth() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isUpdatingAllowedFields() {
      // Allows updating only specific, non-sensitive fields on another user's doc during a transaction.
      // This is crucial for game payouts and wager deductions.
      let fields = request.resource.data.keys();
      return fields.hasOnly(['balance', 'wins', 'bonusBalance', 'l1Count', 'bonusReferralCount', 'emailVerified']);
    }

    // --- User Collections ---
    match /users/{userId} {
      // Allow any authenticated user to read public profile data. Necessary for friends lists, profiles, etc.
      allow read: if isAuth();
      
      // A user can create their own document.
      allow create: if isUser(userId);
      
      // A user can update their own document.
      // An authenticated user can update another user's balance/wins (for game logic).
      // An admin can update any user document.
      allow update: if isUser(userId) || (isAuth() && isUpdatingAllowedFields()) || isAdmin();

      // Subcollections for user-specific data that only they can manage.
      match /active_campaigns/{docId} {
        allow read, write: if isUser(userId);
      }
      match /bonus_claims/{docId} {
        allow read, create: if isUser(userId);
      }
       match /daily_bonus_claims/{docId} {
        allow read, create: if isUser(userId);
      }
    }

    // --- Game Logic Collections ---
    match /game_rooms/{roomId} {
      allow read: if isAuth();
      allow create: if isAuth() && request.resource.data.createdBy.uid == request.auth.uid;
      
      // Allow updates if the user is one of the players in the room or an admin.
      // Crucial for making moves and for the joinGame transaction.
      allow update: if (isAuth() && request.auth.uid in resource.data.players) || isAdmin();

      // Only the creator can cancel a waiting room. Admins can delete any room.
      allow delete: if (isAuth() && resource.data.createdBy.uid == request.auth.uid) || isAdmin();

      match /messages/{messageId} {
        allow read, create: if isAuth() && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
      }
    }

    // --- Publicly Readable Campaign/Bonus Collections ---
    match /signup_bonus_campaigns/{campaignId} {
      allow read: if isAuth();
      allow write: if isAdmin(); // Only admins can create/edit campaigns
      match /claims/{claimId} {
        allow read, create: if isUser(claimId) || isAdmin();
      }
    }
    match /daily_bonus_campaigns/{campaignId} {
      allow read: if isAuth();
      allow write: if isAdmin();
       match /claims/{claimId} {
        // A user can create a claim for themselves.
        allow create: if isUser(claimId);
        // An admin can read or manage any claim.
        allow read, write: if isAdmin();
      }
    }
    match /deposit_bonus_campaigns/{campaignId} {
      allow read: if isAuth();
      allow write: if isAdmin();
       match /claims/{claimId} {
        allow create: if isUser(claimId);
        allow read, write: if isAdmin();
      }
    }
     match /referral_campaigns/{campaignId} {
      allow read: if isAuth();
      allow write: if isAdmin();
    }
    
    // --- Social & Financial Collections ---
    match /friend_requests/{requestId} {
      allow read: if isAuth() && (resource.data.fromId == request.auth.uid || resource.data.toId == request.auth.uid);
      allow create: if isAuth();
      allow delete: if isAuth() && (resource.data.fromId == request.auth.uid || resource.data.toId == request.auth.uid);
    }
    
    match /transactions/{transactionId} {
      allow read: if isAuth() && (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAuth();
      allow update, delete: if isAdmin();
    }

    match /chats/{chatId} {
      allow read, update: if isAuth() && request.auth.uid in resource.data.userIds;
      allow create: if isAuth();
      match /messages/{messageId} {
        allow read, create: if isAuth() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.userIds;
      }
    }

    // --- Admin & Settings Collections ---
    match /marketing_applications/{appId} {
      allow create: if isAuth();
      allow read, update, delete: if isAdmin();
    }
    
     match /notifications/{notificationId} {
      allow read, update: if isUser(resource.data.userId);
      allow create: if isAuth();
    }

     match /settings/{settingId} {
        allow read: if isAuth();
        allow write: if isAdmin();
    }

    // --- Collection Group Queries ---
    // This is vital for the admin "Referral Bonus Claims" page to work.
    match /{path=**}/bonus_claims/{claimId} {
      allow read, update: if isAdmin();
      allow create: if isAuth();
    }
  }
}
