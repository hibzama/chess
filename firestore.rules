
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =================================
    // Helper Functions
    // =================================

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function getDoc(path) {
      return get(/databases/$(database)/documents/$(path));
    }
    
    function getUserData(userId) {
        return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function incomingDoc() {
      return request.resource.data;
    }
    
    function isAdmin() {
      return isSignedIn() && getUserData(request.auth.uid).role == 'admin';
    }

    // =================================
    // Collections
    // =================================

    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isOwner(userId);
      // Users can update their own non-critical fields.
      // Admins can update anything.
      // Transactions (like wagers/payouts) can update balances. This is checked at the transaction/game level.
      allow update: if (isOwner(userId) && !('balance' in incomingDoc()) && !('marketingBalance' in incomingDoc()) && !('role' in incomingDoc())) || isAdmin();
    }
    
    match /friend_requests/{requestId} {
      allow read: if isSignedIn() && (isOwner(resource.data.fromId) || isOwner(resource.data.toId));
      allow create: if isSignedIn() && isOwner(request.resource.data.fromId);
      allow delete: if isSignedIn() && (isOwner(resource.data.fromId) || isOwner(resource.data.toId));
    }
    
    match /game_rooms/{roomId} {
      allow list, read: if isSignedIn();
      allow create: if isSignedIn() && isOwner(request.resource.data.createdBy.uid);
      allow delete: if isSignedIn() && isOwner(resource.data.createdBy.uid);

      // This complex rule allows various game state updates: joining, playing moves, and completing the game.
      allow update: if isSignedIn() && 
        (
          // Rule for joining a game
          (
            resource.data.status == 'waiting' &&
            request.resource.data.status == 'in-progress' &&
            request.resource.data.player2.uid == request.auth.uid &&
            !(request.auth.uid in resource.data.players)
          ) ||
          // Rule for making moves during a game
          (
            (isOwner(resource.data.createdBy.uid) || isOwner(resource.data.player2.uid)) &&
            resource.data.status == 'in-progress' &&
            request.resource.data.status == 'in-progress'
          ) ||
          // Rule for completing a game (e.g., setting winner)
          (
            (isOwner(resource.data.createdBy.uid) || isOwner(resource.data.player2.uid)) &&
            resource.data.status == 'in-progress' &&
            request.resource.data.status == 'completed'
          )
        );
    }
    
    match /transactions/{transactionId} {
      allow read, list: if (isSignedIn() && isOwner(resource.data.userId)) || isAdmin();
      // Allow creation for wagers, deposits, and withdrawals under specific conditions
      allow create: if isSignedIn() && 
        (
            (isOwner(request.resource.data.userId) && request.resource.data.type == 'deposit') ||
            (isOwner(request.resource.data.userId) && request.resource.data.type == 'withdrawal') ||
            (isOwner(request.resource.data.userId) && request.resource.data.type == 'marketing_withdrawal') ||
            // Allow wager transactions to be created by the game logic
            (isOwner(request.resource.data.userId) && request.resource.data.type == 'wager')
        );
      allow update: if isAdmin();
    }
    
    match /notifications/{notificationId} {
        allow read, list, update: if isSignedIn() && isOwner(resource.data.userId);
        allow create: if isSignedIn();
    }
    
    match /marketing_applications/{appId} {
        allow create; 
        allow read, update, delete: if isAdmin();
    }
    
    match /game_rooms/{roomId}/messages/{messageId} {
      allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
    }

    match /chats/{chatId} {
        allow read, write: if isSignedIn() && request.auth.uid in resource.data.users;
        match /messages/{messageId} {
            allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
        }
    }
    
    match /settings/{docId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    match /bonuses/{bonusId} {
        allow read: if isSignedIn();
        allow create, update, delete: if isAdmin();
    }
    
    match /dailyBonusClaims/{claimId} {
      allow read: if isSignedIn();
      allow create, update: if isSignedIn();
    }
    
    match /users/{userId}/daily_bonus_claims/{claimId} {
        allow read, write: if isOwner(userId);
    }

    // Event System Rules
    match /events/{eventId} {
        allow read, list: if isSignedIn();
        allow create, update, delete: if isAdmin();
    }
    
    // A user can enroll themselves in an event
    match /users/{userId}/event_enrollments/{eventId} {
        allow read, create, update: if isOwner(userId);
    }
    
    // This collection is for admin tracking but users need to write to it during enrollment.
    match /event_enrollments/{eventId}/users/{userId} {
        allow create, write: if isOwner(userId);
    }
  }
}
