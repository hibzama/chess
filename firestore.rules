rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isUser() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'user';
    }

    function isMarketer() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'marketer';
    }

    function isJoiningGame(gameId) {
      let room = get(/databases/$(database)/documents/game_rooms/$(gameId)).data;
      let nextRoom = request.resource.data;
      // Allow update if status changes to in-progress and the user joining is the one making the request.
      return room.status == 'waiting' &&
             nextRoom.status == 'in-progress' &&
             nextRoom.player2.uid == request.auth.uid;
    }
    
    // --- Collection Rules ---

    // Users can read public profiles, but only write to their own. Admins can do anything.
    match /users/{userId} {
      allow read;
      allow write: if isOwner(userId) || isAdmin();
      
      // Rules for user subcollections
      match /{subcollection}/{docId} {
        allow read, write: if isOwner(userId) || isAdmin();
      }
    }

    // Admins can manage all campaigns. Users can only read them.
    match /signup_bonus_campaigns/{campaignId} {
      allow read: if isUser() || isAdmin();
      allow write: if isAdmin();
      
      match /claims/{claimId} {
        allow read, write: if isOwner(claimId) || isAdmin();
      }
    }

    match /daily_bonus_campaigns/{campaignId} {
        allow read: if isUser() || isAdmin();
        allow write: if isAdmin();

        match /claims/{claimId} {
            allow read, write: if isOwner(claimId) || isAdmin();
        }
    }
    
    match /deposit_bonus_campaigns/{campaignId} {
        allow read: if isUser() || isAdmin();
        allow write: if isAdmin();
        
        match /claims/{claimId} {
          allow read, write: if isOwner(claimId) || isAdmin();
        }
    }

    match /referral_campaigns/{campaignId} {
        allow read: if isUser() || isAdmin();
        allow write: if isAdmin();
    }
    
    // Admins can manage all settings. Users can read specific public settings if any.
    match /settings/{settingId} {
      allow read: if isUser() || isAdmin();
      allow write: if isAdmin();
    }

    // Rules for game rooms
    match /game_rooms/{roomId} {
      allow read; 
      allow create: if request.auth.uid == request.resource.data.createdBy.uid;
      allow update: if isJoiningGame(roomId) || isAdmin();
      allow delete: if request.auth.uid == resource.data.createdBy.uid || isAdmin();

      // Chat messages within a game room
      match /messages/{messageId} {
        allow read, create: if request.auth.uid in resource.data.players;
      }
    }
    
    // General transactions can be created by users, but only read/managed by admins or the owner.
    match /transactions/{transactionId} {
        allow read: if isOwner(resource.data.userId) || isAdmin();
        allow create: if request.auth.uid == request.resource.data.userId;
        allow update, delete: if isAdmin();
    }

    // Notifications can be read/updated by the owner or managed by admins.
    match /notifications/{notificationId} {
        allow read, update: if isOwner(resource.data.userId);
        allow create, delete: if isAdmin();
    }

    // Rules for friend requests
    match /friend_requests/{requestId} {
        allow read, create: if isOwner(request.resource.data.fromId) || isOwner(request.resource.data.toId);
        allow delete: if isOwner(resource.data.fromId) || isOwner(resource.data.toId) || isAdmin();
    }

    // Rules for chats
    match /chats/{chatId} {
        allow read, update: if request.auth.uid in resource.data.userIds;
        match /messages/{messageId} {
            allow read, create: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.userIds;
        }
    }
    
    // Rules for marketing applications and withdrawals
    match /marketing_applications/{appId} {
        allow create;
        allow read, update: if isAdmin();
    }
    
     match /bonus_claims/{claimId} {
      allow read, update, create: if request.auth.uid == request.resource.data.userId || isAdmin();
    }
  }
}
