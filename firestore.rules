rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAuth() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    function isAdmin() {
      // Check for the existence of the user document and role before accessing it.
      return isAuth() && exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /users/{userId} {
      // Allow any authenticated user to read any user document.
      // This is needed for multiplayer joins, viewing friend profiles, leaderboards, etc.
      // Write access remains secure.
      allow read: if isAuth();

      // Users can only create their own user document. Admins can create any.
      allow create: if isUser(userId) || isAdmin();

      // Users can update a limited set of their own fields. Admins can update any.
      allow update: if (isUser(userId) && request.resource.data.keys().hasOnly([
                      'firstName', 'lastName', 'photoURL', 'equipment', 'phone', 
                      'address', 'city', 'country', 'gender'
                    ])) || isAdmin();
                    
      match /active_campaigns/{docId} {
        allow read, write: if isUser(userId);
      }
    }
    
    match /game_rooms/{roomId} {
      allow read, create: if isAuth();
      // Allow players in the game or admins to update it.
      allow update: if isAuth() && (request.auth.uid in resource.data.players || isAdmin());
      // Only the creator or an admin can delete a waiting room.
      allow delete: if isAuth() && (resource.data.status == 'waiting' && resource.data.createdBy.uid == request.auth.uid) || isAdmin();
      
      match /messages/{messageId} {
        allow read, create: if isAuth() && request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players;
      }
    }

    match /transactions/{transactionId} {
      allow read: if isUser(resource.data.userId) || isAdmin();
      allow create: if isAuth();
      allow update, delete: if isAdmin();
    }

    // Admins have full control, authenticated users can read lists.
    match /signup_bonus_campaigns/{campaignId} { allow read: if isAuth(); allow write: if isAdmin(); }
    match /deposit_bonus_campaigns/{campaignId} { allow read: if isAuth(); allow write: if isAdmin(); }
    match /referral_campaigns/{campaignId} { allow read: if isAuth(); allow write: if isAdmin(); }
    match /tasks/{campaignId} { allow read: if isAuth(); allow write: if isAdmin(); }

    match /bonus_claims/{claimId} {
      allow read: if isUser(resource.data.userId) || isAdmin();
      allow create: if isAuth();
      allow update: if isAdmin();
    }

    match /marketing_applications/{appId} {
      allow read: if isAdmin();
      allow create: if isAuth();
      allow update: if isAdmin();
    }

    match /notifications/{notificationId} {
      allow read, update: if isUser(resource.data.userId);
      allow create: if isAuth();
    }

    match /friend_requests/{requestId} {
      allow read, create: if isAuth();
      allow delete: if isAuth() && (isUser(resource.data.fromId) || isUser(resource.data.toId));
    }
    
    match /chats/{chatId} {
      allow read, update, create: if isAuth() && request.auth.uid in resource.data.userIds;
      match /messages/{messageId} {
        allow read, create: if isAuth() && get(/databases/$(database)/documents/chats/$(chatId)).data.userIds.hasAny([request.auth.uid]);
      }
    }
    
    match /settings/{settingId} {
      allow read: if isAuth();
      allow write: if isAdmin();
    }
    
    // Allow admins to perform complex queries across collections
    match /{path=**}/bonus_claims/{claimId} { allow read: if isAdmin(); }
    match /{path=**}/deposit_bonus_campaigns/{campaignId}/claims/{claimId} { allow read, create: if isUser(claimId) || isAdmin(); }
  }
}
