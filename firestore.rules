rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if the user is an admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if request.auth.uid == userId;
      
      // Allow user to update their own data, or an admin to update any user data
      allow update: if request.auth.uid == userId || isAdmin();
    }

    // Rules for the 'game_rooms' collection
    match /game_rooms/{roomId} {
      allow read, list: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.createdBy.uid == request.auth.uid;
      
      // Allow updates for joining, playing, and resigning
      allow update: if isAuthenticated() && resource.data.players.hasAny([request.auth.uid]);
      
      allow delete: if isAuthenticated() && resource.data.createdBy.uid == request.auth.uid;

      // Allow anyone in the game to chat
      match /messages/{messageId} {
        allow read, create: if isAuthenticated() && get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players.hasAny([request.auth.uid]);
      }
    }
    
    // Rules for 'chats' collection
    match /chats/{chatId} {
        allow read, list: if isAuthenticated() && resource.data.users[request.auth.uid].exists == true;
        allow create: if isAuthenticated();
        allow update: if isAuthenticated() && resource.data.users[request.auth.uid].exists == true;
        
        match /messages/{messageId} {
            allow read, create: if isAuthenticated() && get(/databases/$(database)/documents/chats/$(chatId)).data.users[request.auth.uid].exists == true;
        }
    }

    // Rules for 'transactions' collection
    match /transactions/{transactionId} {
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Admin can manage any transaction
      allow update, delete, list: if isAdmin();
    }

    // Rules for 'settings' collection (Admin only)
    match /settings/{settingId} {
      allow read, write: if isAdmin();
    }
    
    // Rules for 'marketing_applications'
    match /marketing_applications/{appId} {
      // Allow anyone to create an application
      allow create: if true;
      // Admins can read/update applications
      allow read, update, list: if isAdmin();
    }
    
    // Rules for 'notifications'
    match /notifications/{notifId} {
        allow read, update: if isAuthenticated() && resource.data.userId == request.auth.uid;
        allow create: if true; // Allow backend services/other users to create notifications
    }

    // Rules for events
    match /events/{eventId} {
      // Any authenticated user can view events
      allow read, list: if isAuthenticated();
      
      // Only admins can create, update, or delete events
      allow write: if isAdmin();
    }

    // Event enrollments subcollection rules
    match /users/{userId}/event_enrollments/{enrollmentId} {
      // Users can only manage their own enrollments
      allow read, create, update, delete: if request.auth.uid == userId;
      // Admins can read any enrollment
      allow list: if isAdmin();
    }
    
    match /users/{userId}/event_enrollments/{enrollmentId}/progress_history/{progressId} {
        allow read: if request.auth.uid == userId || isAdmin();
    }
    
    // Rules for daily bonuses
    match /bonuses/{bonusId} {
      allow read, list: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    match /dailyBonusClaims/{bonusId} {
      allow read: if isAuthenticated();
      // Allow transaction updates
      allow write: if isAuthenticated();
    }
    
    match /users/{userId}/daily_bonus_claims/{claimId} {
        allow read, create: if request.auth.uid == userId;
    }
  }
}
