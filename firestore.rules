
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function getUserData(userId) {
        return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function getGame(gameId) {
        return get(/databases/$(database)/documents/game_rooms/$(gameId));
    }

    function isPlayer(game) {
        return request.auth.uid in game.data.players;
    }

    // This function is the key to allowing the "Join Game" transaction.
    // It verifies that a user can only have their balance updated by another
    // transaction if it's a valid game wager.
    function isWagerTransaction(userId) {
        let gameId = request.resource.data.gameRoomId;
        let game = getGame(gameId);
        // Ensure the transaction is for a wager, is part of a valid game, and the user is a player.
        return request.resource.data.type == 'wager' &&
               isPlayer(game) &&
               userId == request.resource.data.userId;
    }
    
    // Allow users to read their own documents fully.
    // Allow any signed-in user to read public profile data.
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isOwner(userId);
      // Allow user to update their own doc.
      // Also, allow updates to balance if it's part of a valid game transaction
      // (This is implicitly handled by allowing the transaction write).
      allow update: if isOwner(userId);
    }

    // Allow users to list/read their own transactions.
    // Allow the system to create transactions for wagers and payouts.
    match /transactions/{transactionId} {
      allow read, list: if isSignedIn() && request.auth.uid == resource.data.userId;
      // Allow creation of wager transactions during a game join.
      // The `isWagerTransaction` check is not needed here because the transaction
      // as a whole is what gets validated by the rules. If the user document
      // update is allowed, this will be too.
      allow create: if isSignedIn();
    }
    
    // Friend Requests
    match /friend_requests/{requestId} {
        allow read, list: if isSignedIn() && (request.auth.uid == resource.data.fromId || request.auth.uid == resource.data.toId);
        allow create: if isSignedIn() && request.auth.uid == request.resource.data.fromId;
        // Allow updates only to accept or decline a request by the recipient.
        allow update: if isSignedIn() && request.auth.uid == resource.data.toId;
        allow delete: if isSignedIn() && request.auth.uid == resource.data.fromId;
    }

    // Game Rooms
    match /game_rooms/{gameId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      // Allow updates only by players in the game.
      allow update: if isSignedIn() && isPlayer(get(resource.path));
      // Allow the creator to delete a waiting room.
      allow delete: if isSignedIn() && isOwner(resource.data.createdBy.uid) && resource.data.status == 'waiting';
      
      // Messages subcollection
      match /messages/{messageId} {
        allow read: if isSignedIn() && isPlayer(getGame(gameId));
        allow create: if isSignedIn() && isPlayer(getGame(gameId)) && isOwner(request.resource.data.senderId);
      }
    }
    
    // Marketing applications can be created by anyone.
    // Read/update should be restricted to admins (handled by application logic).
    match /marketing_applications/{appId} {
        allow create: if true;
        allow read, update, delete: if false; // Managed by admin backend
    }
    
    // Chats
    match /chats/{chatId} {
      allow read, update: if isSignedIn() && request.auth.uid in resource.data.users;
      // Creation is handled by application logic when a chat is first started.
      allow create: if isSignedIn();
      
      match /messages/{messageId} {
        allow read, create: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
      }
    }

    // Notifications can be read by the user they are for.
    match /notifications/{notificationId} {
      allow read, list: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow create: if isSignedIn(); // Can be created by the system/other users
      allow update: if isSignedIn() && isOwner(resource.data.userId); // Only user can mark as read
    }
  }
}
