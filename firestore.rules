rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // General rule: By default, no one can read or write.
    match /{document=**} {
      allow read, write: if false;
    }

    // Users can read their own profile, admins can read any.
    // Users can update their own profile, but with restrictions.
    match /users/{userId} {
      allow read: if request.auth.uid == userId || isAdmin();
      
      // Allow a user to update their own profile fields, but NOT their balance or role.
      // A specific exception is made to allow balance updates ONLY during a valid event enrollment transaction.
      allow update: if request.auth.uid == userId &&
                      !( 'balance' in request.resource.data && 
                         request.resource.data.balance != resource.data.balance &&
                         !existsAfter(/databases/$(database)/documents/users/$(userId)/event_enrollments/$(request.resource.data.enrollingEventId))
                       ) &&
                      !('role' in request.resource.data && request.resource.data.role != resource.data.role);

      // Allow users to create their own profile during registration.
      allow create: if request.auth.uid == userId;

      match /event_enrollments/{enrollmentId} {
        allow read: if request.auth.uid == userId || isAdmin();
        allow create: if request.auth.uid == userId;
        allow update, delete: if request.auth.uid == userId || isAdmin();
        
        match /progress_history/{historyId} {
           allow read: if request.auth.uid == userId || isAdmin();
           allow create, update, delete: if isAdmin(); // Only functions can write here
        }
      }
      
      match /daily_bonus_claims/{bonusId} {
        allow read, create: if request.auth.uid == userId;
      }
    }
    
    // Game rooms can be created by any signed-in user.
    // They can be read by anyone if public, or by players involved if private.
    // They can only be updated by players involved in the game.
    match /game_rooms/{gameId} {
      allow create: if isSignedIn();
      allow read: if resource.data.isPrivate == false || request.auth.uid in resource.data.players;
      allow update: if request.auth.uid in resource.data.players;
      allow delete: if request.auth.uid == resource.data.createdBy.uid;
      
      match /messages/{messageId} {
        allow read, create: if request.auth.uid in get(/databases/$(database)/documents/game_rooms/$(gameId)).data.players;
      }
    }

    // Transactions can be created by the user they belong to.
    // They can only be read by the user or an admin.
    // Only admins can approve or reject (update) them.
    match /transactions/{transactionId} {
      allow create: if request.resource.data.userId == request.auth.uid;
      allow read: if resource.data.userId == request.auth.uid || isAdmin();
      allow update: if isAdmin();
    }
    
    // Marketing applications can be created by anyone.
    // Only admins can read or update them.
    match /marketing_applications/{appId} {
        allow create: if true;
        allow read, update: if isAdmin();
    }
    
    // Settings can only be read/written by admins.
    match /settings/{settingId} {
        allow read, write: if isAdmin();
    }
    
    // Notifications can be read/updated by the user they are for.
    match /notifications/{notifId} {
        allow read, update: if resource.data.userId == request.auth.uid;
        allow create: if true; // Allow functions/server to create
    }
    
    // Events can be read by any signed-in user.
    // Only admins can create, update, or delete them.
    match /events/{eventId} {
        allow read: if isSignedIn();
        allow create, update, delete: if isAdmin();
    }
    
    // Bonus claims counters can be read by users and updated by anyone (via transaction).
    match /dailyBonusClaims/{bonusId} {
       allow read, write: if isSignedIn();
    }
    
    // Chats can be read/written by players involved in the chat.
    match /chats/{chatId} {
        allow read, write: if request.auth.uid in resource.data.users;
        
        match /messages/{messageId} {
            allow read, create: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users;
        }
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}
