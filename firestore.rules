
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // --- User Data Rules ---
    match /users/{userId} {
      // Admins can read/write any user document
      // Users can read/write their own document
      allow read, write: if isAdmin() || (isAuthenticated() && request.auth.uid == userId);
    }
    
    // --- Admin-Only Collections ---
    match /settings/{docId} {
       allow read, write: if isAdmin();
    }
    
    // --- Mixed-Access Collections ---

    // Transactions
    match /transactions/{transactionId} {
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow read, write: if isAdmin();
    }

    // Game Rooms
    match /game_rooms/{roomId} {
      allow create: if isAuthenticated() && request.resource.data.createdBy.uid == request.auth.uid;
      allow read: if isAdmin() || resource.data.isPrivate == false || (isAuthenticated() && request.auth.uid in resource.data.players);
      allow update: if (isAuthenticated() && request.auth.uid in resource.data.players) || isAdmin();
      allow delete: if (isAuthenticated() && resource.data.createdBy.uid == request.auth.uid) || isAdmin();
    }
    
    match /game_rooms/{roomId}/messages/{messageId} {
      allow read, create: if isAuthenticated() && get(/databases/$(database)/documents/game_rooms/$(roomId)).data.players.hasAny([request.auth.uid]);
    }

    // Marketing Applications
    match /marketing_applications/{docId} {
      allow create: if isAuthenticated();
      allow read, write: if isAdmin();
    }

    // Chat
    match /chats/{chatId} {
        allow read, update: if isAuthenticated() && request.auth.uid in resource.data.users;
        allow create: if isAuthenticated() && request.auth.uid in request.resource.data.users;
    }
    match /chats/{chatId}/messages/{messageId} {
        allow read, create: if isAuthenticated() && get(/databases/$(database)/documents/chats/$(chatId)).data.users[request.auth.uid].exists == true;
    }
    
    // Notifications
    match /notifications/{notificationId} {
        allow read, create, update: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }

    // Friend Requests
    match /friend_requests/{requestId} {
        allow read, create: if isAuthenticated() && (request.resource.data.fromId == request.auth.uid || request.resource.data.toId == request.auth.uid);
        allow delete: if isAuthenticated() && (resource.data.fromId == request.auth.uid || resource.data.toId == request.auth.uid);
    }
  }
}
